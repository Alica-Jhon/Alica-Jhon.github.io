<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java游戏：简单的贪吃蛇小游戏</title>
      <link href="2021/04/17/Java%E6%B8%B8%E6%88%8F%EF%BC%9A%E7%AE%80%E5%8D%95%E7%9A%84%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
      <url>2021/04/17/Java%E6%B8%B8%E6%88%8F%EF%BC%9A%E7%AE%80%E5%8D%95%E7%9A%84%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="程序设计思路"><a href="#程序设计思路" class="headerlink" title="程序设计思路"></a>程序设计思路</h2><h3 id="Data类"><a href="#Data类" class="headerlink" title="Data类"></a>Data类</h3><p><code>作用：连接statics文件夹，将静态资源包中的图片转化为图标 方便在面板上绘制。</code><br><code>实现：使用class.getResource(String path)方法。</code></p><p>   代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.snake;import javax.swing.*;import java.net.URL;public class Data {    //贪吃蛇头部    public static URL upUrl = Data.class.getResource("/statics/up.png");    public static ImageIcon up = new ImageIcon(upUrl);    public static URL downUrl = Data.class.getResource("/statics/down.png");    public static ImageIcon down = new ImageIcon(downUrl);    public static URL leftUrl = Data.class.getResource("/statics/left.png");    public static ImageIcon left = new ImageIcon(leftUrl);    public static URL rightUrl = Data.class.getResource("/statics/right.png");    public static ImageIcon right = new ImageIcon(rightUrl);    //贪食蛇身体    public static URL bodyUrl = Data.class.getResource("/statics/body.png");    public static ImageIcon body = new ImageIcon(bodyUrl);    //食物    public static URL foodUrl = Data.class.getResource("/statics/food.png");    public static ImageIcon food = new ImageIcon(foodUrl);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="StartGame类"><a href="#StartGame类" class="headerlink" title="StartGame类"></a>StartGame类</h3><p><code>作用：创建游戏窗口，在窗口中添加一个游戏面板。</code><br><code>实现：使用JFrame类创建游戏窗口，利用其add()方法添加一个GamePanel类实例化对象。</code></p><p>  代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.snake;import javax.swing.*;import java.awt.*;public class StartGame {    public static void main(String[] args){        //建立游戏窗口        JFrame frame = new JFrame("Java-贪吃蛇小游戏");//标题        frame.setSize(900,720);//窗口大小        frame.setLocationRelativeTo(null);//窗口显示屏幕中间        frame.setResizable(false);//固定窗口大小        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//设置窗体关闭事件        frame.add(new GamePanel());//添加游戏内容        frame.setVisible(true);//设置窗体可见    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GamePanel类"><a href="#GamePanel类" class="headerlink" title="GamePanel类"></a>GamePanel类</h3><p><code>作用：实现游戏的动态页面。</code><br><code>实现：（1）init()方法：初始化小蛇位置； &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;（2）eat()方法：用随机种子随机食物的位置，并进行判定，食物位置不能和小蛇位置重合； &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;（3）继承JPanel类，重写paintComponent(Graphics g)方法，在方法中绘制标题栏、小蛇的位置（根据direction小蛇头部方向变量绘制小蛇头部）、小蛇身体、积分栏、游戏提醒项与失败判断项； &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;（4）实现KeyListener 接口中的keyPressed(KeyEvent e)方法，获取键盘输入，根据键盘输入对游戏状态或者小蛇头部方向direction变量进行更改； &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;（5）实现ActionListener接口中的actionPerformed(ActionEvent e)方法，根据游戏状态和direction变量进行小蛇移动操作（注意禁用直接回头操作），进行吃食物判定和死亡判定。使用Timer计时器让游戏动态变化，用repaint()方法实时更新界面。 </code></p><p>   代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.snake;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import java.util.Random;public class GamePanel extends JPanel implements KeyListener, ActionListener {    int[] snakeX = new int[500];//贪吃蛇横坐标    int[] snakeY = new int[500];//贪吃蛇纵坐标    int foodX;//食物横坐标    int foodY;//食物蛇纵坐标    int length;//贪吃蛇的长度    String  direction;//贪吃蛇头方向    int score;//积分    Random r = new Random();    Timer timer = new Timer(100,this);    boolean isStart;    boolean isFail;    //构造函数    public GamePanel(){        init();        this.setFocusable(true);        this.addKeyListener(this);        timer.start();    }    private void init(){        length=3;        snakeX[0]=100;snakeY[0]=100;        snakeX[1]=75;snakeY[1]=100;        snakeX[2]=50;snakeY[2]=100;        direction = "R";        eat(foodX,foodY);        isStart = false;        isFail = false;        score = 0;    }    private void eat(int x,int y){        x= 25 + 25*r.nextInt(34);        y= 75 + 25*r.nextInt(24);        for (int i = 0; i &lt; length; i++) {            if(snakeX[i]==x&amp;&amp;snakeY[i]==y){                x = 25 + 25*r.nextInt(34);                y = 75 + 25*r.nextInt(24);            }        }        foodX = x;foodY = y;    }    protected void paintComponent(Graphics g) {        super.paintComponent(g);        this.setBackground(Color.white);//设置背景板为白色        //画标题        g.setColor(Color.GREEN);        g.setFont(new Font("幼圆",Font.BOLD,50));        g.drawString("贪吃蛇游戏",300,60);        //绘制游戏区域        g.setColor(Color.GRAY);        g.fillRect(25,75,850,600);        //画贪吃蛇头部        if(direction=="R"){            Data.right.paintIcon(this,g,snakeX[0],snakeY[0]);        }        else if(direction=="L"){            Data.left.paintIcon(this,g,snakeX[0],snakeY[0]);        }        if(direction=="U"){            Data.up.paintIcon(this,g,snakeX[0],snakeY[0]);        }        else if(direction=="D"){            Data.down.paintIcon(this,g,snakeX[0],snakeY[0]);        }        //画身体        for (int i = 1; i &lt; length ; i++) {            Data.body.paintIcon(this,g,snakeX[i],snakeY[i]);        }        //画食物        Data.food.paintIcon(this,g,foodX,foodY);        //绘制积分栏        g.setColor(Color.BLACK);        g.setFont(new Font("幼圆",Font.BOLD,20));        g.drawString("长度："+length,730,30);        g.drawString("得分："+score,730,60);        //游戏开始提醒        if(isStart==false){            g.setColor(Color.BLACK);            g.setFont(new Font("幼圆",Font.BOLD,40));            g.drawString("按空格键开始游戏",300,300);        }        //失败判断        if(isFail){            g.setColor(Color.RED);            g.setFont(new Font("幼圆",Font.BOLD,40));            g.drawString("游戏失败，按空格键重新开始",300,300);        }    }    @Override    public void keyPressed(KeyEvent e) {        int keyCode = e.getKeyCode();//获取按下的按键        //判断空格        if(keyCode==KeyEvent.VK_SPACE){            if(isFail){                isFail = false;                init();            }            else{                isStart = !isStart;            }            repaint();        }        //判断方向        if(keyCode==KeyEvent.VK_LEFT&amp;&amp;direction!="R"){            direction = "L";        }        else if(keyCode==KeyEvent.VK_RIGHT&amp;&amp;direction!="L"){            direction = "R";        }        else if(keyCode==KeyEvent.VK_UP&amp;&amp;direction!="D"){            direction = "U";        }        else if(keyCode==KeyEvent.VK_DOWN&amp;&amp;direction!="U"){            direction = "D";        }    }    @Override    public void keyReleased(KeyEvent e) {    }    @Override    public void keyTyped(KeyEvent e) {    }    @Override    public void actionPerformed(ActionEvent e) {        //判断游戏状态        if(isStart&amp;&amp;!isFail){            //移动身体            for (int i = length-1; i &gt; 0 ; i--) {                snakeX[i] = snakeX[i-1];                snakeY[i] = snakeY[i-1];            }            //移动头部            if(direction=="R"){                snakeX[0] += 25;                if(snakeX[0]&gt;850){                    snakeX[0] = 25;                }            }            else  if(direction=="L"){                snakeX[0] -= 25;                if(snakeX[0]&lt;25){                    snakeX[0] = 850;                }            }            else  if(direction=="U"){                snakeY[0] -= 25;                if(snakeY[0]&lt;75){                    snakeY[0] = 650;                }            }            else  if(direction=="D"){                snakeY[0] += 25;                if(snakeY[0]&gt;650){                    snakeY[0] = 75;                }            }            //吃食物            if(snakeX[0]==foodX&amp;&amp;snakeY[0]==foodY){                length++;                score += 10;                eat(foodX,foodY);            }            //死亡判定            for (int i = 1; i &lt; length; i++) {                if(snakeX[0]==snakeX[i]&amp;&amp;snakeY[0]==snakeY[i]){                    isFail=true;                }            }            repaint();        }        timer.start();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="游戏展示"><a href="#游戏展示" class="headerlink" title="游戏展示"></a>游戏展示</h2><p><img src="%5Cphotos%5C1.png" alt="avater"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> GUI </tag>
            
            <tag> 贪吃蛇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python控制台输出俄罗斯方块</title>
      <link href="2021/04/17/Python%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/"/>
      <url>2021/04/17/Python%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="俄罗斯方块-打印"><a href="#俄罗斯方块-打印" class="headerlink" title="俄罗斯方块-打印"></a>俄罗斯方块-打印</h2><h3 id="功能：输入字母，打印俄罗斯方块的-图形"><a href="#功能：输入字母，打印俄罗斯方块的-图形" class="headerlink" title="功能：输入字母，打印俄罗斯方块的*图形"></a>功能：输入字母，打印俄罗斯方块的*图形</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 尽可能吧俄罗斯方块放在中间Tetris = {'L': [[1, 1], [1, 2], [1, 3], [2, 3]],         'O': [[1, 1], [2, 1], [1, 2], [2, 2]],         'J': [[2, 1], [2, 2], [1, 3], [2, 3]],         'Z': [[1, 1], [2, 1], [2, 2], [3, 2]],         'S': [[1, 1], [1, 2], [2, 2], [2, 3]],         'I': [[1, 1], [1, 2], [1, 3], [1, 4]],         'T': [[1, 1], [2, 1], [2, 2], [3, 1]]}print(Tetris)while True:    figure = input("请输入俄罗斯方块的形状")    flag = 0    for i in range(0, 5):        for j in range(0, 4):            for li in range(0, len(Tetris[figure])):    # Tetris['L']                if j == Tetris[figure][li][0] and i == Tetris[figure][li][1]:                    flag = 1            if flag == 1:                print("*", end='')            else:                print(" ", end='')            flag = 0        print()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="俄罗斯方块-移动"><a href="#俄罗斯方块-移动" class="headerlink" title="俄罗斯方块-移动"></a>俄罗斯方块-移动</h2><p>这一版使用了函数+字典</p><h3 id="功能：输入字母，打印俄罗斯方块的-图形，输入468可以移动"><a href="#功能：输入字母，打印俄罗斯方块的-图形，输入468可以移动" class="headerlink" title="功能：输入字母，打印俄罗斯方块的*图形，输入468可以移动"></a>功能：输入字母，打印俄罗斯方块的*图形，输入468可以移动</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 文件名称：Model-Tetris.PY# 开发工具：PyCharmTetris = {'L': [[1, 1], [1, 2], [1, 3], [2, 3]],         'O': [[1, 1], [2, 1], [1, 2], [2, 2]],         'J': [[2, 1], [2, 2], [1, 3], [2, 3]],         'Z': [[1, 1], [2, 1], [2, 2], [3, 2]],         'S': [[1, 1], [1, 2], [2, 2], [2, 3]],         'I': [[1, 1], [1, 2], [1, 3], [1, 4]],         'T': [[1, 1], [2, 1], [2, 2], [3, 1]]}def L_char(char):    flag = 0    for i in range(0, 7):        for j in range(0, 7):            for li in range(0, len(Tetris[char])):  # Tetris['L']                if j == Tetris[char][li][0] and i == Tetris[char][li][1]:                    flag = 1            if flag == 1:                print("*", end='')            else:                print(" ", end='')            flag = 0        print()def move(char, num):    if num == 2:        for li in range(0, len(Tetris[char])):            Tetris[char][li][1] += 1    if num == 4:        for li in range(0, len(Tetris[char])):            Tetris[char][li][0] -= 1    if num == 6:        for li in range(0, len(Tetris[char])):            Tetris[char][li][0] += 1    if num == 8:        for li in range(0, len(Tetris[char])):            Tetris[char][li][1] -= 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 文件名称：Test-Tetris.PY# 开发工具：PyCharm   from Day05 import Model_Tetrisif __name__ == '__main__':    char = input("请输入图形：")    Model_Tetris.L_char(char)    while True:        num = int(input("请输入移动代码2/4/6/8:"))        if num == 8 or num == 2 or num == 4 or num == 6:            Model_Tetris.move(char, num)            Model_Tetris.L_char(char)        else:            break<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="俄罗斯方块-旋转"><a href="#俄罗斯方块-旋转" class="headerlink" title="俄罗斯方块-旋转"></a>俄罗斯方块-旋转</h2><p>主要思想：预定义4X4的坐标转换，旋转式查找字典中的转换坐标，进行相应的替换</p><h3 id="功能：输入字母，打印俄罗斯方块的-图形，输入468可以移动，输入5可以旋转"><a href="#功能：输入字母，打印俄罗斯方块的-图形，输入468可以移动，输入5可以旋转" class="headerlink" title="功能：输入字母，打印俄罗斯方块的*图形，输入468可以移动，输入5可以旋转"></a>功能：输入字母，打印俄罗斯方块的*图形，输入468可以移动，输入5可以旋转</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">#!/usr/bin/python# _*_coding:utf-8_*_# 开发人员：zys# 开发时间：2021/4/16 16:50 # 文件名称：Test-Tetris.PY# 开发工具：PyCharm   import randomfrom Day06.test1 import Model_Tetrisif __name__ == '__main__':    # 随机生成方法    # Character = "LOJSZIT"    # char = random.choice(Character)    char = "L"    Model_Tetris.L_char(char)    while True:        num = int(input("请输入移动代码4/5/6/8:")) # 5是旋转        if num == 8 or num == 4 or num == 6:            Model_Tetris.move(char, num)            Model_Tetris.L_char(char)        elif num == 5:            Model_Tetris.revolve(char)            Model_Tetris.L_char(char)        else:            break<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">#!/usr/bin/python# _*_coding:utf-8_*_# 开发人员：zys# 开发时间：2021/4/16 16:36 # 文件名称：Model-Tetris.PY# 开发工具：PyCharmTetris = {'L': [[1, 1], [1, 2], [1, 3], [2, 3]],         'O': [[1, 1], [1, 2], [2, 1], [2, 2]],         'J': [[1, 2], [2, 2], [3, 1], [3, 2]],         'Z': [[1, 1], [1, 2], [2, 2], [2, 3]],         'S': [[1, 1], [2, 1], [2, 2], [3, 2]],         'I': [[1, 1], [2, 1], [3, 1], [4, 1]],         'T': [[1, 1], [1, 2], [2, 2], [1, 3]]}# 4*4旋转'''这里补充一个知识点：    字典中的key是不可变的，所以不能用list作为字典的key，    因为list可以修改，这里采用了元组作为key，指明不可改变，    后面地址查值的时候需要进行类型转换。'''rotateDict = {(1, 1): [4, 1], (1, 2): [3, 1], (1, 3): [2, 1], (1, 4): [1, 1],              (2, 1): [4, 2], (3, 1): [4, 3], (4, 1): [4, 4], (4, 2): [3, 4],              (4, 3): [2, 4], (4, 4): [1, 4], (3, 4): [1, 3], (2, 4): [1, 2],              (2, 2): [3, 2], (3, 2): [3, 3], (3, 3): [2, 3], (2, 3): [2, 2]}def L_char(char):    flag = 0    for i in range(0, 5):        for j in range(0, 5):            for li in range(0, len(Tetris[char])):  # Tetris['L']                if j == Tetris[char][li][0] and i == Tetris[char][li][1]:                    flag = 1            if flag == 1:                print("*", end='')            else:                print(" ", end='')            flag = 0        print()def move(char, num):    if num == 2:        for li in range(0, len(Tetris[char])):            Tetris[char][li][1] += 1    if num == 4:        for li in range(0, len(Tetris[char])):            Tetris[char][li][0] -= 1    if num == 6:        for li in range(0, len(Tetris[char])):            Tetris[char][li][0] += 1    if num == 8:        for li in range(0, len(Tetris[char])):            Tetris[char][li][1] -= 1def revolve(char):    newTetris = []  # 新的list    for i in range(len(Tetris[char])):        newTetris.append(rotateDict[tuple(Tetris[char][i])])   # 对应坐标添加到新的坐标    Tetris[char] = newTetris<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 字典 </tag>
            
            <tag> 列表 </tag>
            
            <tag> 元组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 历届试题 小朋友排队 Python</title>
      <link href="2021/04/15/%E8%93%9D%E6%A1%A5%E6%9D%AF%20%E5%8E%86%E5%B1%8A%E8%AF%95%E9%A2%98%20%E5%B0%8F%E6%9C%8B%E5%8F%8B%E6%8E%92%E9%98%9F%20python/"/>
      <url>2021/04/15/%E8%93%9D%E6%A1%A5%E6%9D%AF%20%E5%8E%86%E5%B1%8A%E8%AF%95%E9%A2%98%20%E5%B0%8F%E6%9C%8B%E5%8F%8B%E6%8E%92%E9%98%9F%20python/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯-历届试题-小朋友排队-Python"><a href="#蓝桥杯-历届试题-小朋友排队-Python" class="headerlink" title="蓝桥杯 历届试题 小朋友排队 Python"></a>蓝桥杯 历届试题 小朋友排队 Python</h2><p>问题描述<br>　　n 个小朋友站成一排。现在要把他们按身高从低到高的顺序排列，但是每次只能交换位置相邻的两个小朋友。</p><p>每个小朋友都有一个不高兴的程度。开始的时候，所有小朋友的不高兴程度都是0。</p><p>如果某个小朋友第一次被要求交换，则他的不高兴程度增加1，如果第二次要求他交换，则他的不高兴程度增加2（即不高兴程度为3），依次类推。当要求某个小朋友第k次交换时，他的不高兴程度增加k。</p><p>请问，要让所有小朋友按从低到高排队，他们的不高兴程度之和最小是多少。</p><p>如果有两个小朋友身高一样，则他们谁站在谁前面是没有关系的。<br>输入格式<br>　　输入的第一行包含一个整数n，表示小朋友的个数。<br>　　第二行包含 n 个整数 H1 H2 … Hn，分别表示每个小朋友的身高。<br>输出格式<br>　　输出一行，包含一个整数，表示小朋友的不高兴程度和的最小值。<br>样例输入<br>3<br>3 2 1<br>样例输出<br>9<br>样例说明<br>　　首先交换身高为3和2的小朋友，再交换身高为3和1的小朋友，再交换身高为2和1的小朋友，每个小朋友的不高兴程度都是3，总和为9。<br>数据规模和约定<br>　　对于10%的数据， 1&lt;=n&lt;=10；<br>　　对于30%的数据， 1&lt;=n&lt;=1000；<br>　　对于50%的数据， 1&lt;=n&lt;=10000；<br>　　对于100%的数据，1&lt;=n&lt;=100000，0&lt;=Hi&lt;=1000000。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>每一个小朋友最少的交换次数等于他左边比他高的人数加上右边比他矮的人数和。如果从左往右依次对每一个小朋友遍历，会超时，得分在20左右。<br>使用树状数组，先从左往右依次插入元素，每一次插入前查询比当前元素大的元素个数（即以当期前元素为后项的逆序对个数），作为左边比他大的元素个数；<br>再将树状数组清零，从右往左依次插入元素，每一次插入前查询比当前元素小的元素个数（即以当期前元素为前项的逆序对个数），作为右边比他小的元素个数，最后得到每一个元素最少的交换次数，进而求出总的不高兴程度。<br>但是为什么这段代码还是只得了70分，求大神解答。。。。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def discretization(h):#数组离散化    temp=list(set(h))    temp.sort()    for i in range(len(h)):        h[i]=temp.index(h[i])+1def lowbit(x):    return x&amp;-xdef insert(i):    while i&lt;len(C):        C[i]+=1        i+=lowbit(i)def sum_(i):#计算当前状态下i之前的元素总和(即当前状态下比i小的元素)    s=0    while(i&gt;0):        s+=C[i]        i-=lowbit(i)    return sn=int(input())H=list(map(int,input().split()))ans=[0 for _ in range(n)]#用于存储每个小朋友的最少交换次数res=0discretization(H)C=[0 for _ in range(len(set(H))+1)]#数状数组for i in range(n):#从最左端开始插入，计算比当前元素大的元素个数    ans[i]=i-sum_(H[i])    insert(H[i])C=[0 for _ in range(len(set(H))+1)]#数状数组清零for i in range(n-1,-1,-1):#从最右端开始插入，计算比当前元素小的元素个数    ans[i]+=sum_(H[i]-1)    insert(H[i])for i in range(n):    res+=int((1+ans[i])*ans[i]/2)print(res)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解js继承的六种方式</title>
      <link href="2021/04/10/%E7%90%86%E8%A7%A3js%E7%BB%A7%E6%89%BF%E7%9A%84%E5%85%AD%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>2021/04/10/%E7%90%86%E8%A7%A3js%E7%BB%A7%E6%89%BF%E7%9A%84%E5%85%AD%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><p><code>原型链继承是ECMAScript的主要继承方式。其基本思想就是通过原型继承多个引用类型的属性和方法。什么是原型链?每个构造函数都会有一个原型对象，调用构造函数创建的实例会有一个指针__proto__指向原型对象,这个原型可能是另一个类型的实例，所以内部可能也有一个指针指向另一个原型，然后就这样形成了一条原型链。</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">代码</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuperValue</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 继承SuperType</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSubValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//注意 不能通过对象字面量的方式添加新方法，否则上一行无效</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>缺点</code><br><code>1.如果父类实例的属性是引用类型的时候，其实父类的实例属性会成为子类的原型属性,子类创建的所有实例都会共享这些方法，修改一个实例的这个属性，其他实例的属性也会被修改</code><br><code>2.子类型在实例化时不能给父类型的构造函数传参</code></p><h2 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h2><p><code>为了解决原型包含引用值导致的继承问题，出现了一中’盗用构造函数’的技术流行起来，也被称为’对象伪装’或’经典继承’，思路就是在子类构造函 数中调用父类构造函数。可以使用call() apply()的方法以新创建的对象为上下文执行函数</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">)</span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token string">'小白'</span><span class="token punctuation">)</span>instance1<span class="token punctuation">.</span>colors <span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">)</span> <span class="token comment">//{name:"小明",colors:["red","blue","green","yellow"]...}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span> <span class="token comment">//{name:"小白",colors:["red","blue","green"]...}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>缺点:</code><br><code>1.只能在构造函数中调用方法 函数不能重用 就是每次子类生成实例的时候都会生成一次属性和方法</code><br><code>2. 子类无法访问到父类原型上的方法</code></p><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p><code>综合了原型链和构造函数，将两者的优点集中了起来。基本的思路是使用原型链继承原型上的属性和方法，而通过构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 继承属性 第二次调用</span><span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 继承方法  第一次调用</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["red,blue,green,black"]</span>instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Nicholas";</span>instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 29</span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["red,blue,green"]</span>instance2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Greg";</span>instance2<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 27</span><span class="token comment">//可以继承父类原型上的属性，可以传参，可复用。 每个新实例引入的构造函数属性是私有的 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>缺点</code><br><code>调用了两次父类构造函数 比较耗内存</code></p><h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><p><code>即使不自定义类型也可以通过原型实现对象之间的信息共享。</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span>  <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> person  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span><span class="token string">'小明'</span><span class="token punctuation">,</span>  colors<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>person1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>person1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">//['red','blue','green','yellow']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>适用环境: 你有一个对象，想在它的基础上再创建一个新对象。你需要把这个对象先传给object() ，然后再对返回的对象进行适当修改。类似于 Object.create()只传第一个参数的时候，本质上就是对传入的对象进行了一次浅复制,缺点就是新实例的属性都是后面添加的,无法复用</code></p><h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><p><code>与原型式继承比较接近的一种继承方式是寄生式继承，类似于寄生构造函数和工厂模式：创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象。</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span>  <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> person  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">let</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过调用函数创建一个新对象</span>clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 以某种方式增强这个对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> clone<span class="token punctuation">;</span> <span class="token comment">// 返回这个对象</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>寄生式继承同样适合主要关注对象，而不在乎类型和构造函数的场景。</code><br><code>缺点:通过寄生式继承给对象添加函数会导致函数难以重用，与构造函数模式类似</code></p><h2 id="寄生式组合继承"><a href="#寄生式组合继承" class="headerlink" title="寄生式组合继承"></a>寄生式组合继承</h2><p><code>最常用的继承方式，也是最佳的，组合继承会调用两次父类构造函数，存在效率问题。其实本质上子类原型最终是要包含父类对象的所有实例属性，子类构造函数只要在执行时重写自己的原型就行了。基本思路是不通过调用父类构造函数给子类原型赋值，而是取得父类原型的一个副本。说到底就是使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型。</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//核心代码</span><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> person  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">SubType<span class="token punctuation">,</span>SuperType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> prototype <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//生成一个父类原型的副本</span>  <span class="token comment">//重写这个实例的constructor</span>  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType  <span class="token comment">//将这个对象副本赋值给  子类的原型</span>  <span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//调用inheritPrototype函数给子类原型赋值,修复了组合继承的问题</span><span class="token function">inheritPrototype</span><span class="token punctuation">(</span>SubType<span class="token punctuation">,</span> SuperType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端复习总结HTML+CSS-超详细，超全面</title>
      <link href="2021/04/10/HTML5+CSS3%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>2021/04/10/HTML5+CSS3%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML5-CSS3复习总结"><a href="#HTML5-CSS3复习总结" class="headerlink" title="HTML5+CSS3复习总结"></a>HTML5+CSS3复习总结</h2><h2 id="一、HTML基础"><a href="#一、HTML基础" class="headerlink" title="一、HTML基础"></a>一、HTML基础</h2><h3 id="1-网页开发工具"><a href="#1-网页开发工具" class="headerlink" title="1.网页开发工具"></a>1.网页开发工具</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-lt-！DOCTYPE-gt-标签"><a href="#1-lt-！DOCTYPE-gt-标签" class="headerlink" title="(1)<！DOCTYPE >标签"></a>(1)&lt;！DOCTYPE &gt;标签</h4><ul><li>它是文档类型声明，作用就是告诉浏览器使用哪种HTML版本来显示网页。</li></ul><ul><li>声明位于文档中的最前面的位置，处于&lt; html&gt; 标签之前。</li></ul><ul><li>它不是一个HTML 标签，是文档类型声明标签。</li></ul><h4 id="2-lang语言"><a href="#2-lang语言" class="headerlink" title="(2)lang语言"></a>(2)lang语言</h4><ul><li>用来定义当前文档显示的语言。</li></ul><ul><li>en定义语言为英语 , zh-CN定义语言为中文</li></ul><ul><li>对于文档显示来说，定义成en的文档也可以显示中文，定义成zh-CN的文档也可以显示英文</li></ul><h4 id="3-charset-字符集"><a href="#3-charset-字符集" class="headerlink" title="(3)charset 字符集"></a>(3)charset 字符集</h4><ul><li>字符集(Character set)是多个字符的集合。以便计算机能够识别和存储各种文字。</li></ul><ul><li>上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用“UTF-8”编码。</li></ul><h3 id="2-常用基本标签"><a href="#2-常用基本标签" class="headerlink" title="2.常用基本标签"></a>2.常用基本标签</h3><h4 id="1-文本标签"><a href="#1-文本标签" class="headerlink" title="(1)文本标签"></a>(1)文本标签</h4><ul><li>标题<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>标题一共六级选,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>文字加粗一行显。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>由大到小依次减，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>从重到轻随之变。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">&gt;</span></span>语法规范书写后，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span>具体效果刷新见。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>对齐方式<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>三种对齐方式：left，center，right</code></p><ul><li>文本</li></ul><table><thead><tr><th>语义</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>加粗</td><td><code>&lt;strong&gt;&lt;/strong&gt;</code>或者<code>&lt;b&gt;&lt;/b&gt;</code></td><td>更推荐使用<code>&lt;strong&gt;</code>标签，语义更强烈</td></tr><tr><td>倾斜</td><td><code>&lt;em&gt;&lt;/em&gt;</code>或者<code>&lt;i&gt;&lt;/i&gt;</code></td><td>更推荐使用<code>&lt;em&gt;</code>标签，语义更强烈</td></tr><tr><td>删除线</td><td><code>&lt;del&gt;&lt;/del&gt;</code>或者<code>&lt;s&gt;&lt;/s&gt;</code></td><td>更推荐使用<code>&lt;del&gt;</code>标签，语义更强烈</td></tr><tr><td>下划线</td><td><code>&lt;ins&gt;&lt;/ins&gt;</code>或者<code>&lt;u&gt;&lt;/u&gt;</code></td><td>更推荐使用<code>&lt;ins&gt;</code>标签，语义更强烈</td></tr></tbody></table><ul><li>上标与下标</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>上标标记内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span>下标标记内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">&gt;</span></span>例：    x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>    2x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>段落、水平线</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>段落标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  //有较大空白缝隙<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>换行标签    //强制换行，单标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>           //水平线标记<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>div和span标签</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>     // 用来布局，但是现在一行只能放一个div。大盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  //用来布局，一行上可以多个span。小盒子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>图像标签和路径</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片的位置<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>图片路径</td><td>必须属性</td></tr><tr><td>alt</td><td>文本</td><td>替换文本，图片不能显示的文字</td></tr><tr><td>title</td><td>文本</td><td>提示文本鼠标放到图像上，显示文字</td></tr><tr><td>width</td><td>像素</td><td>设置图片的宽度</td></tr><tr><td>height</td><td>像素</td><td>设置图像的高度</td></tr><tr><td>border</td><td>像素</td><td>设置图片的边框粗细</td></tr></tbody></table><p><code>1.相对路径：以引用文件所在位置为参考基础，图片相对于HTML页面的位置</code><br><code>2.绝对路径：是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。</code></p><table><thead><tr><th>相对路径分类</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>同一级路径</td><td></td><td>图像文件位于HTML文件同一级 如<code>&lt;img src="baidu.gif"/&gt;</code></td></tr><tr><td>下一级路径</td><td>/</td><td>图像文件位于HTML文件下一级 如<code>&lt;img src="images/baidu.gif"/&gt;</code></td></tr><tr><td>上一级路径</td><td>../</td><td>图像文件位于HTML文件上一级 如<code>&lt;img src="../baidu.gif"/&gt;</code></td></tr></tbody></table><ul><li>超链接标签<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>跳转目标<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>目标窗口的弹出方式<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文本或图像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>用于指定链接目标的url地址，(必须属性)当为标签应用href属性时，它就具有了超链接的功能</td></tr><tr><td>target</td><td>用于指定链接页面的打开方式，其中_self为默认值，_blank为在新窗口中打开方式。</td></tr></tbody></table><ul><li>链接分类：</li></ul><ol><li>外部链接</li><li>内部链接</li><li>空链接:如果当时没有确定链接目标时，&lt; a href=”#”&gt; 首页&lt; /a &gt; 。</li><li>下载链接</li><li>网页元素链接: 在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接.</li><li>锚点链接: 点击链接,可以快速定位到页面中的某个位置。</li></ol><h4 id="2-表格标签"><a href="#2-表格标签" class="headerlink" title="(2)表格标签"></a>(2)表格标签</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>                             //是用于定义表格的标签        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                         //定义表格中的行，必须嵌套在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>标签中。        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                  // 表格的表头部分,加粗显示            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>单元格内的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>   // 定义表格中的单元格，必须嵌套在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>标签中。            ...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>表格结构标签</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">&gt;</span></span>：     //用于定义表格的头部。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span>：     //用于定义表格的主体。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>合并单元格<br><code>1. 跨行合并：rowspan=“合并单元格的个数”</code><br><code>2.跨列合并：colspan=“合并单元格的个数”</code></li></ul><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>align</td><td>left、center、right</td><td>规定表格相对周围元素的对齐方式</td></tr><tr><td>border</td><td>1或””</td><td>规定表格单元是否拥有边框，默认为””,表示没有边框</td></tr><tr><td>cellpadding</td><td>像素值</td><td>规定单元边沿与其内容之间的空白，默认1像素</td></tr><tr><td>cellspacing</td><td>像素值</td><td>规定单元格之间的空白，默认2像素</td></tr><tr><td>width</td><td>像素值或百分比</td><td>规定表格的宽度</td></tr></tbody></table><h4 id="3-列表标签"><a href="#3-列表标签" class="headerlink" title="(3)列表标签"></a>(3)列表标签</h4><ul><li><p>无序列表</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>//最常用，没有固定的顺序，默认有小圆点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>有序列表</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>//有先后顺序，默认有数字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义列表</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>名词1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>名词1解释1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>名词1解释2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">&gt;</span></span>//1. 一个名称对应一个值 2.一个名称对应多个值 3.多个名称对应一个值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-表单标签"><a href="#4-表单标签" class="headerlink" title="(4)表单标签"></a>(4)表单标签</h4><ul><li><p>表单的组成<br>提示信息,表单域,表单控件（表单元素)</p></li><li><p>表单域</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“url地址”</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“提交方式”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“表单域名称”</span><span class="token punctuation">&gt;</span></span>     各种表单元素控件 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url地址</td><td>用于指定接收并处理表单数据的服务器程序的url地址</td></tr><tr><td>method</td><td>get/post</td><td>用于设置表单数据的提交方式，其取值为get或post</td></tr><tr><td>name</td><td>名称</td><td>用于指定表单的名称，以区分同一个页面中的多个表单域</td></tr></tbody></table><p><code>1.在我们写表单元素之前,应该有个表单域把他们进行包含.</code><br><code>2.表单域是form标签.</code></p><ul><li>表单控件<br>（1.input表单元素2.select表单元素3.textarea元素<br>input 输入表单元素</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>button</td><td>定义可点击按钮（多数情况下，用于通过JavaScript启动脚本）</td></tr><tr><td>checkbox</td><td>定义复选框</td></tr><tr><td>file</td><td>定义输入字段和“浏览”按钮，供文件上传</td></tr><tr><td>hidden</td><td>定义隐藏的输入字段</td></tr><tr><td>image</td><td>定义图像形式的提交按钮</td></tr><tr><td>password</td><td>定义密码字段，该字段中的字符被掩码</td></tr><tr><td>radio</td><td>定义单选按钮</td></tr><tr><td>reset</td><td>定义重置按钮，重置按钮会清楚表单中的所有数据</td></tr><tr><td>submit</td><td>定义提交按钮，提交按钮会把表单数据发送到服务器</td></tr><tr><td>text</td><td>定义单行的输入字段，用户可在其中输入文本，默认宽度为20个字符</td></tr></tbody></table><p><code>1.刚打开页面就默认显示几个文字：可以给这些表单元素设置value 属性=“值”</code><br><code>2.一打开就让某个单选按钮或者复选框是选中状态：checked 属性：表示默认选中状态。 添加checked=“checked”</code><br><code>3.radio (或者checkbox）如果是一组，我们必须给他们命名相同的名字</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>女 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>1.&lt; label&gt; 标签</code><br><code>2.作用：点击区域内就可以选择</code><br><code>3.代码：&lt; label for = “id”&gt; &lt; /label&gt;</code></p><ul><li>select下拉表单元素<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>      ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><code>1.&lt; select&gt; 中至少包含一对&lt; option&gt;</code><br><code>2. 在 中定义selected =“selected " 时，当前项为默认选中项。</code></p><ul><li>textarea文本域元素<br>语法：<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    文本内容  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><code>1.通过 标签可以轻松地创建多行文本输入框</code><br><code>cols=“每行中的字符数”，rows=“显示的行数”，我们在实际开发中不会使用，都是用CSS 来改变大小。</code></p><p>简历案例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>个人信息注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>个人介绍 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入您的姓名<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>性别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nan<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nan<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/up.jpg<span class="token punctuation">"</span></span>                        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>男                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/down.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>女            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>出生日期：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>--请选择年份--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>2000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>2001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>2002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>2003<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>--请选择月份--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>--请选择日--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>籍贯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>重庆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>山西<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>山东<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>个人爱好：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>love<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>唱歌                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>love<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>画画                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>love<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>跳舞            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>求职原因<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>对公司的描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>手机号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重新填写<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>了解更多<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>关注公司<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>附件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">&gt;</span></span>选拔标准<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>态度认真<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>阳光开朗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>专业技能突出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-HTML5新增"><a href="#3-HTML5新增" class="headerlink" title="3.HTML5新增"></a>3.HTML5新增</h3><h4 id="1-HTML5新增的语义化标签"><a href="#1-HTML5新增的语义化标签" class="headerlink" title="(1)HTML5新增的语义化标签"></a>(1)HTML5新增的语义化标签</h4><ul><li>&lt; header&gt;：头部标签 </li><li>&lt; nav&gt;：导航标签</li><li>&lt; article&gt;：内容标签</li><li>&lt; section&gt;：定义文档某个区域</li><li>&lt; aside&gt;：侧边栏标签</li><li>&lt; footer&gt;：尾部</li></ul><h4 id="2-新增的多媒体标签"><a href="#2-新增的多媒体标签" class="headerlink" title="(2)新增的多媒体标签"></a>(2)新增的多媒体标签</h4><ul><li>音频：&lt; audio&gt;</li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>如果出现该属性，则音频在就绪后马上播放</td></tr><tr><td>controls</td><td>controls</td><td>如果出现该属性，则向用户显示控件，比如播放按钮</td></tr><tr><td>loop</td><td>loop</td><td>如果出现该属性，则每当音频结束时重新开始播放</td></tr><tr><td>src</td><td>url</td><td>要播放的音频的URL</td></tr></tbody></table><ul><li>视频：&lt; video&gt;</li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>如果出现该属性，则视频在就绪后自动播放，谷歌浏览器需要添加muted来解决自动播放问题</td></tr><tr><td>controls</td><td>controls</td><td>如果出现该属性，则向用户显示播放控件</td></tr><tr><td>loop</td><td>loop</td><td>如果出现该属性，循环播放</td></tr><tr><td>src</td><td>url</td><td>要播放的视频的URL</td></tr><tr><td>width</td><td>像素</td><td>设置播放器宽度</td></tr><tr><td>height</td><td>像素</td><td>设置播放器高度</td></tr><tr><td>preload</td><td>auto(预先加载视频)none(不应加载视频)</td><td>规定是否预加载视频（如果有了autoplay 就忽略该属性）</td></tr><tr><td>poster</td><td>imgurl</td><td>加载等待的画面图片</td></tr><tr><td>muted</td><td>muted</td><td>静音播放</td></tr></tbody></table><h4 id="3-新增的input类型"><a href="#3-新增的input类型" class="headerlink" title="(3)新增的input类型"></a>(3)新增的input类型</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>type=”email”</td><td>限制用户输入必须为Email类型</td></tr><tr><td>type=”url”</td><td>限制用户输入必须为URL类型</td></tr><tr><td>type=”date”</td><td>限制用户输入必须为日期类型</td></tr><tr><td>type=”time”</td><td>限制用户输入必须为时间类型</td></tr><tr><td>type=”month”</td><td>限制用户输入必须为月类型</td></tr><tr><td>type=”week”</td><td>限制用户输入必须为周类型</td></tr><tr><td>type=”number”</td><td>限制用户输入必须为数字类型</td></tr><tr><td>type=”tel”</td><td>手机号码</td></tr><tr><td>type=”search”</td><td>搜索框</td></tr><tr><td>type=”color”</td><td>生成一个颜色选择表单</td></tr></tbody></table><h4 id="4-新增的表单属性"><a href="#4-新增的表单属性" class="headerlink" title="(4)新增的表单属性"></a>(4)新增的表单属性</h4><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>表单拥有该属性表示其内容不能为空，必填</td></tr><tr><td>placeholder</td><td>提示文本</td><td>表单的提示信息，存在默认值将不显示</td></tr><tr><td>autofocus</td><td>autofocus</td><td>自动聚焦属性，页面加载完成自动聚焦到指定表单</td></tr><tr><td>autocomplete</td><td>off/on</td><td>当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示字段中填写的选项。默认已经打开，如autocomplete=”on”，关闭autocomplete=”off”需要放在表单内，同事加上name属性，同时成功提交</td></tr><tr><td>multiple</td><td>multiple</td><td>可以多选文件提交</td></tr></tbody></table><h2 id="二、CSS"><a href="#二、CSS" class="headerlink" title="二、CSS"></a>二、CSS</h2><h3 id="1-CSS选择器"><a href="#1-CSS选择器" class="headerlink" title="1.CSS选择器"></a>1.CSS选择器</h3><p><code>在CSS 中，可以根据选择器的类型把选择器分为基础选择器和复合选择器，复合选择器是建立在基础选择器之上，对基本选择器进行组合形成的。</code></p><h4 id="1-css基础选择器"><a href="#1-css基础选择器" class="headerlink" title="(1)css基础选择器"></a>(1)css基础选择器</h4><p>标签选择器、类选择器、id 选择器 、通配符选择器</p><ol><li><p>标签选择器</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">p {  属性：属性值;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>类选择器</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">.red {color: red;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>（1）结构需要用class属性来调用class 类 （2）可以在标签class 属性中写多个类名 （3）多个类名中间必须用空格分开</code></p></li><li><p>id选择器</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">#nav {color:red;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p><code> (1)HTML 元素以id 属性来设置id 选择器，CSS 中id 选择器以“#" 来定义。  (2)id 属性只能在每个HTML 文档中出现一次。</code></p><ol start="4"><li>通配符选择器<pre class="line-numbers language-html" data-language="html"><code class="language-html">* { margin: 0;padding: 0;} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><code>它表示选取页面中所有元素（标签）。</code></li></ol><table><thead><tr><th>基础选择器</th><th>作用</th><th>特点</th><th>使用情况</th><th>用法</th></tr></thead><tbody><tr><td>标签选择器</td><td>可以选出所有相同的标签</td><td>不能差异化选择</td><td>较多</td><td>p{};</td></tr><tr><td>类选择器</td><td>可以选出1个或多个标签</td><td>可以根据需求选择</td><td>非常多</td><td>.p{};</td></tr><tr><td>id选择器</td><td>一次只能选择1个标签</td><td>id属性只能在每个HTML文档出现一次</td><td>一般和js搭配</td><td>#nav{};</td></tr><tr><td>通配符选择器</td><td>选出所有的标签</td><td>选择的太多，有部分不需要</td><td>特殊情况使用</td><td>*{};</td></tr></tbody></table><h4 id="2-css复合选择器（引用选择器）"><a href="#2-css复合选择器（引用选择器）" class="headerlink" title="(2)css复合选择器（引用选择器）"></a>(2)css复合选择器（引用选择器）</h4><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择后代元素</td><td>可以使子孙后代</td><td>较多</td><td>符号是空格.nav a</td></tr><tr><td>子代选择器</td><td>选择最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是大于.nav&gt;p</td></tr><tr><td>并集选择器</td><td>选择某些相同样式的元素</td><td>可以用于集体声明</td><td>较多</td><td>符号是逗号.nav,.header</td></tr><tr><td>链接伪类选择器</td><td>选择不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>重点记住a{}和a:hover实际开发的写法</td></tr><tr><td>:focus选择器</td><td>选择获得光标的表单</td><td>跟表单相关</td><td>较少</td><td>input:focus 记住这个写法</td></tr></tbody></table><p>注意：<br><code>链接伪类选择器按照LVHA的循顺序声明:link－:visited－:hover－:active。记忆法：love hate 或者lv 包包hao。</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">a:link           /*选择所有未被访问的链接*/a:visited        /*选择所有已被访问的链接*/a:hover          /*选择鼠标指针位于其上的链接*/a:active         /*选择活动链接（鼠标按下未弹起的链接）*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-CSS字体属性"><a href="#2-CSS字体属性" class="headerlink" title="2.CSS字体属性"></a>2.CSS字体属性</h3><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td>font-size</td><td>字号</td><td>我们通常用的单位是px像素，一定要跟上单位</td></tr><tr><td>font-family</td><td>字体</td><td>实际工作中按照团队约定来写字体</td></tr><tr><td>font-weight</td><td>字体粗细</td><td>记住加粗是700或者bold不加粗是normal或者400记住数字不要跟单位</td></tr><tr><td>font-style</td><td>字体样式</td><td>记住倾斜是italic  不倾斜是normal 工作中我们最常用的是normal</td></tr><tr><td>font</td><td>字体连写</td><td>1.字体连写是有顺序的 不能随意换位置2.其中字号和字体必须同时出现</td></tr></tbody></table><h3 id="3-CSS文本属性"><a href="#3-CSS文本属性" class="headerlink" title="3.CSS文本属性"></a>3.CSS文本属性</h3><ul><li>(1)文本颜色<pre class="line-numbers language-html" data-language="html"><code class="language-html">div { color：red; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><table><thead><tr><th>表示</th><th>属性值</th></tr></thead><tbody><tr><td>预定义的颜色值</td><td>red,green,blue,还有我们的御用色pink</td></tr><tr><td>十六进制</td><td>#FF0000,#FF6600,#29D794</td></tr><tr><td>RGB代码</td><td>rgb(255,0,0)或rgb(100%,0%,0%)</td></tr></tbody></table><ul><li>(2)装饰文本<pre class="line-numbers language-html" data-language="html"><code class="language-html">div { text-decoration：underline；}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。没有装饰线（最常用）</td></tr><tr><td>underline</td><td>下划线。链接a自带下划线（常用）</td></tr><tr><td>overline</td><td>上划线。（几乎不用）</td></tr><tr><td>line-through</td><td>删除线。（不常用）</td></tr></tbody></table><ul><li>(3)文本缩进<br>首行缩进:<pre class="line-numbers language-html" data-language="html"><code class="language-html">div { text-indent: 10px;}p { text-indent: 2em;}1.px像素相对长度单位。像素px是相对于显示器屏幕分辨率而言的。2.em是一个相对单位，就是当前元素1个文字的大小, <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>(4)行间距</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">p { line-height: 26px;}控制行高<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>(5)对齐方式</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">div { text-align: center;  居中 }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认值）</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><h3 id="4-CSS的引入方式"><a href="#4-CSS的引入方式" class="headerlink" title="4.CSS的引入方式"></a>4.CSS的引入方式</h3><ul><li><p>（1）内部样式表（嵌入式）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">   <span class="token selector">div</span> <span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>     <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>（2）行内样式表（行内式）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>元宝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>（3）外部样式表（链接式）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css文件路径<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便，权重高</td><td>结构样式混乱</td><td>较少</td><td>控制一个标签</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多，推荐</td><td>控制多个页面</td></tr></tbody></table><h3 id="5-CSS元素显示模式"><a href="#5-CSS元素显示模式" class="headerlink" title="5.CSS元素显示模式"></a>5.CSS元素显示模式</h3><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或则其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度和高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><p><code>转换为块元素：display:block;</code><br><code>转换为行内元素：display:inline;</code><br><code>转换为行内块：display: inline-block;</code></p><h3 id="6-CSS背景"><a href="#6-CSS背景" class="headerlink" title="6.CSS背景"></a>6.CSS背景</h3><ul><li>（1）背景颜色</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">background-color:颜色值; background-color:transparent; //透明色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>（2）背景图片</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">background-image : none；                    //无背景background-image : url（../images/1.jpg);  //图片地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>（3）背景平铺</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">background-repeat: repeat | no-repeat | repeat-x | repeat-y;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>repeat</td><td>背景图像在纵向和横向上平铺（默认的）</td></tr><tr><td>no-repeat</td><td>背景图像不平铺</td></tr><tr><td>repeat-x</td><td>背景图像在横向上平铺</td></tr><tr><td>repeat-y</td><td>背景图像在纵向上平铺</td></tr></tbody></table><ul><li>(4)背景图片位置 <pre class="line-numbers language-html" data-language="html"><code class="language-html">background-position:x  y;   //参数代表的意思是：x 坐标和y 坐标。可以使用方位名词或者精确单位<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>百分数、有浮点数字和单位标识符组成的长度值</td></tr><tr><td>position</td><td>top、center、bottom、left、right方位名词</td></tr></tbody></table><ul><li>(5)背景图像固定（背景附着）<pre class="line-numbers language-html" data-language="html"><code class="language-html">background-attachment :scroll;   //随对象内容滚动background-attachment :fixed;    //图像固定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>+（6）背景图像复合写法<br><code>background: -背景颜色 -背景图片地址 -背景平铺 -背景图像滚动 -背景图片位置;</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">background: transparent url(image.jpg) repeat-y  fixed  top ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>+（7）背景颜色半透明 </p><pre class="line-numbers language-html" data-language="html"><code class="language-html">background: rgba(0, 0, 0,.3);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>最后一个参数是alpha 透明度，取值范围在0~1之间。</code></p><table><thead><tr><th>属性</th><th>作用</th><th>值</th></tr></thead><tbody><tr><td>background-color</td><td>背景图片</td><td>预定义的颜色/十六进制/RGB代码</td></tr><tr><td>background-image</td><td>背景图片</td><td>url(图片路径)</td></tr><tr><td>background-repeat</td><td>是否平铺</td><td>repeat/no-repeat/repeat-x/repeat-y</td></tr><tr><td>background-position</td><td>背景位置</td><td>length/position 分别是x和y坐标</td></tr><tr><td>background-attachment</td><td>背景附着</td><td>scroll(背景滚动)/fixed(背景固定)</td></tr><tr><td>背景简写</td><td>书写更简单</td><td>背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td></tr><tr><td>背景色半透明</td><td>背景颜色半透明</td><td>background:rgba(0,0,0,0.3); 后面必须4个值</td></tr></tbody></table><h3 id="7-CSS三大特性"><a href="#7-CSS三大特性" class="headerlink" title="7.CSS三大特性"></a>7.CSS三大特性</h3><ul><li><p>（1）层叠性<br><code>样式冲突，遵循就近原则</code></p></li><li><p>（2）继承性<br><code>行高可以跟单位也可以不跟单位</code><br><code>没有手动指定文字大小，则会继承父亲的文字大小</code></p></li><li><p>（3）优先级</p></li></ul><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承 或者 *</td><td>0，0，0，0</td></tr><tr><td>元素选择器</td><td>0，0，0，1w</td></tr><tr><td>类选择器，伪类选择器</td><td>0，0，1，0</td></tr><tr><td>ID选择器</td><td>0，1，0，0</td></tr><tr><td>行内样式style=””</td><td>1，0，0，0</td></tr><tr><td>！important 重要的</td><td>无穷大</td></tr></tbody></table><h3 id="8-页面布局"><a href="#8-页面布局" class="headerlink" title="8.页面布局"></a>8.页面布局</h3><h4 id="1-盒子模型"><a href="#1-盒子模型" class="headerlink" title="(1)盒子模型"></a>(1)盒子模型</h4><p><code>CSS 盒子模型本质上是一个盒子，封装周围的HTML 元素，它包括：边框、外边距、内边距、和实际内容。</code></p><ul><li>边框<br>border可以设置元素的边框。边框有三部分组成：边框宽度（粗细）边框样式 边框颜色</li></ul><p>语法：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">border : border-width || border-style || border-color<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>定义边框粗细，单位是px</td></tr><tr><td>border-style</td><td>边框的样式</td></tr><tr><td>border-color</td><td>边框颜色</td></tr></tbody></table><pre class="line-numbers language-html" data-language="html"><code class="language-html">border-style:solid;         //实线border-style:dashed;        //虚线border-style:dotted;        //点线<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>内边距<br><code>padding属性用于设置内边距，即边框与内容之间的距离。</code></li></ul><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>padding-left</td><td>左内边距</td></tr><tr><td>padding-right</td><td>右内边距</td></tr><tr><td>padding-top</td><td>上内边距</td></tr><tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table><p>padding属性（简写属性）可以有一到四个值。</p><table><thead><tr><th>值得个数</th><th>表达意思</th></tr></thead><tbody><tr><td>padding：5px;</td><td>1个值，代表上下左右都有5像素内边距</td></tr><tr><td>padding:5px 10px;</td><td>2个值，代表上下内边距是5像素 左右内边距是10像素</td></tr><tr><td>padding:5px 10px 20px;</td><td>3个值，代表上内边距5像素 左右内边距10像素 下内边距20像素</td></tr><tr><td>padding:5px 10px 20px 30;</td><td>4个值，上是5像素 有10像素 下20像素 做30像素 顺时针</td></tr></tbody></table><ul><li>外边距<br><code>margin属性用于设置外边距，即控制盒子和盒子之间的距离。</code></li></ul><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td></tr><tr><td>margin-right</td><td>右外边距</td></tr><tr><td>margin-top</td><td>上外边距</td></tr><tr><td>margin-bottom</td><td>下外边距</td></tr></tbody></table><p><code>外边距可以让块级盒子水平居中，但是必须满足两个条件：</code><br><code>①盒子必须指定了宽度（width）。</code><br><code>②盒子左右的外边距都设置为auto 。margin: 0 auto;</code><br><code>注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加text-align:center 。</code></p><ul><li>圆角边框<pre class="line-numbers language-html" data-language="html"><code class="language-html">border-radius:length;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><code>参数值可以为数值或百分比的形式。</code><br><code>分开写为：border-top-left-radius（左上角）、border-top-right-radius（右上角）、border-bottom-right-radius（右下角） 和border-bottom-left-radius(左下角)</code></p><ul><li>盒子阴影</li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置。允许负值</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置。允许负值</td></tr><tr><td>blur</td><td>可选。模糊距离</td></tr><tr><td>spread</td><td>可选。阴影的尺寸</td></tr><tr><td>color</td><td>可选。阴影的颜色。请参阅CSS颜色值</td></tr><tr><td>inset</td><td>可选。将外部阴影（outset）改为内部阴影</td></tr></tbody></table><ul><li>文字阴影</li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置。允许负值</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置。允许负值</td></tr><tr><td>blur</td><td>可选。模糊的距离</td></tr><tr><td>color</td><td>可选。阴影的颜色。请参阅CSS颜色值</td></tr></tbody></table><h4 id="2-浮动"><a href="#2-浮动" class="headerlink" title="(2)浮动"></a>(2)浮动</h4><p>为什么需要清除浮动？<br><code>①父级没高度。②子盒子浮动了。③影响下面布局了。</code></p><table><thead><tr><th>清楚浮动的方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>额外标签法（隔墙法）</td><td>通俗易懂，书写方便</td><td>添加许多无意义的标签，结构化较差</td></tr><tr><td>父级overflow:hidden;</td><td>书写简单</td><td>溢出隐藏</td></tr><tr><td>父级after伪元素</td><td>结构语义化正确</td><td>由于IE6-7不支持：after,兼容性问题</td></tr><tr><td>父级双伪元素</td><td>结构语义化正确</td><td>由于IE6-7不支持：after,兼容性问题</td></tr></tbody></table><h4 id="3-定位"><a href="#3-定位" class="headerlink" title="(3)定位"></a>(3)定位</h4><ul><li>总结</li></ul><table><thead><tr><th>定位模式</th><th>是否脱标</th><th>移动位置</th><th>是否常用</th></tr></thead><tbody><tr><td>static静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td>relative相对定位</td><td>否（占有位置）</td><td>相对于自身位置移动</td><td>常用</td></tr><tr><td>absolute绝对定位</td><td>是（不占有位置）</td><td>带有定位的父级</td><td>常用</td></tr><tr><td>fixed固定定位</td><td>是（不占有位置）</td><td>浏览器可视区</td><td>常用</td></tr><tr><td>sticky粘性定位</td><td>否（占有位置）</td><td>浏览器可视区</td><td>当前阶段少</td></tr></tbody></table><ul><li>定位叠放次序<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器{ z-index: 1; }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><code>1.如果属性值相同，则按照书写顺序，后来居上。</code><br><code>2.数字后面不能加单位</code><br><code>3.只有定位的盒子才有z-index 属性</code></li></ul><ul><li>元素的显示与隐藏</li></ul><p>1.display 属性<br><code>display: none ；隐藏对象</code><br><code>display：block ；除了转换为块级元素之外，同时还有显示元素的意思。</code><br><code>隐藏元素后，不占有原来的位置。</code></p><p>2.visibility 可见性<br><code>visibility：visible ; 元素可视</code><br><code>visibility：hidden; 元素隐藏</code><br><code>隐藏元素后，继续占有原来的位置。</code></p><p>3.overflow 溢出显示隐藏</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>不剪切内容也不添加滚动条</td></tr><tr><td>hidden</td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td>scroll</td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td>auto</td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><h3 id="9-CSS用户界面样式"><a href="#9-CSS用户界面样式" class="headerlink" title="9.CSS用户界面样式"></a>9.CSS用户界面样式</h3><ul><li>（1）鼠标样式cursor</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">li {cursor: pointer; }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>default</td><td>小白 默认</td></tr><tr><td>pointer</td><td>小手</td></tr><tr><td>move</td><td>移动</td></tr><tr><td>text</td><td>文本</td></tr><tr><td>not-allowed</td><td>禁止</td></tr></tbody></table><ul><li>（2）轮廓线outline</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">input {outline: none; }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>给表单添加outline: 0; 或者outline: none; 样式之后，就可以去掉默认的蓝色边框。</code></p><ul><li>（3）防止拖拽文本域resize</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">textarea{ resize: none;}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-vertical-align-属性应用"><a href="#10-vertical-align-属性应用" class="headerlink" title="10.vertical-align 属性应用"></a>10.vertical-align 属性应用</h3><p><code>vertical-align 属性经常用于设置图片或者表单(行内块元素）和文字垂直对齐。</code><br><code>官方解释：用于设置一个元素的垂直对齐方式，但是它只针对于行内元素或者行内块元素有效。</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">vertical-align : baseline | top | middle | bottom ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td>默认。元素放置在父元素的基线上</td></tr><tr><td>top</td><td>把元素的顶端与行中最高元素的顶端对齐</td></tr><tr><td>middle</td><td>把此元素放置在父元素的中部</td></tr><tr><td>bottom</td><td>把元素的顶端与行中最低的元素的顶端对齐</td></tr></tbody></table><p><code>vertical-align 属性设置为middle 就可以让文字和图片垂直居中对齐了。</code></p><h3 id="11-溢出的文字省略号显示"><a href="#11-溢出的文字省略号显示" class="headerlink" title="11.溢出的文字省略号显示"></a>11.溢出的文字省略号显示</h3><p><code>(1). 先强制一行内显示文本*/white-space: nowrap; （默认normal 自动换行）</code><br><code>(2). 超出的部分隐藏overflow: hidden;</code><br><code>(3). 文字用省略号替代超出的部分text-overflow: ellipsis;</code></p><h3 id="12-CSS3-的新特性"><a href="#12-CSS3-的新特性" class="headerlink" title="12.CSS3 的新特性"></a>12.CSS3 的新特性</h3><h4 id="1-属性选择器"><a href="#1-属性选择器" class="headerlink" title="(1)属性选择器"></a>(1)属性选择器</h4><p><code>属性选择器可以根据元素特定属性的来选择元素。这样就可以不用借助于类或者id选择器。</code></p><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E[att]</td><td>选择具有att属性的E元素</td></tr><tr><td>E[att=”val”]</td><td>选择具有att属性且属性值等于val的E元素</td></tr><tr><td>E[att^=”val”]</td><td>匹配具有att属性且值以val开头的E元素</td></tr><tr><td>E[att$=”val”]</td><td>匹配具有att属性且值以val结尾的E元素</td></tr><tr><td>E[att*=”val”]</td><td>匹配具有att属性且值中含有val的E元素</td></tr></tbody></table><h4 id="2-结构伪类选择器"><a href="#2-结构伪类选择器" class="headerlink" title="(2)结构伪类选择器"></a>(2)结构伪类选择器</h4><p><code>结构伪类选择器主要根据文档结构来选择器元素，常用于根据父级选择器里面的子元素</code></p><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配父元素中的第一个子元素E</td></tr><tr><td>E:last-child</td><td>匹配父元素中最后一个E元素</td></tr><tr><td>E:nth-child(n)</td><td>匹配父元素中的第n个子元素E</td></tr><tr><td>E:first-of-type</td><td>指定类型E的第一个</td></tr><tr><td>E:last-of-type</td><td>指定类型E的最后一个</td></tr><tr><td>E:nth-of-type(n)</td><td>指定类型E的第n个</td></tr></tbody></table><p><code>nth-child（n）选择某个父元素的一个或多个特定的子元素（重点）</code><br><code>n 可以是数字，关键字和公式</code></p><h4 id="3-伪元素选择器"><a href="#3-伪元素选择器" class="headerlink" title="(3)伪元素选择器"></a>(3)伪元素选择器</h4><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>::before</td><td>在元素内部的前面插入内容</td></tr><tr><td>::after</td><td>在元素内部的后面插入内容</td></tr></tbody></table><h4 id="4-2D转换"><a href="#4-2D转换" class="headerlink" title="(4)2D转换"></a>(4)2D转换</h4><p>移动：translate</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">transform: translate(x,y);       //沿着X 和Y 轴移动元素 transform: translateX(n);          transform: translateY(n);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>translate最大的优点：不会影响到其他元素的位置</code><br><code>translate中的百分比单位是相对于自身元素的translate:(50%,50%);</code><br><code>对行内标签没有效果</code></p><p>旋转：rotate</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">transform:rotate(度数);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>rotate里面跟度数，单位是deg 比如rotate(45deg)</code><br><code>角度为正时，顺时针，负时，为逆时针</code><br><code>默认旋转的中心点是元素的中心点</code></p><p>缩放：scale</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">transform:scale(x,y);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>默认以中心点缩放的，而且不影响其他盒子</code></p><p>2D 转换中心点</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">transform-origin: x y;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-动画"><a href="#5-动画" class="headerlink" title="(5)动画"></a>(5)动画</h4><p>动画的基本使用<br>-用keyframes 定义动画</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">@keyframes 动画名称{   0%{        width:100px;     }       100%{        width:200px;       } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>再使用（调用）动画</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">div {       width: 200px;      height: 200px;        background-color:blue;         /*调用动画*/       animation-name: 动画名称;         /*持续时间*/      animation-duration: 持续时间;      }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动画常用属性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>@keyframes</td><td>规定动画</td></tr><tr><td>animation</td><td>所有动画属性的简写属性，除了 animation-play-state 属性。</td></tr><tr><td>animation-name</td><td>规定 @keyframes 动画的名称。</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线。默认是 “ease”。</td></tr><tr><td>animation-delay</td><td>规定动画何时开始。默认是 0。</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数。默认是 1。</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向地播放。默认是 “normal”，alternate逆播放</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。默认是 “running”。</td></tr><tr><td>animation-fill-mode</td><td>规定当动画结束后状态，保持forwards回到起始backwards</td></tr></tbody></table><p>动画简写属性</p><p><code>animation：动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态;</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">animation: myfirst 5s linear 2s infinite alternate;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>速度曲线细节</p><p><code>animation-timing-function：规定动画的速度曲线，默认是“ease”</code></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>linear</td><td>动画从头到尾的速度是相同的。</td></tr><tr><td>ease</td><td>默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td>ease-in</td><td>动画以低速开始。</td></tr><tr><td>ease-out</td><td>动画以低速结束。</td></tr><tr><td>ease-in-out</td><td>动画以低速开始和结束。</td></tr><tr><td>steps()</td><td>指定了时间函数中的间隔数量（步长）</td></tr></tbody></table><h4 id="6-3D转换"><a href="#6-3D转换" class="headerlink" title="(6)3D转换"></a>(6)3D转换</h4><p>3D位移: translate3d(x,y,z)</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">translform:translateX(100px);    //在x轴上移动,水平向右translform:translateY(100px);    //在Y轴上移动,垂直向下translform:translateZ(100px);    //在Z轴上移动,垂直屏幕transform:translate3d(x,y,z);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>透视: perspective<br>透视写到被观察元素的父盒子上面</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">perspective：500px;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3D呈现 transfrom-style</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">transform-style :flat;          //默认值，子元素将不保留其 3D 位置。transform-style :preserve-3d;   //子元素将保留其 3D 位置,在父级元素定义，但是影响的是子元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3D转换方法</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)</td><td>定义 3D 转换，使用 16 个值的 4x4 矩阵。</td></tr><tr><td>translate3d(x,y,z)</td><td>定义 3D 转化。</td></tr><tr><td>translateX(x)</td><td>定义 3D 转化，仅使用用于 X 轴的值。</td></tr><tr><td>translateY(y)</td><td>定义 3D 转化，仅使用用于 Y 轴的值。</td></tr><tr><td>translateZ(z)</td><td>定义 3D 转化，仅使用用于 Z 轴的值。</td></tr><tr><td>scale3d(x,y,z)</td><td>定义 3D 缩放转换。</td></tr><tr><td>scaleX(x)</td><td>定义 3D 缩放转换，通过给定一个 X 轴的值。</td></tr><tr><td>scaleY(y)</td><td>定义 3D 缩放转换，通过给定一个 Y 轴的值。</td></tr><tr><td>scaleZ(z)</td><td>定义 3D 缩放转换，通过给定一个 Z 轴的值。</td></tr><tr><td>rotate3d(x,y,z,angle)</td><td>定义 3D 旋转。</td></tr><tr><td>rotateX(angle)</td><td>定义沿 X 轴的 3D 旋转。</td></tr><tr><td>rotateY(angle)</td><td>定义沿 Y 轴的 3D 旋转。</td></tr><tr><td>rotateZ(angle)</td><td>定义沿 Z 轴的 3D 旋转。</td></tr><tr><td>perspective(n)</td><td>定义 3D 转换元素的透视视图。</td></tr></tbody></table><h4 id="7-浏览器私有前缀"><a href="#7-浏览器私有前缀" class="headerlink" title="(7)浏览器私有前缀"></a>(7)浏览器私有前缀</h4><table><thead><tr><th>内核</th><th>私有前缀</th><th>应用浏览器</th></tr></thead><tbody><tr><td>Gecko内核</td><td>前缀为 -moz-</td><td>火狐浏览器</td></tr><tr><td>Webkit内核(谷歌内核)</td><td>前缀为 -webkit-</td><td>chrome浏览器、safari浏览器、360极速、猎豹、世界之窗</td></tr><tr><td>Trident内核</td><td>前缀为 -ms-</td><td>IE浏览器</td></tr><tr><td>Presto内核</td><td>前缀 -o-</td><td>opera浏览器</td></tr></tbody></table><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
