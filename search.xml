<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android学习笔记——Galley</title>
      <link href="2021/04/21/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Galley/"/>
      <url>2021/04/21/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Galley/</url>
      
        <content type="html"><![CDATA[<p>Gallery==&gt;画廊视图</p><p>Gallery和Spinnery父类相同——AbsSpinner,表明Garrey和Spinner都是一个列表框。</p><p>两者之间的区别是：Spinner显示的是一个垂直列表框，Gallery显示的是一个水平列表框；</p><p>　　　　　　　　   Spinner的作用是供用户选择，而Gallery则允许用户通过拖动来查看上一个、下一个列表项。</p><p>Garrey常用XML属性：</p><table><thead><tr><th>android:animationDuration</th><th>setAnimationDuration(int)</th><th>设置列表项切换时的动画帧持续时间</th></tr></thead><tbody><tr><td>android:gravity</td><td>setGravity(int)</td><td>设置对其方式</td></tr><tr><td>android:spacing</td><td>setSpacing(int)</td><td>设置Gallery内列表项之间的间距</td></tr><tr><td>android: unselectedAlpha</td><td>setUnselectedAlpha(float)</td><td>设置没有选中的列表项的透明度</td></tr></tbody></table><p>注意:</p><p>Gallery用法类似Spinner，使用Adapter提供数据源，Adapter的getView()所返回的View将作为Gallery列表的列表项；</p><p>通过OnItemSelectedListener监听器监听选择项的改变。</p><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">布局文件==》<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageSwitcher</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/switcher<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>320dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>320dp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Gallery</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/gallery<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>spacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3pt<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>unselectedAlpha</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.6<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">代码实现==》package com.example.mygrallery; import android.os.Bundle;import android.annotation.SuppressLint;import android.app.Activity;import android.app.ActionBar.LayoutParams;import android.content.res.TypedArray;import android.view.Menu;import android.view.View;import android.view.ViewGroup;import android.view.animation.AnimationUtils;import android.widget.AdapterView;import android.widget.AdapterView.OnItemSelectedListener;import android.widget.BaseAdapter;import android.widget.Gallery;import android.widget.ImageSwitcher;import android.widget.ImageView;import android.widget.ViewSwitcher.ViewFactory; @SuppressWarnings("deprecation")@SuppressLint("InlinedApi")public class MainActivity extends Activity{private int[] ImageIds = new int[]{ R.drawable.one, R.drawable.tw, R.drawable.th, R.drawable.eight, R.drawable.ele,R.drawable.five, R.drawable.four, R.drawable.nice, R.drawable.seven, R.drawable.six,R.drawable.sl, R.drawable.ss, R.drawable.sw, R.drawable.ten, R.drawable.tw,R.drawable.oneowne }; @Overrideprotected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_main); final ImageSwitcher switcher = (ImageSwitcher) this.findViewById(R.id.switcher);final Gallery gallery = (Gallery) this.findViewById(R.id.gallery); switcher.setFactory(new ViewFactory(){@Overridepublic View makeView(){ImageView img = new ImageView(MainActivity.this);img.setBackgroundColor(0xff0000);img.setScaleType(ImageView.ScaleType.FIT_CENTER);img.setLayoutParams(new ImageSwitcher.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));return img;}});// 设置图片更换的动画效果switcher.setInAnimation(AnimationUtils.loadAnimation(this, android.R.anim.fade_in));switcher.setOutAnimation(AnimationUtils.loadAnimation(this, android.R.anim.fade_out));// 创建DataAdapter对象,为gallery提供数据BaseAdapter adapter = new BaseAdapter(){@Overridepublic int getCount(){// TODO Auto-generated method stubreturn ImageIds.length;} @Overridepublic Object getItem(int position){// TODO Auto-generated method stubreturn position;} @Overridepublic long getItemId(int position){// TODO Auto-generated method stubreturn position;} @Overridepublic View getView(int position, View convertView, ViewGroup parent){ImageView img = new ImageView(MainActivity.this);img.setImageResource(ImageIds[position % ImageIds.length]);// 设置ImageView的缩放类型img.setScaleType(ImageView.ScaleType.FIT_XY);img.setLayoutParams(new Gallery.LayoutParams(75, 110));// TypedArray arr= obtainStyledAttributes(R.)// img.setBackgroundResource(resid); return img;}}; gallery.setAdapter(adapter);gallery.setOnItemSelectedListener(new OnItemSelectedListener(){@Overridepublic void onItemSelected(AdapterView&lt;?&gt; parent, View view, int position, long id){// TODO Auto-generated method stubswitcher.setImageResource(ImageIds[position % ImageIds.length]);} @Overridepublic void onNothingSelected(AdapterView&lt;?&gt; parent){// TODO Auto-generated method stub}});} @Overridepublic boolean onCreateOptionsMenu(Menu menu){// Inflate the menu; this adds items to the action bar if it is present.getMenuInflater().inflate(R.menu.main, menu);return true;} }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现效果："><a href="#实现效果：" class="headerlink" title="实现效果："></a>实现效果：</h2><p><a href="https://imgtu.com/i/cq9o6g"><img src="https://z3.ax1x.com/2021/04/21/cq9o6g.jpg" alt="cq9o6g.jpg"></a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> 移动开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android学习笔记——Spinner</title>
      <link href="2021/04/21/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Spinner/"/>
      <url>2021/04/21/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Spinner/</url>
      
        <content type="html"><![CDATA[<h2 id="Spinner的功能与用法"><a href="#Spinner的功能与用法" class="headerlink" title="Spinner的功能与用法"></a>Spinner的功能与用法</h2><p>Spinner支持的常用XML属性及相关方法：</p><table><thead><tr><th>XML属性</th><th>相关方法</th><th>说明</th></tr></thead><tbody><tr><td>android:entries</td><td></td><td>使用数组资源设置该下拉列表框的列表项</td></tr><tr><td>android:dropDownHorizontalOffset</td><td>setDropDownHorizontalOffset(int)</td><td>设置列表选择框的水平偏移距</td></tr><tr><td>android:dropDownVerticalOffset</td><td>setDropDownVerticalOffset(int)</td><td>设置列表选择框的垂直偏移距</td></tr><tr><td>android:dropDownWidth</td><td>setDropDownWidth(int)</td><td>设置列表选择框的宽度</td></tr><tr><td>android:popupBackground</td><td>android:popupBackground</td><td>设置列表选择框的背景色</td></tr><tr><td>android:prompt</td><td></td><td>设置列表选择框的提示信息</td></tr></tbody></table><p>实例：让用户选择<br>程序清单：实例：让用户选择<br>程序清单：</p><h3 id="layout-main-xml"><a href="#layout-main-xml" class="headerlink" title="\layout\main.xml"></a>\layout\main.xml</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Spinner</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>entries</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@array/books<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>prompt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/tip<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Spinner</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/spinner<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>prompt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/tip<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="values-arrays-xml"><a href="#values-arrays-xml" class="headerlink" title="\values\arrays.xml"></a>\values\arrays.xml</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string-array</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>西游记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>水浒传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>简爱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>巴黎圣母院<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>红与黑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>羊脂球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>老人与海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>追风筝的人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>嫌疑人X的献身<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>呼啸山庄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>狂人日记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>朝花夕拾<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string-array</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">import android.app.Activity;import android.os.Bundle;import android.widget.ArrayAdapter;import android.widget.Spinner;import androidx.annotation.Nullable;public class MainActivity extends Activity {    Spinner spinner;    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.main);        spinner = (Spinner) findViewById(R.id.spinner);        String[] arr = {"鲁迅", "曹雪芹", "莫泊桑","施耐庵","维克多·雨果"};        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_list_item_multiple_choice, arr);        spinner.setAdapter(adapter);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> 移动开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS实现简单网页计算器</title>
      <link href="2021/04/19/JS%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%BD%91%E9%A1%B5%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>2021/04/19/JS%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%BD%91%E9%A1%B5%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>js实现简易计算器。计算器的布局不像表格那么公正对称，所以布局这块相对比较繁琐，但是也可以通过这来练习一下CSS。</p><h2 id="一、实现功能"><a href="#一、实现功能" class="headerlink" title="一、实现功能"></a>一、实现功能</h2><ul><li>完成计算器的加减乘除的基本计算功能</li><li>实现输入框中的字符串拼接</li></ul><h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><ul><li>完成基本布局</li><li>js实现运算功能</li></ul><h2 id="三、知识点"><a href="#三、知识点" class="headerlink" title="三、知识点"></a>三、知识点</h2><p>e.target||e.srcElement ：获取触发事件的元素</p><h2 id="四、具体代码实现"><a href="#四、具体代码实现" class="headerlink" title="四、具体代码实现"></a>四、具体代码实现</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>计算器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span> <span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">h1</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">button</span><span class="token punctuation">{</span><span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 65px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 45px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>182<span class="token punctuation">,</span> 93%<span class="token punctuation">,</span> 45%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> 3px 3px 5px #ccc<span class="token punctuation">;</span><span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">input</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#main</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 287px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span>2px solid #ccc<span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../imges/4.jpg'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.num</span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">}</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>计算器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cal(event);<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">readonly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>readonly<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取触发事件的元素</span><span class="token keyword">var</span> obj <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token operator">||</span>e<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>nodeName <span class="token operator">!=</span> <span class="token string">"BUTTON"</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> v <span class="token operator">=</span> obj<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span><span class="token keyword">var</span> screen <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"screen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//获取到输入框的值</span><span class="token keyword">var</span> exp <span class="token operator">=</span> screen<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span>exp<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将计算结果赋值给输入框</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"error"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span>screen<span class="token punctuation">.</span>value <span class="token operator">+=</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、js部分详解"><a href="#五、js部分详解" class="headerlink" title="五、js部分详解"></a>五、js部分详解</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取触发事件的元素</span><span class="token keyword">var</span> obj <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token operator">||</span>e<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>nodeName <span class="token operator">!=</span> <span class="token string">"BUTTON"</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> v <span class="token operator">=</span> obj<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span><span class="token keyword">var</span> screen <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"screen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//获取到输入框的值</span><span class="token keyword">var</span> exp <span class="token operator">=</span> screen<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span>exp<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将计算结果赋值给输入框</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"error"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span>screen<span class="token punctuation">.</span>value <span class="token operator">+=</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用e.target||e.srcElement，获取到触发事件的元素，||连接两个语法是为了解决不同浏览器的兼容性问题。</p><p>获取到触发事件元素的具体值之后，判断元素值是否等于“=”和“C”，这两个按钮是做区别于普通字符串拼接及计算的其他功能。</p><p>C做清屏处理：判断触发事件的按钮值是否为C，若为C，屏幕中只显示0；</p><p>=做计算处理：判断触发事件的按钮值是否为=，若为=，利用eval()方法计算屏幕上的公式；</p><p>其他触发事件的按钮直接做字符串拼接显示在屏幕上。</p><h2 id="六、动图效果"><a href="#六、动图效果" class="headerlink" title="六、动图效果"></a>六、动图效果</h2><p><img src="photos%5C1.png"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 计算器 </tag>
            
            <tag> js实现计算器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10 CMD命令大全与超好用的快捷键</title>
      <link href="2021/04/19/Win10%20CMD%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%E4%B8%8E%E8%B6%85%E5%A5%BD%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2021/04/19/Win10%20CMD%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%E4%B8%8E%E8%B6%85%E5%A5%BD%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Windows-CMD-命令大全"><a href="#一、Windows-CMD-命令大全" class="headerlink" title="一、Windows CMD 命令大全"></a>一、Windows CMD 命令大全</h2><p>按组合键 Win(Windows图标键)+R 键打开运行窗口，输入“cmd”按回车即可打开cmd命令提示符</p><p>在窗口右击选择属性可进行个性化设置~</p><p>&nbsp;&nbsp;&nbsp;&nbsp; </p><p>　　1.calc：启动计算器</p><p>　　2.appwiz.cpl：程序和功能</p><p>　　3.certmgr.msc：证书管理实用程序</p><p>　　4.charmap：启动字符映射表</p><p>　　5.chkdsk.exe：Chkdsk磁盘检查(管理员身份运行命令提示符)</p><p>　　6.cleanmgr: 打开磁盘清理工具</p><p>　　7.cliconfg：SQL SERVER 客户端网络实用工具</p><p>　　8.cmstp：连接管理器配置文件安装程序</p><p>　　9.cmd.exe：CMD命令提示符</p><p>　　10.自动关机命令</p><p>　　Shutdown -s -t 600：表示600秒后自动关机</p><p>　　shutdown -a ：可取消定时关机</p><p>　　Shutdown -r -t 600：表示600秒后自动重启</p><p>　　rundll32 user32.dll,LockWorkStation：表示锁定计算机</p><p>　　11.colorcpl：颜色管理，配置显示器和打印机等中的色彩</p><p>　　12.CompMgmtLauncher：计算机管理</p><p>　　13.compmgmt.msc：计算机管理</p><p>　　14.credwiz：备份或还原储存的用户名和密码</p><p>　　15.comexp.msc：打开系统组件服务</p><p>　　16.control：控制面版</p><p>　　17.dcomcnfg：打开系统组件服务</p><p>　　18.Dccw：显示颜色校准</p><p>　　19.devmgmt.msc：设备管理器</p><p>　　20.desk.cpl：屏幕分辨率</p><p>　　21.dfrgui：优化驱动器 Windows 7→dfrg.msc：磁盘碎片整理程序</p><p>　　22.dialer：电话拨号程序</p><p>　　23.diskmgmt.msc：磁盘管理</p><p>　　24.dvdplay：DVD播放器</p><p>　　25.dxdiag：检查DirectX信息</p><p>　　26.eudcedit：造字程序</p><p>　　27.eventvwr：事件查看器</p><p>　　28.explorer：打开资源管理器</p><p>　　29.Firewall.cpl：Windows防火墙</p><p>　　30.FXSCOVER：传真封面编辑器</p><p>　　31.fsmgmt.msc：共享文件夹管理器</p><p>　　32.gpedit.msc：组策略</p><p>　　33.hdwwiz.cpl：设备管理器</p><p>　　34.inetcpl.cpl：Internet属性</p><p>　　35.intl.cpl：区域</p><p>　　36.iexpress：木马捆绑工具，系统自带</p><p>　　37.joy.cpl：游戏控制器</p><p>　　38.logoff：注销命令</p><p>　　39.lusrmgr.msc：本地用户和组</p><p>　　40.lpksetup：语言包安装/删除向导，安装向导会提示下载语言包</p><p>　　41.lusrmgr.msc：本机用户和组</p><p>　　42.main.cpl：鼠标属性</p><p>　　43.mmsys.cpl：声音</p><p>　　44.magnify：放大镜实用程序</p><p>　　45.mem.exe：显示内存使用情况(如果直接运行无效，可以先管理员身份运行命令提示符，在命令提示符里输入mem.exe&gt;d:a.txt<br>即可打开d盘查看a.txt，里面的就是内存使用情况了。当然什么盘什么文件名可自己决定。)</p><p>　　46.MdSched:Windows内存诊断程序</p><p>　　47.mmc：打开控制台</p><p>　　48.mobsync：同步命令</p><p>　　49.mplayer2：简易widnows media player</p><p>　　50.Msconfig.exe：系统配置实用程序</p><p>　　51.msdt：微软支持诊断工具</p><p>　　52.msinfo32：系统信息</p><p>　　53.mspaint：画图</p><p>　　54.Msra：Windows远程协助</p><p>　　55.mstsc：远程桌面连接</p><p>　　56.NAPCLCFG.MSC：客户端配置</p><p>　　57.ncpa.cpl：网络连接</p><p>　　58.narrator：屏幕“讲述人”</p><p>　　59.Netplwiz：高级用户帐户控制面板，设置登陆安全相关的选项</p><p>　　60.netstat : an(TC)命令检查接口</p><p>　　61.notepad：打开记事本</p><p>　　62.Nslookup：IP地址侦测器</p><p>　　63.odbcad32：ODBC数据源管理器</p><p>　　64.OptionalFeatures：打开“打开或关闭Windows功能”对话框</p><p>　　65.osk：打开屏幕键盘</p><p>　　66.perfmon.msc：计算机性能监测器</p><p>　　67.perfmon：计算机性能监测器</p><p>　　68.PowerShell：提供强大远程处理能力</p><p>　　69.printmanagement.msc：打印管理</p><p>　　70.powercfg.cpl：电源选项</p><p>　　71.psr：问题步骤记录器</p><p>　　72.Rasphone：网络连接</p><p>　　73.Recdisc：创建系统修复光盘</p><p>　　74.Resmon：资源监视器</p><p>　　75.Rstrui：系统还原</p><p>　　76.regedit.exe：注册表</p><p>　　77.regedt32：注册表编辑器</p><p>　　78.rsop.msc：组策略结果集</p><p>　　79.sdclt：备份状态与配置，就是查看系统是否已备份</p><p>　　80.secpol.msc：本地安全策略</p><p>　　81.services.msc：本地服务设置</p><p>　　82.sfc /scannow：扫描错误并复原/windows文件保护</p><p>　　83.sfc.exe：系统文件检查器</p><p>　　84.shrpubw：创建共享文件夹</p><p>　　85.sigverif：文件签名验证程序</p><p>　　86.slui：Windows激活，查看系统激活信息</p><p>　　87.slmgr.vbs -dlv ：显示详细的许可证信息</p><p>　　88.snippingtool：截图工具，支持无规则截图</p><p>　　89.soundrecorder：录音机，没有录音时间的限制</p><p>　　90.StikyNot：便笺</p><p>　　91.sysdm.cpl：系统属性</p><p>　　92.sysedit：系统配置编辑器</p><p>　　93.syskey：系统加密，一旦加密就不能解开，保护系统的双重密码</p><p>　　94.taskmgr：任务管理器(旧版)</p><p>　　95.TM任务管理器(新版)</p><p>　　96.taskschd.msc：任务计划程序</p><p>　　97.timedate.cpl：日期和时间</p><p>　　98.UserAccountControlSettings用户账户控制设置</p><p>　　99.utilman：辅助工具管理器</p><p>　　100.wf.msc：高级安全Windows防火墙</p><p>　　101.WFS：Windows传真和扫描</p><p>　　102.wiaacmgr：扫描仪和照相机向导</p><p>　　103.winver：关于Windows</p><p>　　104.wmimgmt.msc：打开windows管理体系结构(WMI)</p><p>　　105.write：写字板</p><p>　　106.wscui.cpl：操作中心</p><p>　　107.wuapp：Windows更新</p><p>　　108.wscript：windows脚本宿主设置<br>&nbsp;以上就是windows 10系统中运行命令大全，有需要可复制粘贴即可使用。&nbsp; Windows 不区分大小写</p><h2 id="二、Windows-cmd窗口中cd指令切换路径"><a href="#二、Windows-cmd窗口中cd指令切换路径" class="headerlink" title="二、Windows cmd窗口中cd指令切换路径"></a>二、Windows cmd窗口中cd指令切换路径</h2><p>&nbsp; 通用的格式为输入 cd /d *&nbsp;&nbsp; // *可以是你要切换的任意盘符</p><p>1、Windows cmd窗口中cd指令无法转换盘符目录怎么办？</p><p>1）按下WIN+R键 输入cmd，打开cmd窗口。</p><p>2）默认路径为用户文档路径，如果想切换到D盘 ，输入 cd d:是不行的。</p><p>3）如果要切换盘符的目录，正确的用法是在cd 和路径中间 增加一个’/d’，输入&nbsp;cd /d d:</p><p>4）当我们要切换盘符时，可以不用cd指令直接可用盘符，输入&nbsp;d：&nbsp;&nbsp;&nbsp;</p><p>5）cd命令有什么用呢？</p><p>cmd中输入 cd /? ，就得到其对应的帮助文件。其主要功能是显示当前目录的名称，或更改当前的目录。</p><p>&nbsp;</p><p>2、Windows cmd窗口中cd指令切换盘符和盘符目录：</p><p>1）显示当前目录的所有文件，输入 dir</p><p>2）进入当前目录下的子目录，输入 cd 目录名</p><p>3）返回上一层目录，输入 cd ..</p><p>4）切换到根目录，输入 cd /</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </p><h2 id="三、WIN10-超好用的快捷键"><a href="#三、WIN10-超好用的快捷键" class="headerlink" title="三、WIN10 超好用的快捷键"></a>三、WIN10 超好用的快捷键</h2><p>1、以管理员身份打开</p><p>&nbsp; &nbsp; &nbsp; &nbsp; Win10中的UAC（用户账号控制）虽然已经很智能，但并不完美，不少程序我们在执行的时候需要手工指定“以管理员身份运行”。</p><p>方式一：搜索cmd，右击选择以管理员身份运行</p><p>方式二：在目录C:\Windows\System32下，搜索cmd.exe，右击选择以管理员身份运行</p><p>2、打开“任务管理器”– Ctrl+Shift+Esc</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 在Win10中之前，要打开“任务管理器”，按下那个众所周知的“Ctrl+Alt+Del”三指禅即可，</p><p>在Win10中，按下这个组合键，打开的却 是“锁定计算机”、“启动任务管理器” 、“切换用户”等一系列任务列表，虽然也可以间接打开“任务管理器”，但更直接的方法是按下“Ctrl+shift+Esc”组合键。</p><p>3、Win + D 显示桌面</p><p>4、Win + E 打开文件资源管理器（计算机）</p><p>5、Win + I 打开设置</p><p>6、Win + L&nbsp; 锁屏</p><p>7、Win + R&nbsp; 打开运行窗口</p><p>8、Ctrl + P&nbsp;&nbsp; 打开打印视图</p><p>9、Ait + Tab 任务切换</p><p>10、Ctrl + Z&nbsp;&nbsp; 撤销</p><p>11、Ctrl + F&nbsp;&nbsp; 查找。可以查找文字，浏览器里面也可以用。写论文的时候很熟练。</p><p>12、Ctrl+Shift+N 打开想要新建文件夹的分区或者目录，一个“新建文件夹”就出现了</p><p>13、Win +P&nbsp;&nbsp; 打开“投影”，用投影仪以及玩双屏的老铁，自然知道。很方便的快捷键。</p><p>14、Win +左/右&gt; Win +上/下&gt;&nbsp;&nbsp;&nbsp; 贴靠窗口，窗口可以变为1/4大小放置在屏幕4个角落（个人比较喜欢常用）</p><p>15、Win + Tab&nbsp; 时间轴（1803版本）、查看任务视图，时间轴可以看到几天执行过的任务，查找起来真的方便。</p><p>16、Win +“=”键（就是在backspace旁边的有加号有等号的那个键），打开放大镜的快捷键，适合眼神不好的人使用。</p><p>17、Win + F4键&nbsp; 在浏览器中按下，则全选中链接，不需要使用鼠标点选链接栏，可快速打网址。</p><p>18、Win + S 打开搜索 小娜</p><p>19、Win + X&nbsp;&nbsp;&nbsp; 等于在左下角开始图标上面点击右键。</p><p>20、Win+K 打开「连接」设备</p><p>&nbsp; &nbsp;&nbsp; 这相对是一个冷门快捷键，主要是用来快速连接无线和蓝牙设备，比如一些蓝牙鼠标、蓝牙音箱、蓝牙键盘或者无线显示器。只要用Win+K 呼出这个菜单，我们就能快速的进行蓝牙配置。不必每次去点击右下角的蓝牙图标再连接蓝牙这么麻烦了。</p><p>21、Win+A 打开操作中心</p><p>&nbsp; &nbsp; 通知中心和常用的设置选项都会出现在操作中心里,可以快速调整电脑的联网状态和夜间模式等选项，用起来还是十分方便的。</p><p>22、Win + Shift + S&nbsp; 召唤Windows截图</p><p>&nbsp; &nbsp; &nbsp;&nbsp; 换到win10之后，它自带的截图功能非常好用，快捷键 Win + Shift + S呼出，可以选择截屏幕的任意区域，任意形状，以及全面屏幕截图。截图之后可以马上进入编辑模式，不必每次开电脑的还去登陆QQ。</p><p>&nbsp;</p><p>23、虚拟桌面（可以自己尝试）</p><p>&nbsp; &nbsp; &nbsp; &nbsp; win10中加入了对虚拟桌面的支持。虚拟桌面简单得说：就是保留现有桌面全部设置的情况下。打开一个全新的空白桌面供用户使用。适合在做现有工作的间中临时插入一套新工作进行。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 比如说你打开一堆表格和文档时，突然接到老板的加急任务。就可以打开一个新的虚拟桌面处理，完事以后还可以切换到原先打开的那堆表格中。又或者接了“私活”不想让老板发现，就可以创建一个虚拟桌面“藏在电脑中”随时可以切换出来。</p><p>下边是一组关于虚拟桌面的快捷键：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>Win + Ctrl + D 创建虚拟桌面</p><p>Win + Ctrl + F4 关闭当前虚拟桌面</p><p>Win + Ctrl + ← 向左切换虚拟桌面</p><p>Win + Ctrl + → 向右切换虚拟桌面</p><p>&nbsp; &nbsp;</p><h2 id="三、Windows-cmd窗口常用命令"><a href="#三、Windows-cmd窗口常用命令" class="headerlink" title="三、Windows cmd窗口常用命令"></a>三、Windows cmd窗口常用命令</h2><p>cmd中输入 命令名 /? ，就可查看其对应的帮助文件。</p><p>1、ping 命令：用来验证与远程计算机的连接。</p><p>ping 是Windows自带的一个DOS命令。利用它可以检查网络是否能够连通和分析网络速度，用好它可以很好地帮助我们分析判定网络故障。</p><p>输入ping按回车即可看到详细说明。默认响应4下结束</p><p>语法：ping &nbsp; [选项] &nbsp;[主机名称或IP地址]</p><p>D:&gt;ping 127.0.0.1</p><p>正在 Ping 127.0.0.1 具有 32 字节的数据:<br>来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64<br>来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64<br>来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64<br>来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64</p><p>127.0.0.1 的 Ping 统计信息:<br>    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，<br>往返行程的估计时间(以毫秒为单位):<br>    最短 = 0ms，最长 = 0ms，平均 = 0ms<br>2、用命令查看和终止进程</p><p>netstat命令：显示协议统计信息和当前 TCP/IP 网络连接</p><p>语法：netstat &nbsp; [选项]&nbsp;</p><p>常用参数：</p><p>-a &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;显示所有连接和侦听端口。<br>-n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;以数字形式显示地址和端口号。<br>-o &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;显示拥有的与每个连接关联的进程 ID。<br>比如：</p><p>查看监听端口以及监听对应的进程（PID）&gt;netstat -ano | findstr 端口号</p><p>D:&gt;netstat -ano | findstr 8000<br>  TCP    0.0.0.0:8000           0.0.0.0:0              LISTENING       29296<br>  TCP    [::]:8000              [::]:0                 LISTENING       29296<br>taskkill命令：按照进程 ID (PID) 或映像名称终止任务。</p><p>语法：taskkill &nbsp; [选项]&nbsp;</p><p>常用参数：</p><p>&nbsp;/F &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;指定要强行终止 &nbsp;<br>&nbsp;/T &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Tree kill: 终止指定的进程和任何由此启动的子进程。<br>/IM &nbsp; &nbsp;&nbsp; &nbsp;image name &nbsp;指定要终止的进程的名称。<br>/PID &nbsp;process id &nbsp; &nbsp; &nbsp; 指定要终止的进程的PID。 &nbsp;<br>比如：</p><p>终止 idea进程及子进程&gt; taskkill /f /im &nbsp;idea64.exe&nbsp;&nbsp;/t</p><p>根据pid强制终止进程&gt; taskkill&nbsp; /pid &nbsp;进程的PID&nbsp; /f&nbsp;</p><p>D:&gt;taskkill /pid 29296 /f<br>成功: 已终止 PID 为 29296 的进程。&nbsp;</p><p>ends ~</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> cmd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识学习笔记总结</title>
      <link href="2021/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/"/>
      <url>2021/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="java基础复习"><a href="#java基础复习" class="headerlink" title="java基础复习"></a>java基础复习</h2><h3 id="1、-抽象类可以有构造器，可以有一个非抽象的父类"><a href="#1、-抽象类可以有构造器，可以有一个非抽象的父类" class="headerlink" title="1、 抽象类可以有构造器，可以有一个非抽象的父类"></a>1、 抽象类可以有构造器，可以有一个非抽象的父类</h3><h3 id="2、-垃圾回收机制回收的是堆里面的内存，栈里面的数据自动入栈自动出栈"><a href="#2、-垃圾回收机制回收的是堆里面的内存，栈里面的数据自动入栈自动出栈" class="headerlink" title="2、 垃圾回收机制回收的是堆里面的内存，栈里面的数据自动入栈自动出栈"></a>2、 垃圾回收机制回收的是堆里面的内存，栈里面的数据自动入栈自动出栈</h3><h3 id="3、-引用类型的数据在堆当中，内存中操作的只有栈，new关键字在堆里面分配一块内存"><a href="#3、-引用类型的数据在堆当中，内存中操作的只有栈，new关键字在堆里面分配一块内存" class="headerlink" title="3、 引用类型的数据在堆当中，内存中操作的只有栈，new关键字在堆里面分配一块内存"></a>3、 引用类型的数据在堆当中，内存中操作的只有栈，new关键字在堆里面分配一块内存</h3><h3 id="4、-java中是值传递"><a href="#4、-java中是值传递" class="headerlink" title="4、 java中是值传递"></a>4、 java中是值传递</h3><h3 id="5、-String是不可变字符，即一旦分配了内存，此内存的值将不会改变，又将String赋值是，会重新分配一块内存，字符串池：-StringBuffer"><a href="#5、-String是不可变字符，即一旦分配了内存，此内存的值将不会改变，又将String赋值是，会重新分配一块内存，字符串池：-StringBuffer" class="headerlink" title="5、 String是不可变字符，即一旦分配了内存，此内存的值将不会改变，又将String赋值是，会重新分配一块内存，字符串池： StringBuffer"></a>5、 String是不可变字符，即一旦分配了内存，此内存的值将不会改变，又将String赋值是，会重新分配一块内存，字符串池： StringBuffer</h3><h3 id="6、-在堆中的东西叫对象"><a href="#6、-在堆中的东西叫对象" class="headerlink" title="6、 在堆中的东西叫对象"></a>6、 在堆中的东西叫对象</h3><h4 id="运行时异常："><a href="#运行时异常：" class="headerlink" title="运行时异常："></a>运行时异常：</h4><p>&nbsp; &nbsp; ArithmeticException&nbsp; 当出现异常的运算条件时，抛出此异常。例如，一个整数“除以零”时，抛出此类的一个实例。</p><p>&nbsp; &nbsp;ArrayIndexOutOfBoundsException用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引。</p><p>&nbsp; &nbsp;ArrayStoreException试图将错误类型的对象存储到一个对象数组时抛出的异常。如：</p><p>&nbsp; &nbsp;Objectx[] = new String[3];</p><p>&nbsp; &nbsp;x[0]= new Integer(0);</p><p>&nbsp; &nbsp;ClassCastException视图将对象转换为不是实例的子类时，抛出该异常。如：</p><p>&nbsp; &nbsp;Objectx = new Integer(0);</p><p>&nbsp; &nbsp;System.out.println((String)x);</p><p>&nbsp; &nbsp;illegalArgumentException表明向方法传递了一个不合法或不正确的参数</p><p>&nbsp; &nbsp;NegativeArraySizeException如果应用程序视图创建大小为负的数组，则抛出该异常</p><h4 id="编译时异常："><a href="#编译时异常：" class="headerlink" title="编译时异常："></a>编译时异常：</h4><p>&nbsp; &nbsp;NoSuchMethodException无法找到某一特定方法时，抛出该异常</p><h3 id="7、-unicode码范围"><a href="#7、-unicode码范围" class="headerlink" title="7、 unicode码范围"></a>7、 unicode码范围</h3><p>&nbsp; 汉字：[\u4e00,\u9fa5]</p><p>&nbsp; 数字：[0x30,0x39]</p><p>&nbsp; 小写字母：[0x61,0x7a]</p><p>&nbsp; 大写字母：[0x41,0x5a]</p><h3 id="8、-final类"><a href="#8、-final类" class="headerlink" title="8、 final类"></a>8、 final类</h3><p>&nbsp; &nbsp;final类能够修饰非抽象类、非抽象类成员方法和变量（静态变量、实例变量、局部变量）</p><p>&nbsp; &nbsp;final类不能被继承，没有子类</p><p>&nbsp; &nbsp;final方法可以被继承，但不能被子类的方法覆盖</p><p>&nbsp; &nbsp;final成员变量表示常量，声明成员变量时，必须赋值（要么在声明的时候赋值，要么在构造器中赋值），赋值后不能被改变</p><p>&nbsp; &nbsp;publicfinalint E; //final空白,必须在初始化对象的时候赋初值<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Test3(int x) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E= x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp; &nbsp;final不能用于修饰构造方法2.5</p><h3 id="9、-static只能修饰成员变量，表示所有对象共享这个数据"><a href="#9、-static只能修饰成员变量，表示所有对象共享这个数据" class="headerlink" title="9、 static只能修饰成员变量，表示所有对象共享这个数据"></a>9、 static只能修饰成员变量，表示所有对象共享这个数据</h3><p>&nbsp; &nbsp;static能够修饰成员变量和方法，内部类，也可以形成静态static代码块，不能修饰局部变量</p><p>&nbsp; &nbsp;被static修饰的成员变量可以直接用类名来调用，语法如下：</p><p>&nbsp; &nbsp;类名.静态放大名（）；</p><p>&nbsp; &nbsp;类名.静态变量名；</p><p>&nbsp; &nbsp;静态方法中不能用this和super关键字，不能直接访问不带static的成员变量和成员方法</p><p>&nbsp; &nbsp;因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract</p><p>&nbsp; &nbsp;先运行静态代码块，再运行构造器</p><p>&nbsp;</p><h3 id="10、static和final一块表示什么"><a href="#10、static和final一块表示什么" class="headerlink" title="10、static和final一块表示什么"></a>10、static和final一块表示什么</h3><p>&nbsp; &nbsp;staticfinal用来修饰成员变量和成员方法，可理解为全局变量（java中没有全局变量的概念）</p><p>&nbsp; &nbsp;staticfinal修饰变量，表示一旦给值就不可修改，并且通过类名就可以访问</p><p>&nbsp; &nbsp;staticfinal修饰方法，表示不可覆盖，并可通过类名直接访问&nbsp;</p><p>&nbsp; &nbsp;staticfinal修饰一些容器类型（ArrayList、HashMap）的变量，不可以改变容器变量本省，但可以修改容器中存放的对象</p><p>&nbsp;</p><h3 id="11、类成员变量分类"><a href="#11、类成员变量分类" class="headerlink" title="11、类成员变量分类"></a>11、类成员变量分类</h3><p>&nbsp;&nbsp;&nbsp; 被static修饰的变量叫静态变量或者类变量；</p><p>&nbsp;&nbsp;&nbsp; 没有被static修饰的变量叫实例变量。</p><p>&nbsp;</p><h3 id="12、命令行参数"><a href="#12、命令行参数" class="headerlink" title="12、命令行参数"></a>12、命令行参数</h3><p>&nbsp;&nbsp;&nbsp; java主类参数（即命令行参数）</p><p>&nbsp;&nbsp;&nbsp; eclipse中java输入命令行参数，在选定的类中，点击右键run as—Runconfigurations—Arguments-Program arguments-Variables-选择string_prompt</p><p>&nbsp;</p><h3 id="13、Integer-valueOf-String-将字符串转换成Integer包装类"><a href="#13、Integer-valueOf-String-将字符串转换成Integer包装类" class="headerlink" title="13、Integer.valueOf(String)将字符串转换成Integer包装类"></a>13、Integer.valueOf(String)将字符串转换成Integer包装类</h3><p>&nbsp;</p><h3 id="14、一个-java文件中可以有很多类。不过注意以下几点："><a href="#14、一个-java文件中可以有很多类。不过注意以下几点：" class="headerlink" title="14、一个.java文件中可以有很多类。不过注意以下几点："></a>14、一个.java文件中可以有很多类。不过注意以下几点：</h3><h4 id="a、public-权限的类只能有一个（也可以一个都没有，但最多只有1个）"><a href="#a、public-权限的类只能有一个（也可以一个都没有，但最多只有1个）" class="headerlink" title="a、public 权限的类只能有一个（也可以一个都没有，但最多只有1个）"></a>a、public 权限的类只能有一个（也可以一个都没有，但最多只有1个）</h4><h4 id="b、这个-java文件的文件名必须是public类的类名（一般的情况下，这里放置main方法是程序的入口。）"><a href="#b、这个-java文件的文件名必须是public类的类名（一般的情况下，这里放置main方法是程序的入口。）" class="headerlink" title="b、这个.java文件的文件名必须是public类的类名（一般的情况下，这里放置main方法是程序的入口。）"></a>b、这个.java文件的文件名必须是public类的类名（一般的情况下，这里放置main方法是程序的入口。）</h4><h4 id="c、若这个文件中没有public的类，则文件名随便是一个类的名字即可"><a href="#c、若这个文件中没有public的类，则文件名随便是一个类的名字即可" class="headerlink" title="c、若这个文件中没有public的类，则文件名随便是一个类的名字即可"></a>c、若这个文件中没有public的类，则文件名随便是一个类的名字即可</h4><h4 id="d、用javac-编译这个-java文件的时候，它会给每一个类生成一个-class文件"><a href="#d、用javac-编译这个-java文件的时候，它会给每一个类生成一个-class文件" class="headerlink" title="d、用javac 编译这个.java文件的时候，它会给每一个类生成一个.class文件"></a>d、用javac 编译这个.java文件的时候，它会给每一个类生成一个.class文件</h4><p>&nbsp;</p><h3 id="15、面向对象、面向过程"><a href="#15、面向对象、面向过程" class="headerlink" title="15、面向对象、面向过程"></a>15、面向对象、面向过程</h3><p>&nbsp;&nbsp;&nbsp; 面向对象的三大特性：封装、继承、多态</p><p>&nbsp;&nbsp;&nbsp; 面向过程：C语言的底层语言的特性</p><p>&nbsp;</p><h3 id="16、类和对象："><a href="#16、类和对象：" class="headerlink" title="16、类和对象："></a>16、类和对象：</h3><p>&nbsp;&nbsp;&nbsp; 一个类中可以有多个对象，类是对对象的描述</p><p>&nbsp;&nbsp;&nbsp; 一个类中的成员：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 字段：封装private</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 方法：类的行为</p><p>&nbsp; &nbsp; 构造器：与类同名，没有返回值。作用：初始化成员变量。默认构造器：无参且同名没有返回值，当一个类显示的表明构</p><p>造器，则类不自己建立默认构造器</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 内部类</p><p>&nbsp;</p><h3 id="17、类之间的关系：继承耦合度最高"><a href="#17、类之间的关系：继承耦合度最高" class="headerlink" title="17、类之间的关系：继承耦合度最高"></a>17、类之间的关系：继承耦合度最高</h3><p>&nbsp;&nbsp;&nbsp; A．继承（is-a）: 单继承多实现&nbsp;extends 优点：减少了代码的冗余、缺点：耦合度太高</p><p>&nbsp; &nbsp; B．实现:</p><p>&nbsp;&nbsp;&nbsp; C．组合(has-a):</p><p>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 合成:个体和整体的关系，个体与整体生命周期相同，公司和部门的关系</p><p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 聚合：个体和整体的关系，生命周期不同，学生和学校的关系</p><p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 关联：双向关联</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Class Person{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Petpet;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ClassPet{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Personowner;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; D．依赖(use-a):一个类作为另一个类方法的参数或者是返回值，称为依赖</p><p>&nbsp;</p><h3 id="18、java设计原则"><a href="#18、java设计原则" class="headerlink" title="18、java设计原则"></a>18、java设计原则</h3><p>低耦合高内聚</p><p>可扩展性和可维护性</p><h3 id="19、继承："><a href="#19、继承：" class="headerlink" title="19、继承："></a>19、继承：</h3><p>&nbsp; 子类中的成员：</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 1）从父类中继承的可视化（非私有的）的成员（字段、方法），不能继承父类的构造器</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 2）子类所特有的成员（字段、方法、构造器）</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 3）重载父类的成员（方法）&nbsp; 多态</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重载的条件：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a）发生在同一个类或者父子类之间</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b）方法名称相同，参数列表（参数的个数，参数的数据类型、参数的顺序）不同</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c）返回值无所谓</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d）访问权限无所谓</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;歧义重载：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ma(12,34)//歧义重载，编译错误</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; publicvoid ma(int i,double j){//打印1}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; publicvoid ma(double i,int j){//打印2}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;构造器重载：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; this.成员（字段、方法）：调用本类的字段、方法</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; this(参数列表):调用本类的其他构造方法，必须在构造方法的第一句</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; public Person(int age){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this(age,””);//调用下面那个构造器</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; publicPerson(int age,String name){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.age= age;//调用本类的字段</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.name= name;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;super：父类的对象</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.成员：调用父类的成员（方法、字段）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super(参数列表)：调用父类的构造方法，必须位于子类构造方法的第一句</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果父类中没有无参的构造器，在子类中必须显式的调用父类带参数的构造方法（super（参数类表或者this（参数列表）））；&nbsp; 如果父类有无参的构造器，则子类中可以不用显式调用父类的构造器，因为系统默认调用super（）;</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 4）重写父类的成员（方法）&nbsp; 多态</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重写的条件 ：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a）发生在父子类之间</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b）方法名称相同，参数列表（参数的个数，参数的数据类型、参数的顺序）相同</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c）返回值必须相同</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d）子类覆盖方法的访问权限大于等于父类被覆盖方法的访问权限</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e）子类不能抛出比父类异常更大的异常（RuntimeException例外）</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 5）隐藏父类的成员（字段）&nbsp;&nbsp;&nbsp;</p><p>多态对象：调用隐藏成员，调用的是父类的</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;调用覆盖成员，调用的是子类的&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;</p><h3 id="20、static-类成员"><a href="#20、static-类成员" class="headerlink" title="20、static:类成员"></a>20、static:类成员</h3><p>字段：所有对象共享</p><p>&nbsp;&nbsp;&nbsp; 方法：静态方法不能直接访问非静态的成员，如果需要访问，产生实例访问；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;非静态方法能够直接访问静态成员和非静态成员</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;静态方法中不能有this、super关键字</p><p>&nbsp;&nbsp;&nbsp; 块：内存中只执行一次，通常用来初始化静态成员</p><p>&nbsp;&nbsp;&nbsp; 内部类</p><h3 id="21、final：终态的"><a href="#21、final：终态的" class="headerlink" title="21、final：终态的"></a>21、final：终态的</h3><p>&nbsp;&nbsp;&nbsp; 变量：不能第二次赋值，而且必须有初始值</p><p>&nbsp;&nbsp;&nbsp; 方法：不能被重写</p><p>类：不能被继承</p><h3 id="22、abstract："><a href="#22、abstract：" class="headerlink" title="22、abstract："></a>22、abstract：</h3><p>&nbsp;&nbsp; 抽象方法必须在抽象类中，抽象类中不一定要有抽象方法</p><p>&nbsp;&nbsp; 抽象类没有实例</p><p>&nbsp;&nbsp; 抽象类可以有父类，父类可以是抽象类也可以是非抽象类</p><p>&nbsp;&nbsp; 抽象类有构造器，不能用来产生本类实例，构造器用来间接产生子类实例时使用</p><p>&nbsp;&nbsp;abstract不能与static、final、private一起使用</p><h3 id="23、异常处理："><a href="#23、异常处理：" class="headerlink" title="23、异常处理："></a>23、异常处理：</h3><p>&nbsp;&nbsp; 1）try{}catch（）finally{}</p><p>&nbsp;&nbsp; 2）throws&nbsp;&nbsp; 方法声明后 throws 异常类</p><p>&nbsp;&nbsp; 3）throw&nbsp;&nbsp;&nbsp; 句子（通常是if）后throw&nbsp;异常类的实例</p><p>&nbsp;&nbsp; 4）自定义异常类&nbsp; extends&nbsp; Exception或者RuntimeException&nbsp;</p><h3 id="24、方法重写-override-和-重载-overlord-的区别"><a href="#24、方法重写-override-和-重载-overlord-的区别" class="headerlink" title="24、方法重写(override)和 重载(overlord)的区别"></a>24、方法重写(override)和 重载(overlord)的区别</h3><p>重写override：子类中出现与父类中签名相同的方法、访问修饰符要等于高于父类、返回值类型，参数列表都相同</p><p>重载overlord：一个类内部出现两个及两个以上方法名相同、参数列表不同(参数类型，参数个数，参数类型的顺序)的方法</p><p>&nbsp;</p><h3 id="25、动态多态和静态多态"><a href="#25、动态多态和静态多态" class="headerlink" title="25、动态多态和静态多态"></a>25、动态多态和静态多态</h3><p>&nbsp;&nbsp;&nbsp; 动态多态（运行时多态）：运行过程中才知道调用那个方法，指的是方法重写</p><p>&nbsp;&nbsp;&nbsp; 静态多态（编译时多态）：编译时就知道所调用的方法，指的是方法重载</p><p>&nbsp;</p><h3 id="26、如果父类中没有空参构造"><a href="#26、如果父类中没有空参构造" class="headerlink" title="26、如果父类中没有空参构造"></a>26、如果父类中没有空参构造</h3><p>那么子类必须同super()的方式显示的调用父类构造</p><p>建议：如果父类中出现带参构造，那么必须手动添加空参构造</p><p>例：下列代码的运行结果是（&nbsp;B）</p><p>classA{</p><p>&nbsp;&nbsp;&nbsp;&nbsp; public&nbsp; A(int a){System.out.println（“A”）;}</p><p>}</p><p>class B extends A{</p><p>&nbsp;&nbsp;&nbsp; publicB(){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super(5);//必须加上这一块，用super（）显示的调用父类中的方法</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; public voidma(){System.out.println(“ma”);}</p><p>}</p><p>public class test{</p><p>&nbsp;&nbsp;&nbsp; public static void main(String[]args){</p><p>B b=new B（）;</p><p>b.ma();</p><p>&nbsp;&nbsp;&nbsp; }</p><p>}</p><p>A.&nbsp; 打印输出ma</p><p>B.&nbsp; 编译错误</p><p>C.&nbsp; 打印输出A</p><p>D.&nbsp; 打印输出A&nbsp; ma</p><p>&nbsp;</p><h3 id="27、-static："><a href="#27、-static：" class="headerlink" title="27、 static："></a>27、 static：</h3><p>表示静态的，修饰的内容属于类成员；被该类的所有对象共享，建议使用类名.的方式访问；修饰的内容在类加载的时候，执行；只能访问被static修饰的内容；修饰的内容只在类加载的时候执行一次。</p><p>可以修饰的内容：修饰属性、修饰方法、作为代码块使用 jdbc 加载驱动的时候</p><p>&nbsp;&nbsp;&nbsp; static{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class.forName(“”);//作为代码块使用</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp; 特点：</p><p>&nbsp;&nbsp;&nbsp; 1.修饰的内容属于类成员</p><p>&nbsp;&nbsp;&nbsp; 2.修饰的方法，不能被重写，可以被重载</p><p>&nbsp;&nbsp;&nbsp; 3.修饰的内容，执行一次</p><p>例：public class HelloWorld{</p><p>public staticvoid main(String args[]){</p><p>method();</p><p>}</p><p>public voidmethod(){</p><p>try{</p><p>System.out.println(“hello我执行”);</p><p>}</p><p>finally{</p><p>System.out.println(“我就不执行”);</p><p>}</p><p>&nbsp; }</p><p>}</p><p>编译运行后，输出结果是什么？(D&nbsp;)</p><p>A.”hello 我执行”</p><p>B.”我就不执行”</p><p>C.”hello 我执行”</p><p>“我就不执行”</p><p>&nbsp; D.代码不能编译</p><p>因为main方法是用static修饰的静态方法，调用的方法也必须用static修饰，而method();方法没有被static修饰</p><p>&nbsp;</p><h3 id="28、hashcode-返回的是对象的内存地址对应的int类型数据，但是我们可以重写hashCode-方法，返回的就不再是内存地址。"><a href="#28、hashcode-返回的是对象的内存地址对应的int类型数据，但是我们可以重写hashCode-方法，返回的就不再是内存地址。" class="headerlink" title="28、hashcode()返回的是对象的内存地址对应的int类型数据，但是我们可以重写hashCode()方法，返回的就不再是内存地址。"></a>28、hashcode()返回的是对象的内存地址对应的int类型数据，但是我们可以重写hashCode()方法，返回的就不再是内存地址。</h3><p>hashcode()相同的对象，这两个对象不一定相同；如果两个对象相同，则hashcode()一定相同。</p><p>&nbsp;</p><h3 id="29、java中的访问修饰符"><a href="#29、java中的访问修饰符" class="headerlink" title="29、java中的访问修饰符"></a>29、java中的访问修饰符</h3><p>public： 所有</p><p>protected： 自己、同一包中、子类可以访问</p><p>default： 默认什么都不加，就是default，自己、同一包中可以访问，但是比protected级别要低即限制更多</p><p>friendly： 自己、同一包中可以访问</p><p>private： 自己</p><p>例：以下代码的运行结果是：(&nbsp;C&nbsp; )</p><ol><li>abstract class abstrctIt {</li></ol><p>2.&nbsp;&nbsp; abstractfloat getFloat ();</p><ol start="3"><li><p>}</p></li><li><p>public class AbstractTest extends AbstractIt {</p></li></ol><p>5.&nbsp;&nbsp; privatefloat f1 = 1.0f;</p><p>6.&nbsp;&nbsp; privatefloat getFloat () {return f1;}</p><ol start="7"><li>}</li></ol><p>A. 编译成功</p><p>B. 第6行产生错误，导致运行失败</p><p>C. 第6行产生错误，导致编译失败</p><p>D. 第5行产生错误，导致编译失败</p><p>默认什么不加的访问修饰符是default，default比private限制少（即更高级），比protected限制多，所有第六行重写方法用的private访问修饰符比父类低级，所有会出现编译失败</p><p>&nbsp;</p><h3 id="30、Math-random-获取-0-1-的值，取不到1；"><a href="#30、Math-random-获取-0-1-的值，取不到1；" class="headerlink" title="30、Math.random()获取[0,1)的值，取不到1；"></a>30、Math.random()获取[0,1)的值，取不到1；</h3><p>用法：（int）Math.random()*n+1;取到1到n之间的整数</p><p>&nbsp;</p><h3 id="31、数组、集合、字符串之间的转换"><a href="#31、数组、集合、字符串之间的转换" class="headerlink" title="31、数组、集合、字符串之间的转换"></a>31、数组、集合、字符串之间的转换</h3><p>a. Arrays.asList() //将数组转换成集合</p><p>例：List list = Arrays.asList(names);//将数组转换成集合。</p><p>b.String.valueOf() //将数组转换成字符串、也可将整数转换成字符串</p><p>例：char []ch1 = {‘a’,’c’,’a’,’b’,’a’};</p><p>&nbsp;&nbsp;&nbsp;&nbsp; String str2 = String.valueOf(ch1);</p><p>例：int num = 123456;</p><p>&nbsp;&nbsp;&nbsp;&nbsp; String str =String.valueOf(num);</p><p>c.toCharArray()将字符串转换成数组</p><p>例：String str = “gdfgdfgd”;</p><p>char[] ch = str.toCharArray();</p><p>&nbsp;&nbsp; d.Arrays.toString()将字符数组变成字符串特定格式输出，如[1,2,3]</p><p>&nbsp;&nbsp;例：String str1 = Arrays.toString(ch);</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println(str1);</p><p>&nbsp; &nbsp;e.str.reverse();将字符串反转</p><p>&nbsp;&nbsp; 例：StringBuffersb =new StringBuffer(“adfsdsd”);</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; sb.reverse();</p><p>&nbsp;&nbsp; f.</p><h3 id="32、replace-函数"><a href="#32、replace-函数" class="headerlink" title="32、replace();函数"></a>32、replace();函数</h3><p>&nbsp;&nbsp;&nbsp; 例1：//将字符串”abcdabcdabdcadcbadcb”的字符出现的次数输出</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Stringnum = “abcdabcdabdcadcbadcb”;</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; String t = num.replace(“a”,””);</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println(num.length()-t.length());</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; replaceAll()，用正则表达式</p><p>&nbsp;&nbsp;&nbsp; 例2：//将字符串中的数字去除&nbsp;&nbsp;</p><p>String num1 = “ab23c7da45bc5da65bd5c67ad7cb9adcb”;</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; String t1 = num1.replaceAll(“[0-9]”, “”);</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println(t1);</p><p>&nbsp;&nbsp;&nbsp; 例3：//计算字符串的长度，一个字符算两个&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; byte[]b =str.getBytes();</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println(b.length);//若出现一个汉字代表3个字节的情况，将Utf-8换成GBK就可以了</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; String m = str.replaceAll(“[\u4e00-\u9fa5]”, “xx”);</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println(m.length());</p><p>&nbsp;</p><h3 id="33、DecimalFormat（）-将数字转换成特定的格式"><a href="#33、DecimalFormat（）-将数字转换成特定的格式" class="headerlink" title="33、DecimalFormat（）;将数字转换成特定的格式"></a>33、DecimalFormat（）;将数字转换成特定的格式</h3><p>例：//数组格式化 int num = 1234567;&nbsp;换成123，4567</p><p>int num = 1234567;</p><p>DecimalFormat f =new DecimalFormat(“#,####”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String t =f.format(num);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(t);</p><p>&nbsp;&nbsp;&nbsp; 例： //将数组转换成123,4567.89的格式</p><p>doubled = 1234567.88898890;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DecimalFormat &nbsp;f =new DecimalFormat(“#,####.##”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(f.format(d));</p><h3 id="34、String类型是否可以被继承，为什么？"><a href="#34、String类型是否可以被继承，为什么？" class="headerlink" title="34、String类型是否可以被继承，为什么？"></a>34、String类型是否可以被继承，为什么？</h3><p>&nbsp;&nbsp;&nbsp; 不能被继承，因为是被final修饰的类</p><p>&nbsp;</p><h3 id="35、String类型是否是基本类型，比较String类型变量时，-和equals有何区别？"><a href="#35、String类型是否是基本类型，比较String类型变量时，-和equals有何区别？" class="headerlink" title="35、String类型是否是基本类型，比较String类型变量时，== 和equals有何区别？"></a>35、String类型是否是基本类型，比较String类型变量时，== 和equals有何区别？</h3><p>&nbsp;&nbsp;&nbsp; 不是，是引用类型</p><p>&nbsp;&nbsp;&nbsp; a.如果 String类型是直接赋值 == 和 equals 效果相同</p><p>&nbsp;&nbsp;&nbsp; &nbsp;String a = “abc “;</p><p>&nbsp;&nbsp;&nbsp; &nbsp;String b = “abc”;</p><p>&nbsp;&nbsp;&nbsp; &nbsp; a ==b 和 a.equals(b)都为true</p><p>&nbsp;&nbsp;&nbsp; b.如果String是通过new构建的 == 和equals效果不同</p><p>&nbsp;&nbsp;&nbsp; &nbsp;String a = new String（“abc”）；</p><p>&nbsp;&nbsp;&nbsp; &nbsp;String b = new String（“abc”）；</p><p>&nbsp;&nbsp;&nbsp; &nbsp; a ==b 结果为false</p><p>&nbsp;&nbsp;&nbsp; &nbsp; a．equals（b）结果为true</p><p>&nbsp;</p><h3 id="36、char类型中是否可以存放一个汉字，为什么？"><a href="#36、char类型中是否可以存放一个汉字，为什么？" class="headerlink" title="36、char类型中是否可以存放一个汉字，为什么？"></a>36、char类型中是否可以存放一个汉字，为什么？</h3><p>&nbsp;&nbsp;&nbsp; 可以，char类型中存放的数据以Unicode码存放。</p><p>&nbsp;</p><h3 id="37、Random-函数"><a href="#37、Random-函数" class="headerlink" title="37、Random()函数"></a>37、Random()函数</h3><p>&nbsp;&nbsp;&nbsp; //获取1-35之间的随机数</p><p>&nbsp;&nbsp;&nbsp; //第一种方法</p><p>Random r = new Random();</p><p>int n = r.nextInt(35)+1;</p><p>//第二种方法Math.random()是取得[0,1)之间的随机小数，取不到1。</p><p>int n =(int) (Math.random()*35+1);</p><p>&nbsp;</p><h2 id="java工具类"><a href="#java工具类" class="headerlink" title="java工具类"></a>java工具类</h2><p>Object：引用类型的根，是所有类的超类，是java中唯一一个没有父类的类</p><h3 id="1、toString-将对象转成字符串"><a href="#1、toString-将对象转成字符串" class="headerlink" title="1、toString():将对象转成字符串"></a>1、toString():将对象转成字符串</h3><h3 id="2、equals（）和-的区别："><a href="#2、equals（）和-的区别：" class="headerlink" title="2、equals（）和==的区别："></a>2、equals（）和==的区别：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp; ==：可以判断基本数据类型和引用数据类型</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 引用数据类型，表示两个对象的引用是否相等，即栈里面引用的地址是否相等</p><p>&nbsp;&nbsp;&nbsp;&nbsp; equals：可以判断引用数据类型</p><p>引用数据类型：表示两个对象的引用是否相等，但是包装类、String、Date、File除外（这些判断的是对象的值是否相等，即堆内存里面的值是否相等）</p><p>Stringstr1 = “abc”；</p><p>//创建一个字符串池中的对象，如果里面有此对象了就不再创建了，直接用即可</p><p>Stringstr2 = “abc”；</p><p>Stringstr3 = new String(“abc”)；</p><p>Stringstr4 = new String(“abc”)；</p><p>//可能产生两个或一个对象，在堆内存中首先new出一个对象，再复制到字符串池当中，如果字符串池中有此对象，即不复制。所有堆内存中的对象是肯定存在的，字符串池中的对象不一定</p><p>System.out.println(str1==str2)；true</p><p>System.out.println(str3==str4)；false</p><p>//str3在堆内存中new出一个内存、str4在堆内存中重新new出一个内存，在堆内存中相当于等号的右边。在栈内存中，指向堆内存中的引用值不一样，所有为false</p><p>System.out.println(str1==str3)；false</p><p>//str1是在堆内存中的字符串池里，为“abc”，str3在堆内存new出一个对象‘abc‘占用一块内存，并且复制到字符串池中，如果字符串池中有abc了，即不复制。</p><p>System.out.println(str1.equals(str2));true</p><p>System.out.println(str3.equals(str4));true</p><p>System.out.println(str1.equals(str3));true</p><p>//equals在String类型比较的堆内存的值是否相等，str1字符串池中的内存为abc，str3在堆内存中new出的对象是abc，这两个对象虽然分配的内存不同，但是值相等，所以为true</p><h3 id="3、重写equals方法必须先重写hashcode方法"><a href="#3、重写equals方法必须先重写hashcode方法" class="headerlink" title="3、重写equals方法必须先重写hashcode方法"></a>3、重写equals方法必须先重写hashcode方法</h3><p>相等的对象必须具有相同的哈希码，具有相同哈希码的对象不一定相等</p><h3 id="4、clone（）克隆"><a href="#4、clone（）克隆" class="headerlink" title="4、clone（）克隆"></a>4、clone（）克隆</h3><p>浅表克隆：复制原对象的所有变量的备份,但是引用类型的变量指向原对象的数据</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 必须实现一个接口implements Cloneable</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 重写Object类的克隆方法clone()</p><p>深表克隆：复制原对象的所有变量的备份，包括引用类型</p><h3 id="5、反射Class-forName-“com-A”"><a href="#5、反射Class-forName-“com-A”" class="headerlink" title="5、反射Class.forName(“com.A”);"></a>5、反射Class.forName(“com.A”);</h3><p>破坏了底层的封装性</p><h3 id="6、包装类"><a href="#6、包装类" class="headerlink" title="6、包装类"></a>6、包装类</h3><p>byteByte</p><p>shortShort</p><p>longLong</p><p>floatFloat</p><p>doubleDouble</p><p>BooleanBoolean</p><p>intIntegar</p><p>charCharacter</p><p>包装类与字符串转换：</p><p>&nbsp;&nbsp;&nbsp;&nbsp; xxxValue（）：转换成其他基本类型</p><p>&nbsp;&nbsp;&nbsp; 包装类-à字符串 toString（）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(i.toString());</p><p>&nbsp;&nbsp;&nbsp; 字符串-à整形 parseXxx（）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i4 =Integer.parseInt(“123”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double i5 =Double.parseDouble(“123.456”);</p><p>装箱和拆箱：JDK1.5只会自动装箱和拆箱</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 装箱：基本数据类型转换为引用数据类型</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Integer i5 = 10;</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 拆箱：引用数据类型转换为基本数据类型</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Integer i5 = 10;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i6 = i5;</p><h3 id="7、String类"><a href="#7、String类" class="headerlink" title="7、String类"></a>7、String类</h3><p>charAt（）方法：一般与for循环一起，遍历字符串</p><p>&nbsp;&nbsp;&nbsp; Stringstr = “Hello Java,Hello World”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp; for(int i=0;i&lt;str.length();i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(charAt(i));</p><p>&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>concat()方法;拼接字符串，将指定字符串连接到此字符串的结尾</p><p>&nbsp;&nbsp;&nbsp;&nbsp; str.concat(“s”);&nbsp; //得到Hello Java,Hello Worlds</p><p>startWith()方法;测试此字符串是否已指定的前缀开始，boolean</p><p>&nbsp;&nbsp;&nbsp;&nbsp; str. startWith(“Hello”); //true</p><p>format()方法:将字符串按照某种格式输出</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; inti=1;intj=2;</p><p>&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(String.format(“%d+%d=%d”,i,j,i+j));//1+2=3</p><p>indexOf(String)方法:输出字符串第一次出现的索引，没有的话输出-1</p><p>&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(str.indexOf(“Hello”));//0</p><p>lastIndexOf()方法:输出字符串最后一次出现的索引</p><p>replace(old String, new String)方法:替换字符串</p><p>split()方法:分割字符串</p><p>substring(int start,int end)方法:截取字符串</p><p>toCharArray()方法:变成字符数组</p><p>trim()方法:去掉字符串两端的空格，字符串中间的去不掉</p><p>toUpperCase()方法:将字符串转化为大写</p><p>&nbsp;</p><h3 id="8、StringBuffer和StringBuilder区别"><a href="#8、StringBuffer和StringBuilder区别" class="headerlink" title="8、StringBuffer和StringBuilder区别"></a>8、StringBuffer和StringBuilder区别</h3><p>StringBuffer线程安全的，同步的，效率比较低，JDK1.0之后出现</p><p>StringBuilder线程不安全，不同步的，效率比较高，JDK1.5之后出现</p><p>&nbsp;</p><h3 id="9、StringBuffer方法"><a href="#9、StringBuffer方法" class="headerlink" title="9、StringBuffer方法"></a>9、StringBuffer方法</h3><p>StringBuffersb = new StringBuffer（“aaa”）;</p><p>append 追加字符串</p><p>sb.append(“bb”).append(“bb”);</p><p>delete 删除</p><p>sb.delete(1,2).delete(1,2);</p><p>insert 插入</p><p>sb.insert(1,”22”).insert(1,false);</p><p>setCharAt 修改</p><p>sb.setCharAt(1,’Q’);</p><p>replace 替换</p><p>sb.replace(1,3,”MMM”);</p><p>reverse 反转</p><p>sb.reverse();</p><p>&nbsp;</p><h3 id="9、Math方法"><a href="#9、Math方法" class="headerlink" title="9、Math方法"></a>9、Math方法</h3><p>&nbsp;&nbsp;&nbsp; Math.ceil(2.4);//3取比值大的最小整数</p><p>&nbsp;&nbsp;&nbsp; Math.ceil(-2.4);//-2</p><p>&nbsp;&nbsp;&nbsp; Math.floor(2.5);//2取比值小的最大整数</p><p>&nbsp;&nbsp;&nbsp; Math.round(2.5);//3四舍五入</p><p>&nbsp;&nbsp;&nbsp; Math.round(-2.5);//-2</p><p>&nbsp;&nbsp;&nbsp; Math.random()//范围是[0,1)</p><p>&nbsp;&nbsp;&nbsp; Math.random()*40+60;//取60到99的成绩</p><p>&nbsp;&nbsp;&nbsp; Random方法：范围是[0,1)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Randomran &nbsp;= new Random();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(inti=0;i&lt;10;i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intscore = ran.nextInt(41)+60;//从60到100</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(score);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><h3 id="10、Date方法"><a href="#10、Date方法" class="headerlink" title="10、Date方法"></a>10、Date方法</h3><p>SimpleDateFormat类：改变时间的格式</p><p>SimpleDateFormatsdf = new SimpleDateFormat(“yyyy/MM/dd HH:mm:ss”);</p><p>Datedate = new Date();</p><p>//将日期格式转换成指定的字符串</p><p>Stringtime = sdf.format(date);</p><p>System.out.println(time);//现在的时间以yyyy/MM/dd HH:mm:ss格式输出</p><p>&nbsp;</p><p>//将格式化的字符串转换成日期对象</p><p>Datedate = sdf.parse(“1995/07/12 03:00:00”);</p><p>System.out.println(date);</p><p>&nbsp;</p><p>TimeZone（）设置时区</p><p>TimeZonetime=TimeZone.getTimeZone(“America/Los_Angeles”);</p><p>&nbsp;&nbsp;&nbsp; Calendar&nbsp;c2=Calendar.getInstance(time,Locale.US);</p><p>&nbsp;&nbsp;&nbsp; Date d=c2.getTime();</p><p>&nbsp;</p><p>GregorianCalendar单独获取年、月、日</p><p>GregorianCalendar gc =newGregorianCalendar(2017,3,5);</p><p>&nbsp;&nbsp;&nbsp; System.out.println(gc.get(Calendar.MONTH));</p><p>&nbsp;</p><p>System.currentTimeMillis();通常用于循环运算的时间</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long startTime = System.currentTimeMillis();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(){}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; longendTime = System.currentTimeMillis();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; longtime = endTime- startTime//计算出运算的时间</p><p>&nbsp;</p><h2 id="集合："><a href="#集合：" class="headerlink" title="集合："></a>集合：</h2><h3 id="1、集合和数组的区别："><a href="#1、集合和数组的区别：" class="headerlink" title="1、集合和数组的区别："></a>1、集合和数组的区别：</h3><p>&nbsp;&nbsp;&nbsp; 数组：可以包含基本数据类型或者引用数据类型的对象，数据定长的，访问较快</p><p>&nbsp;&nbsp;&nbsp; 集合：只能包含引用数据类型的对象，不定长。</p><h3 id="2、集合分类："><a href="#2、集合分类：" class="headerlink" title="2、集合分类："></a>2、集合分类：</h3><p>&nbsp;&nbsp;&nbsp; Set:集&nbsp;无序，不重复，父接口为Collection</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add（）;添加元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addAll（Collection）;添加子集合</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains（）;是否包括元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; containsAll（）;是否包含子集合</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; isEmpty();Boolean判断集合长度是否为0</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; remove（）;移除元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; removeAll（）;移除一个子集合</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; size（）;集合的大小</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toArray（）;将集合转换成数据</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set集合的遍历&nbsp; Iterator 迭代器</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Setset = new HashSet();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Iteratorit = set.iterator();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while(it.hasNext()){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Objectobj = it.next();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(obj);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set集合的遍历&nbsp; 增强for循环</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(Object obj:set){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(obj);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HashSet和TreeSet的区别：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HashSet：内部对象散列存取，顺序和输入的顺序不同</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TreeSet：元素会进行升序排序（元素是可比较的），顺序和输入的顺序也不同</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp; List:列表&nbsp;有序，重复，父接口为Collection</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add（）;添加元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addAll（Collection）;添加子集合</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add（key，元素）;插入元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get（key）;获取元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; indexOf(元素);返回元素的索引值，如果没有则返回-1</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; remove(key);移除元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; removeAll（）;移除一个子集合</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set（key,元素）;修改元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toArray();转换成数组</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List集合的遍历&nbsp; 普通for循环</p><p>Listlist = new ArrayList();</p><p>for(inti;i&lt;list.size();i++){</p><p>&nbsp;&nbsp;&nbsp; Object obj = list.get(i);</p><p>&nbsp;&nbsp;&nbsp; System.out.println(obj);</p><p>}</p><p>List集合的遍历&nbsp; 增强for循环</p><p>for(Object obj:list){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(obj);</p><p>}</p><p>List集合的遍历&nbsp; Iterator 迭代器</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Iterator it = list.iterator();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while(it.hasNext()){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Objectobj = it.next();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(obj);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ArrayList和LinkedList区别：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ArrayList底层物理存储为线性的（数组的存储方式），查询效率高，删除、添加等操作效率比较低</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LinkedList底层物理存储为链表的，查询效率低，删除、添加效率高</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ArrayList和Vector区别：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 两者底层物理存储为线性的</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ArrayList：线程不安全，不同步的，数据不安全，效率比较高</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector：线程安全的，同步的，数据安全，效率比较低</p><p>&nbsp;</p><p>Map:字典 键值对存储 key唯一，value可重复</p><p>&nbsp;&nbsp;&nbsp; put(key,values);添加元素</p><p>&nbsp;&nbsp;&nbsp; putAll(map);添加集合</p><p>&nbsp;&nbsp;&nbsp; remove（key）;移除一对元素</p><p>&nbsp;&nbsp;&nbsp; size();集合长度</p><p>&nbsp;&nbsp;&nbsp; containkey(key);是否包含某个键</p><p>&nbsp;&nbsp;&nbsp; containvalue（value）;是否包含某个值</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp; Map集合的遍历 keySet()</p><p>&nbsp;&nbsp;&nbsp; Set set = map.keySet();</p><p>&nbsp;&nbsp;&nbsp; Iterator it = set.iterator();</p><p>&nbsp;&nbsp;&nbsp; while(it.hasNext){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object key = it.next();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object value = map.get(key);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(key+”:”+value);</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; Map集合的遍历 entrySet()</p><p>&nbsp;&nbsp;&nbsp; Iterator it = map.entrySet().iterator();</p><p>&nbsp;&nbsp;&nbsp; while(it.hasNext()){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Map.Entry entry = (Map.Entry)it.next();</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println(entry.getKey()+”:”+entry.getValue());</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp; HashMap和Hashtable的区别：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HashMap：键值对允许为null，线程不安全，不同步，效率比较高</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hashtable：键值对不允许为null，线程安全，同步，效率比价低</p><p>&nbsp;&nbsp;&nbsp; HashMap和TreeMap的区别：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HashMap：基于哈希，是无序的</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TreeMap：基于树型结构的，按照键升序排序</p><p>&nbsp;</p><h3 id="3、Collections类："><a href="#3、Collections类：" class="headerlink" title="3、Collections类："></a>3、Collections类：</h3><p>Collections.sort():只针对List集合，集合中的元素必须是可比较的，如果为引用类型，则必须实现Comparator、Compareable（常用）接口</p><p>Collections.shuffle（list）：打乱顺序</p><p>Collections.rotate（list,int i）:根据指定的长度，轮换指定列表中的长度</p><p>Collections.reverse(list):反转集合</p><p>&nbsp;</p><p>&nbsp;</p><h2 id="泛型：数据类型参数化"><a href="#泛型：数据类型参数化" class="headerlink" title="泛型：数据类型参数化"></a>泛型：数据类型参数化</h2><h3 id="1、public-void-arr-T-t1-T-t2"><a href="#1、public-void-arr-T-t1-T-t2" class="headerlink" title="1、public void arr(T t1,T t2){"></a>1、public<t> void arr(T t1,T t2){</t></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ttemp = t1;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t1= t2;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t2= temp;</p><p>}</p><h3 id="2、泛型：安全的，避免了数据类型转换的风险"><a href="#2、泛型：安全的，避免了数据类型转换的风险" class="headerlink" title="2、泛型：安全的，避免了数据类型转换的风险"></a>2、泛型：安全的，避免了数据类型转换的风险</h3><h3 id="3、泛型约束：entends：如果有多个约束则使用-amp-连接，约束只能有一个类，可以有多个接口"><a href="#3、泛型约束：entends：如果有多个约束则使用-amp-连接，约束只能有一个类，可以有多个接口" class="headerlink" title="3、泛型约束：entends：如果有多个约束则使用&amp;连接，约束只能有一个类，可以有多个接口"></a>3、泛型约束：entends：如果有多个约束则使用&amp;连接，约束只能有一个类，可以有多个接口</h3><h3 id="4、通配符？"><a href="#4、通配符？" class="headerlink" title="4、通配符？"></a>4、通配符？</h3><p>&nbsp;&nbsp;&nbsp; 上届通配符：？ extends A：表示A或者A的子类</p><p>&nbsp;&nbsp;&nbsp; 下届通配符：？ super A：表示A或者A的父类类型</p><p>&nbsp;&nbsp;&nbsp; List<string>list = new ArrayList<string>();</string></string></p><p>&nbsp;&nbsp;&nbsp; List&lt;?extends Object&gt; listobj = list;//成立</p><p>&nbsp;&nbsp;&nbsp; List<object>listobj = list;//不成立 在泛型中<string>和<object>是同级关系<p></p><p>&nbsp;</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="1、构造方法"><a href="#1、构造方法" class="headerlink" title="1、构造方法"></a>1、构造方法</h3><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Filefile1 =new File(“D:\a.txt”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File file2 =new File(“d:\UI”,”a.txt”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File file3 = new File(“D:\UI”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Filefile4 =new File(file3,”a.txt”);</p><h3 id="2、mkdirs-创建多层文件夹"><a href="#2、mkdirs-创建多层文件夹" class="headerlink" title="2、mkdirs()创建多层文件夹"></a>2、mkdirs()创建多层文件夹</h3><p>&nbsp;&nbsp;&nbsp; File file5 = new File(“D:\UI\aaa”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(!file5.exists()){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file5.mkdirs();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><h3 id="3、getAbsolutePath-打印文件路径"><a href="#3、getAbsolutePath-打印文件路径" class="headerlink" title="3、getAbsolutePath()打印文件路径"></a>3、getAbsolutePath()打印文件路径</h3><p>&nbsp; &nbsp;getPath()打印文件路径</p><p>&nbsp;&nbsp;&nbsp; System.out.println(file5.getAbsolutePath());//D:\UI\aaa</p><h3 id="4、getName-获取文件名-aaa"><a href="#4、getName-获取文件名-aaa" class="headerlink" title="4、getName()()获取文件名//aaa"></a>4、getName()()获取文件名//aaa</h3><h3 id="5、getParent-获取文件目录，不包含文件名-D-UI"><a href="#5、getParent-获取文件目录，不包含文件名-D-UI" class="headerlink" title="5、getParent()获取文件目录，不包含文件名//D:\UI"></a>5、getParent()获取文件目录，不包含文件名//D:\UI</h3><h3 id="6、isHidden-文件是否被隐藏-false"><a href="#6、isHidden-文件是否被隐藏-false" class="headerlink" title="6、isHidden()文件是否被隐藏//false"></a>6、isHidden()文件是否被隐藏//false</h3><h3 id="7、isDirectory-判断是否是文件夹-true"><a href="#7、isDirectory-判断是否是文件夹-true" class="headerlink" title="7、isDirectory()判断是否是文件夹//true"></a>7、isDirectory()判断是否是文件夹//true</h3><h3 id="8、isFile-判断是否是文件"><a href="#8、isFile-判断是否是文件" class="headerlink" title="8、isFile() 判断是否是文件"></a>8、isFile() 判断是否是文件</h3><h3 id="9、exists-判断是否存在"><a href="#9、exists-判断是否存在" class="headerlink" title="9、exists() 判断是否存在"></a>9、exists() 判断是否存在</h3><h3 id="10、newDate-file5-lastModified-获取最后一次修改的日期"><a href="#10、newDate-file5-lastModified-获取最后一次修改的日期" class="headerlink" title="10、newDate(file5.lastModified()) 获取最后一次修改的日期"></a>10、newDate(file5.lastModified()) 获取最后一次修改的日期</h3><h3 id="11、length-文件的字节数"><a href="#11、length-文件的字节数" class="headerlink" title="11、length() 文件的字节数"></a>11、length() 文件的字节数</h3><h3 id="12、file5-list-文件名的遍历"><a href="#12、file5-list-文件名的遍历" class="headerlink" title="12、file5.list() 文件名的遍历"></a>12、file5.list() 文件名的遍历</h3><p>&nbsp; String[]str =file5.list();</p><p>&nbsp; for(String s :str){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(s);</p><p>&nbsp;&nbsp;&nbsp; }// 3.doc</p><p>5.FEM</p><p>e.txt</p><h3 id="13、file5-listFiles-文件的遍历"><a href="#13、file5-listFiles-文件的遍历" class="headerlink" title="13、file5.listFiles() 文件的遍历"></a>13、file5.listFiles() 文件的遍历</h3><p>&nbsp;&nbsp;&nbsp; File[]files = file5.listFiles();&nbsp;&nbsp;</p><p>for(File f :files){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(f.isFile()){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(“文件”+f.getName()+”\t”+new Date(f.lastModified()));</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(“文件夹”+f.getName());</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }//文件3.docFri Feb 24 10:33:28 CST2017</p><p>文件5.FEM&nbsp;&nbsp; Fri Feb 24 10:33:37 CST 2017</p><p>文件e.txt&nbsp;&nbsp; Fri Feb 24 10:33:32 CST 2017</p><h3 id="14、File-listRoots-盘符的遍历"><a href="#14、File-listRoots-盘符的遍历" class="headerlink" title="14、File.listRoots(); 盘符的遍历"></a>14、File.listRoots(); 盘符的遍历</h3><p>&nbsp;&nbsp;&nbsp; File[] f1 = File.listRoots();</p><p>&nbsp;&nbsp;&nbsp; for(Filef :f1){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(f.toString());</p><p>&nbsp;&nbsp;&nbsp; }// C:\</p><p>D:\</p><p>&nbsp;</p><h2 id="文件IO流"><a href="#文件IO流" class="headerlink" title="文件IO流"></a>文件IO流</h2><h3 id="1、-字节流"><a href="#1、-字节流" class="headerlink" title="1、 字节流"></a>1、 字节流</h3><p>FileInputStream&nbsp;输入流 读文件</p><p>BufferedInputStream输入流读文件</p><p>&nbsp;</p><p>FileOutputStream输出流写入文件</p><p>BufferedOutputStream输出流写入文件</p><h3 id="2、字符流"><a href="#2、字符流" class="headerlink" title="2、字符流"></a>2、字符流</h3><p>FileReader输入流读文件</p><p>DataInputStream输入流 读文件</p><p>&nbsp;</p><p>FileWriter输出流 写入文件</p><p>DataOutputStream输出流 写入文件</p><p>&nbsp;</p><h3 id="3、FileInputStream-读取英文文件"><a href="#3、FileInputStream-读取英文文件" class="headerlink" title="3、FileInputStream 读取英文文件"></a>3、FileInputStream 读取英文文件</h3><p>&nbsp;&nbsp;&nbsp; FileInputStreamfis = new FileInputStream(“D:\UI\bbb.txt”);</p><p>&nbsp;&nbsp;&nbsp; intch = 0;</p><p>&nbsp;&nbsp;&nbsp; while((ch= fis.read()) != -1){ //read从此输入流中读取一个数据字节，返回值为int</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print((char)ch);</p><p>&nbsp;&nbsp;&nbsp; }</p><p>fis.close();//此程序不能读中文</p><h3 id="4、FileInputStream-读取中文文件"><a href="#4、FileInputStream-读取中文文件" class="headerlink" title="4、FileInputStream 读取中文文件"></a>4、FileInputStream 读取中文文件</h3><p>&nbsp;&nbsp;&nbsp; FileInputStreamfis = new FileInputStream(“D:\UI\bbb.txt”);</p><p>&nbsp;&nbsp;&nbsp; byte[]bt = new byte[1024]; //将字节读入字节数组</p><p>&nbsp;&nbsp;&nbsp; intlen = 0;</p><p>&nbsp;&nbsp;&nbsp; while((len= fis.read(bt))!=-1){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(newString(bt,0,len));</p><p>&nbsp;&nbsp;&nbsp; }</p><h3 id="5、FileOutputStream-写入文件"><a href="#5、FileOutputStream-写入文件" class="headerlink" title="5、FileOutputStream 写入文件"></a>5、FileOutputStream 写入文件</h3><p>&nbsp;&nbsp;&nbsp; //搭建管道</p><p>FileOutputStream fos = new FileOutputStream(“D:\UI\bbb.txt”);</p><p>&nbsp;&nbsp;&nbsp; //读写操作</p><p>&nbsp;&nbsp;&nbsp; fos.write(98);//相当于b</p><p>&nbsp;&nbsp;&nbsp; fos.write(‘a’);</p><p>&nbsp;&nbsp;&nbsp; String str = “ssdsdfsf”;&nbsp;&nbsp;&nbsp; //写入字符串</p><p>&nbsp;&nbsp;&nbsp; byte[] b = str.getBytes();</p><p>&nbsp;&nbsp;&nbsp; fos.write(b);</p><p>&nbsp;&nbsp;&nbsp; fos.flush();//强制性的刷新缓冲区</p><p>&nbsp;&nbsp;&nbsp; //关闭流</p><p>&nbsp;&nbsp;&nbsp; if(fos !=null){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fos.close();</p><p>&nbsp;&nbsp;&nbsp; }</p><h3 id="6、DataOutputStream-写入boolean、double等类型的文件"><a href="#6、DataOutputStream-写入boolean、double等类型的文件" class="headerlink" title="6、DataOutputStream 写入boolean、double等类型的文件"></a>6、DataOutputStream 写入boolean、double等类型的文件</h3><p>&nbsp;&nbsp;&nbsp; FileOutputStream fos = null;</p><p>&nbsp;&nbsp;&nbsp; DataOutputStream dos = null;</p><p>&nbsp;&nbsp;&nbsp; fos =new FileOutputStream(“D:\UI\bbb.txt”);</p><p>&nbsp;&nbsp;&nbsp; dos =new DataOutputStream(fos);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; dos.writeBoolean(true);</p><p>&nbsp;&nbsp;&nbsp; dos.write(‘a’);</p><p>&nbsp;&nbsp;&nbsp; dos.writeDouble(12.34);</p><p>&nbsp;&nbsp;&nbsp; for(inti=0;i&lt;10;i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doubled = Math.random();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dos.writeDouble(d);</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; dos.flush();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; dos.close();</p><p>&nbsp;&nbsp;&nbsp; fos.close();</p><h3 id="7、DataInputStream读取boolean、double等类型的文件"><a href="#7、DataInputStream读取boolean、double等类型的文件" class="headerlink" title="7、DataInputStream读取boolean、double等类型的文件"></a>7、DataInputStream读取boolean、double等类型的文件</h3><p>&nbsp;&nbsp;&nbsp; FileInputStream fis =null;</p><p>&nbsp;&nbsp;&nbsp; DataInputStream dis = null;</p><p>&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; fis =new FileInputStream(“D:\UI\bbb.txt”);</p><p>&nbsp;&nbsp;&nbsp; dis =new DataInputStream(fis);</p><p>&nbsp;&nbsp;&nbsp; booleanbool =dis.readBoolean();</p><p>&nbsp;&nbsp;&nbsp; System.out.println(bool);// true</p><p>&nbsp;&nbsp;&nbsp; for(inti=0;i&lt;10;i++){</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; doubleb =dis.readDouble();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(b+”\t”);</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; dis.close();</p><p>&nbsp;&nbsp;&nbsp; fis.close();</p><p>&nbsp;&nbsp;&nbsp; // -6.414939283240485E-86&nbsp;&nbsp;</p><p>4.7384486223731214E285&nbsp;</p><p>7.602269187305488E-298&nbsp;</p><p>-1.4027415471626017E-278&nbsp;&nbsp;&nbsp;</p><p>9.32553721042958E-38&nbsp;&nbsp;&nbsp;</p><p>-1.0852988920338364E40&nbsp;</p><p>4.6544251087746895E49&nbsp;&nbsp;</p><p>1.0777059597027002E40&nbsp;&nbsp;</p><p>4.954807472569955E232&nbsp;&nbsp;</p><p>4.957881657894938E232&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><h3 id="8、序列化和反序列化"><a href="#8、序列化和反序列化" class="headerlink" title="8、序列化和反序列化"></a>8、序列化和反序列化</h3><p>&nbsp;&nbsp;&nbsp; 序列化：将对象的数据存储到文件 ObjectOutputStream</p><p>&nbsp;&nbsp;&nbsp; 反序列化：将文件中的数据重新读到对象 ObjectInputStream</p><p>&nbsp;&nbsp;&nbsp; 例题：在程序中创建一个Student类型的对象，并把对象信息保存到d:\io\student.txt文件中，然后再从文件中把Student对象的信息读出显示在控制台上。</p><p>&nbsp;&nbsp;&nbsp; //先建立Student类</p><p>publicclassStudentimplementsSerializable {//编写一个可序列化的类&nbsp; implements Serializable</p><p>&nbsp;&nbsp;&nbsp; privateintid;</p><p>&nbsp;&nbsp;&nbsp; private String name;</p><p>&nbsp;&nbsp;&nbsp; private String birth;</p><p>&nbsp;&nbsp;&nbsp; public Student(intid, Stringname, String birth) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.id = id;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.name = name;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.birth = birth;</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; @Override</p><p>&nbsp;&nbsp;&nbsp; public String toString() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; returnid+””+name+” “+birth;</p><p>&nbsp;&nbsp;&nbsp; }</p><p>}</p><p>//再进行序列化，即将Student对象写入文件，直接抛出异常范例</p><p>publicclass SObjectOutputStreamTest throws IOException{</p><p>&nbsp;&nbsp;&nbsp; publicstaticvoid main(String[] args) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Students1 = new Student(1,”we”,”1987-3-4”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Students2 = new Student(2,”you”,”1988-3-9”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileOutputStreamfos = null;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ObjectOutputStreamoos = null;</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fos = new FileOutputStream(“D:\io\student.txt”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oos = new ObjectOutputStream(fos);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oos.writeObject(s1);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oos.writeObject(s2);</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oos.close();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fos.close();</p><p>&nbsp;&nbsp;&nbsp; }</p><p>}</p><p>//进行反序列化，将文件中的语句读出到控制台，用try catch抓住异常范例</p><p>publicclass SObjectInputStreamTest {</p><p>&nbsp;&nbsp;&nbsp; publicstaticvoid main(String[]args) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileInputStream fis = null;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ObjectInputStream ois = null;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fis =new FileInputStream(“D:\io\student.txt”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ois =new ObjectInputStream(fis);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student s1 = (Student)ois.readObject();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student s2 = (Student)ois.readObject();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s1.toString());</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s2.toString());</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (FileNotFoundException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }catch (IOException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }catch (ClassNotFoundException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }finally{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(ois!=null){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ois.close();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }catch (IOException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(fis!=null){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fis.close();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}catch (IOException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }</p><p>}</p><p>&nbsp;</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="1、-进程：一个应用程序的一次运行，包含多线程"><a href="#1、-进程：一个应用程序的一次运行，包含多线程" class="headerlink" title="1、 进程：一个应用程序的一次运行，包含多线程"></a>1、 进程：一个应用程序的一次运行，包含多线程</h3><p>多线程：一个应用程序运行过程中的某些独立的片段</p><h3 id="2、-进程与线程的区别（优缺点）"><a href="#2、-进程与线程的区别（优缺点）" class="headerlink" title="2、 进程与线程的区别（优缺点）"></a>2、 进程与线程的区别（优缺点）</h3><p>进程：进程间切换耗费系统资源，数据安全（独立的代码和数据空间）</p><p>线程：线程间切换系统耗费比较小，数据不安全（共享代码和数据空间）</p><h3 id="3、-编写线程（掌握）"><a href="#3、-编写线程（掌握）" class="headerlink" title="3、 编写线程（掌握）"></a>3、 编写线程（掌握）</h3><p>a． 继承Thread类</p><p>publicclass ThreadTest1 {</p><p>publicstaticvoid main(String[] args) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ThreadDemotd = new ThreadDemo();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; td.start();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(inti=0;i&lt;1000;i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(“the main is:”+i);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>}</p><p>&nbsp;&nbsp;&nbsp; }</p><p>publicclass ThreadDemoextends Thread {</p><p>&nbsp;&nbsp;&nbsp; @Override</p><p>&nbsp;&nbsp;&nbsp; publicvoid run() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(inti=0;i&lt;1000;i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(“the run is:”+i);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }</p><p>}</p><p>b． 实现Runnable接口（推荐，因为java类和类是单继承的）</p><p>publicclass RunnableTest {</p><p>&nbsp;&nbsp;&nbsp; publicstaticvoid main(String[] args) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RunnableDemord = new RunnableDemo();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Threadthread = new Thread(rd);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thread.start();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(inti=0;i&lt;1000;i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(“the main is:”+i);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(500);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }</p><p>}</p><p>&nbsp;</p><p>publicclass RunnableDemoimplementsRunnable{</p><p>&nbsp;&nbsp;&nbsp; @Override</p><p>&nbsp;&nbsp;&nbsp; publicvoid run() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(inti=0;i&lt;1000;i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(“the run is:”+i);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(500);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }</p><p>}</p><h3 id="4、CPU调度"><a href="#4、CPU调度" class="headerlink" title="4、CPU调度"></a>4、CPU调度</h3><p>&nbsp;&nbsp;&nbsp; 抢占式</p><p>&nbsp;&nbsp;&nbsp; 轮时间片</p><h3 id="5、让线程从运行状态进入到阻塞状态"><a href="#5、让线程从运行状态进入到阻塞状态" class="headerlink" title="5、让线程从运行状态进入到阻塞状态"></a>5、让线程从运行状态进入到阻塞状态</h3><p>Thread.yield();//暂停</p><p>Thread.sleep(500);//休眠</p><p>join();//在A线程中加入B线程，待B线程运行完后，再运行A线程</p><h3 id="6、线程其他方法"><a href="#6、线程其他方法" class="headerlink" title="6、线程其他方法"></a>6、线程其他方法</h3><p>&nbsp;&nbsp;&nbsp; setName（）：给线程起名字，默认的名字Thread-X；x从0开始</p><p>getName（）：得到线程的名字</p><p>Thread.currentThread().getName()：得到当前运行线程的名字</p><p>&nbsp;&nbsp;&nbsp; setPriority();设置线程的优先级数值</p><p>getPriority();获得线程的优先级数值</p><p>setDaemon(true);设置为守护线程</p><h3 id="7、用户线程和守护线程的区别"><a href="#7、用户线程和守护线程的区别" class="headerlink" title="7、用户线程和守护线程的区别"></a>7、用户线程和守护线程的区别</h3><p>&nbsp;&nbsp;&nbsp; 用户线程（前台线程）：必须执行完毕</p><p>&nbsp;&nbsp;&nbsp; 守护线程（精灵线程、后台线程）：线程体执行完毕也可，执行不完毕也可以，例如垃圾回收</p><h3 id="8、线程同步："><a href="#8、线程同步：" class="headerlink" title="8、线程同步："></a>8、线程同步：</h3><p>&nbsp;&nbsp;&nbsp; 加锁同步：一个对象只能有一把锁</p><p>&nbsp;&nbsp;&nbsp; 语句加锁 synchronized（对象）{}：可以对本类对象（this）和其他类对象（new 类）加锁；某个方法中的某些句子加锁，无法得知哪些方法是被synchronized保护的</p><p>&nbsp;&nbsp;&nbsp; 方法加锁 synchronized void methodA（）{}：只能对本类对象加锁；整个方法的所有语句加锁；可以显示得知方法是被synchronized保护的</p><h3 id="9、死锁：两个线程，彼此在等待对方占据的锁"><a href="#9、死锁：两个线程，彼此在等待对方占据的锁" class="headerlink" title="9、死锁：两个线程，彼此在等待对方占据的锁"></a>9、死锁：两个线程，彼此在等待对方占据的锁</h3><p>&nbsp;&nbsp;&nbsp; 锁的几种归还方式：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a．基本上执行完同步的程序代码后，锁会自动归还</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b．用break语句跳出同步的语句块，不过这对于写在方法声明的synchronized没有作用</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c．遇到return语句</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d．遇到了异常</p><h3 id="10、线程的生命周期"><a href="#10、线程的生命周期" class="headerlink" title="10、线程的生命周期"></a>10、线程的生命周期</h3><p>&nbsp;&nbsp;&nbsp;</p><p>&nbsp;</p><h2 id="网络编程（java-net）"><a href="#网络编程（java-net）" class="headerlink" title="网络编程（java.net）"></a>网络编程（java.net）</h2><h3 id="1、七层协议："><a href="#1、七层协议：" class="headerlink" title="1、七层协议："></a>1、七层协议：</h3><p>&nbsp;&nbsp;&nbsp;</p><h3 id="2、两台电脑之间的通信"><a href="#2、两台电脑之间的通信" class="headerlink" title="2、两台电脑之间的通信"></a>2、两台电脑之间的通信</h3><p>&nbsp;&nbsp;&nbsp; ip：ipv4（32位）、ipv6（128位）</p><p>&nbsp;&nbsp;&nbsp; 端口:1521（oracle）、8080（Tomcat默认的端口）、21（ftp）、80（默认的）</p><p>&nbsp;&nbsp;&nbsp; 协议：</p><p>UDP：传输层，用户数据的协议，无连接的协议，不可靠的，不能够准确到达，效率比较高，适用于数据量比较大并且允许出错的，比如网络视频</p><p>TCP/IP:传输层 ，有连接的协议，可靠的、准确的到达，效率比较低</p><p>http：https：ftp等在应用层</p><p>&nbsp;&nbsp;&nbsp; http协议：明文无状态的</p><p>&nbsp;&nbsp;&nbsp; https：密文</p><h3 id="3、客户端和服务器端"><a href="#3、客户端和服务器端" class="headerlink" title="3、客户端和服务器端"></a>3、客户端和服务器端</h3><p>&nbsp;&nbsp;&nbsp; 基于UDP的</p><p>客户端：</p><p>Socket client = new Socket(“10.25.116.222”,8088);</p><p>&nbsp;&nbsp;&nbsp; 服务器端：&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ServerSocketserver =ServerSocket(8088);ji</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Socket s =server.accept();</p><h3 id="4、-端口号范围是0-65535，用户普通网络程序用1024以上"><a href="#4、-端口号范围是0-65535，用户普通网络程序用1024以上" class="headerlink" title="4、 端口号范围是0-65535，用户普通网络程序用1024以上"></a>4、 端口号范围是0-65535，用户普通网络程序用1024以上</h3><h3 id="5、-InetAddress此类表示互联网协议ip地址"><a href="#5、-InetAddress此类表示互联网协议ip地址" class="headerlink" title="5、 InetAddress此类表示互联网协议ip地址"></a>5、 InetAddress此类表示互联网协议ip地址</h3><p>InetAddress address = InetAddress.getByName(“主机名”);</p><h3 id="6、getHostName（）获取此IP地址的主机名"><a href="#6、getHostName（）获取此IP地址的主机名" class="headerlink" title="6、getHostName（）获取此IP地址的主机名"></a>6、getHostName（）获取此IP地址的主机名</h3><p>getHostAddress（）获取IP地址字符串</p><p>getByName()通过主机名获取ip地址</p><p>getLocalPort()获取本程序所用接口</p><p>&nbsp;</p><h2 id="JAVA7新特性"><a href="#JAVA7新特性" class="headerlink" title="JAVA7新特性"></a>JAVA7新特性</h2><h3 id="1、数值型的数据赋值可以使用下划线-增加可读性"><a href="#1、数值型的数据赋值可以使用下划线-增加可读性" class="headerlink" title="1、数值型的数据赋值可以使用下划线_ 增加可读性"></a>1、数值型的数据赋值可以使用下划线_ 增加可读性</h3><p>&nbsp;&nbsp;&nbsp; 不能写在小数点后;</p><p>&nbsp;&nbsp;&nbsp; 不能在数值型数据的开始</p><p>不能在数值型数据的最后添加</p><p>Doublepi = 3.1415_9265</p><p>Intbillion = 1_000_000_000</p><h3 id="2、-可以声明n进制数据"><a href="#2、-可以声明n进制数据" class="headerlink" title="2、 可以声明n进制数据"></a>2、 可以声明n进制数据</h3><p>Int i1= 0b0100;//4二进制前方放0b</p><p>Inti2 = 07; //7八进制前方放0</p><p>Inti3 = 0x00ad;//十六进制前方放0x</p><h3 id="3、switch-表达式："><a href="#3、switch-表达式：" class="headerlink" title="3、switch:表达式："></a>3、switch:表达式：</h3><p>&nbsp;&nbsp;&nbsp;jdk1.7以下byte、short、char、int；</p><p>jdk1.7以上在上面基础上加上String</p><h3 id="4、try（IO流）"><a href="#4、try（IO流）" class="headerlink" title="4、try（IO流）{"></a>4、try（IO流）{</h3><p>Stringstr=br.readLine();</p><p>}catch (ArithmeticException | IOException e) {//catch里可以有多个异常类，不能是父子关系</p><p>&nbsp;&nbsp;&nbsp;&nbsp; e.printStackTrace();</p><p>}//不用关闭流了，自动资源管理器</p><h3 id="5、泛型"><a href="#5、泛型" class="headerlink" title="5、泛型"></a>5、泛型</h3><p>&nbsp;&nbsp;&nbsp; List<string>list = new List<string>();//jdk1.7以下</string></string></p><p>&nbsp;&nbsp;&nbsp; List<string>list = new List&lt; &gt;();&nbsp; //jdk1.7以上</string></p><h3 id="6、新加G1垃圾回收器-提高效率"><a href="#6、新加G1垃圾回收器-提高效率" class="headerlink" title="6、新加G1垃圾回收器 提高效率"></a>6、新加G1垃圾回收器 提高效率</h3><h3 id="7、NIO2"><a href="#7、NIO2" class="headerlink" title="7、NIO2"></a>7、NIO2</h3><p>&nbsp;&nbsp;&nbsp; Files.copy(Paths.get(文件一),Paths.get(文件二));//直接复制文件</p><p>&nbsp;&nbsp;&nbsp; File.createFile();//创建新文件</p><p>&nbsp;&nbsp;&nbsp; File.move();//移动</p><p>&nbsp;&nbsp;&nbsp; File.delete();</p><p>&nbsp;&nbsp;&nbsp; //用WatchService类型实现文件监控</p><p>&nbsp;&nbsp;&nbsp; WatchServicewatchService = FileSystems.getDefault().newWatchService();</p><p>&nbsp;</p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="1、编写jdbc程序的步骤："><a href="#1、编写jdbc程序的步骤：" class="headerlink" title="1、编写jdbc程序的步骤："></a>1、编写jdbc程序的步骤：</h3><p>&nbsp;&nbsp; 1）添加数据库的驱动jar包&nbsp;ojbc5.jar或者ojdbc6.jar或者classes12.jar</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 工程名右击—Build Path—Add External Archives—数据库安装路径—jdbc-ojdbc6.jar</p><p>&nbsp;&nbsp; 2）创建驱动类对象&nbsp; OracleDriver对象</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建反射机制</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class.forName(“oracle.jdbc.driver.OracleDriver”);</p><p>&nbsp;&nbsp; 3）连接数据库&nbsp; Connection</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stringutl = “jdbc:oracle:thin:@YLMF123-3131857:1521:orcl”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stringuser = “scott”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stringpassword = “tiger”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connectionconn = DriverManager.getConnection(url,user,password);</p><p>&nbsp;&nbsp; 4）操作数据库&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //第一种方法Statement会引起注入，不推荐使用</p><p>String sql = “select deptno,dname,loc from dept”;</p><p>Statement stmt = conn.createStatement();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ResultSet rs =stmt.executeQuery(sql);//发送sql语句到数据库，然后将查询到的结果返回到ResultSet</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //int I = stmt.executeUpdate(sql);//查询影响的行数</p><p>while(rs.next()){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intdeptno =rs.getInt(1);//列的索引从1开始计</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String dname =rs.getString(2);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String loc =rs.getString(3);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(deptno+”\t”+dname+”\t”+loc);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //第二种方法PreparedStatement防止注入 推荐使用</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String sql = “insert into dept(deptno,dname,loc) values(?,?,?)”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pstmt = conn.prepareStatement(sql);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intdeptno = 35;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String dname = “sdfs”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String loc = “北京”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pstmt.setInt(1, deptno);//第一个问号放deptno</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pstmt.setString(2, dname);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pstmt.setString(3, loc);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pstmt.executeUpdate();//执行删除、插入、修改语句，executeQuery执行查询语句</p><p>5）关闭数据库</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.close();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stmt.close();</p><p>&nbsp;&nbsp;&nbsp; conn.close();</p><h3 id="2、批处理："><a href="#2、批处理：" class="headerlink" title="2、批处理："></a>2、批处理：</h3><p>&nbsp;&nbsp; stmt.addBatch(sql1);</p><p>&nbsp;&nbsp;&nbsp; stmt.addBatch(sql2);//可以执行多句sql语句</p><p>&nbsp;&nbsp; executeBatch();//执行</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String sql=”insert intodept(deptno,dname,loc) values(?,?,?)”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pstmt=conn.prepareStatement(sql);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pstmt.setInt(1, 51);</p><p>&nbsp;&nbsp;&nbsp; pstmt.setString(2, “电信部”);</p><p>&nbsp;&nbsp;&nbsp; pstmt.setString(3, “上海”);</p><p>&nbsp;&nbsp;&nbsp; pstmt.addBatch();</p><p>&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; pstmt.setInt(1, 52);</p><p>&nbsp;&nbsp;&nbsp; pstmt.setString(2, “实施部”);</p><p>&nbsp;&nbsp;&nbsp; pstmt.setString(3, “广州”);</p><p>&nbsp;&nbsp;&nbsp; pstmt.addBatch();</p><p>&nbsp;</p><p>pstmt.executeBatch();</p><h3 id="3、事务"><a href="#3、事务" class="headerlink" title="3、事务"></a>3、事务</h3><p>&nbsp;&nbsp;&nbsp; conn.setAutoCommit（false）：设置为手动提交事务</p><p>&nbsp;&nbsp; conn.commit()：提交</p><p>&nbsp; &nbsp; conn.rollback()：回滚,catch里面</p><h3 id="4、元数据"><a href="#4、元数据" class="headerlink" title="4、元数据"></a>4、元数据</h3><p>&nbsp;&nbsp;&nbsp; DatabaseMetaData：数据库的元数据</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DatabaseMetaDatadmd = conn.getMetaData();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dmd.getUserName();//获得数据库名称</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dmd.getURL();//获得接口名jdbc:oracle:thin:@YLMF123-2141651:1521:orcl&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; dmd.getDriverName();//当前驱动Oracle JDBC driver</p><p>&nbsp;&nbsp;&nbsp; ParameterMetaData：参数的元数据</p><p>&nbsp;&nbsp;&nbsp; ResultSetMetaData：结果集的元数据</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ResultSetMetaDatarmd = rs.getMetaData();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intcount = rmd.getColumnCount();//获取结果集有多少列</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; for(int i=0;i&lt;count;i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(“列标题”+rmd.getColumnLable(i)+”数据类型”+rmd.getColumnTypeName(i));</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><h3 id="5、DAO"><a href="#5、DAO" class="headerlink" title="5、DAO:"></a>5、DAO:</h3><p>&nbsp;1)实体类：一个对象相当于数据库表中的一行</p><p>&nbsp;&nbsp;&nbsp; privateintdeptno;</p><p>&nbsp;&nbsp;&nbsp; public Dept() {}</p><p>&nbsp;&nbsp;&nbsp; publicint getDeptno() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; returndeptno;</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; publicvoid setDeptno(intdeptno) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.deptno =deptno;</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; @Override</p><p>&nbsp;&nbsp;&nbsp; public String toString() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return”Dept [deptno=” +deptno +”,dname=” +dname +”, loc=” +loc +”]”;</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;2)操作接口：可扩展</p><p>&nbsp;&nbsp;&nbsp; publicinterface DeptDao {</p><p>&nbsp;&nbsp;&nbsp; void insertDept(Dept dept);</p><p>&nbsp;&nbsp;&nbsp; void updateDept(Dept dept);</p><p>&nbsp;&nbsp;&nbsp; void deleteDept(intdeptno);</p><p>&nbsp;&nbsp;&nbsp; List<dept>&nbsp; getAllDepts();</dept></p><p>&nbsp;&nbsp;&nbsp; DeptgetDeptByDeptno(intdeptno);</p><p>}</p><p>&nbsp;3)操作类：</p><p>&nbsp;&nbsp;&nbsp; publicclass DeptDaoImplimplementsDeptDao {</p><p>&nbsp;&nbsp;&nbsp; @Override</p><p>&nbsp;&nbsp;&nbsp; publicvoid insertDept(Dept dept) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection conn = null;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PreparedStatement pstmt = null;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conn = DbUtils.getConnection();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String sql =”insert into dept(deptno,dname,loc)values(?,?,?)”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstmt =conn.prepareStatement(sql);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstmt.setInt(1, dept.getDeptno());</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstmt.setString(2, dept.getDname());</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstmt.setString(3, dept.getLoc());</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstmt.executeUpdate();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (SQLException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }finally{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DbUtils.closeStatement(pstmt);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DbUtils.closeConnection(conn);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;4)工具类：将重复的代码包装成工具类</p><p>&nbsp;&nbsp;&nbsp; publicclass DbUtils {</p><p>&nbsp;&nbsp;&nbsp; privatestaticfinal StringURL =”jdbc:oracle:thin:@YLMF123-2141651:1521:orcl”;</p><p>&nbsp;&nbsp;&nbsp; privatestaticfinal StringUSER =”scott”;</p><p>&nbsp;&nbsp;&nbsp; privatestaticfinal StringPASSWORD=”tiger”;</p><p>&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; private DbUtils(){}//构造方法</p><p>&nbsp;&nbsp;&nbsp; static{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class.forName(“oracle.jdbc.driver.OracleDriver”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (ClassNotFoundException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; publicstatic Connection getConnection(){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection conn = null;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conn = DriverManager.getConnection(URL,USER,PASSWORD);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (SQLException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; returnconn;</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; publicstaticvoid closeConnection(Connectionconn){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (conn !=null) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conn.close();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (SQLException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p></object></string></object></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 栈 </tag>
            
            <tag> 对象 </tag>
            
            <tag> 内存 </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抖音表白程序Python版，明人不说暗话，我喜欢你</title>
      <link href="2021/04/18/%E6%8A%96%E9%9F%B3%E8%A1%A8%E7%99%BD%E7%A8%8B%E5%BA%8FPython%E7%89%88%EF%BC%8C%E6%98%8E%E4%BA%BA%E4%B8%8D%E8%AF%B4%E6%9A%97%E8%AF%9D%EF%BC%8C%E6%88%91%E5%96%9C%E6%AC%A2%E4%BD%A0/"/>
      <url>2021/04/18/%E6%8A%96%E9%9F%B3%E8%A1%A8%E7%99%BD%E7%A8%8B%E5%BA%8FPython%E7%89%88%EF%BC%8C%E6%98%8E%E4%BA%BA%E4%B8%8D%E8%AF%B4%E6%9A%97%E8%AF%9D%EF%BC%8C%E6%88%91%E5%96%9C%E6%AC%A2%E4%BD%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p>动态的  自己下载运行<br><a href="https://imgtu.com/i/cIyTpt"><img src="https://z3.ax1x.com/2021/04/18/cIyTpt.png" alt="cIyTpt.png"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -*-  import sysfrom PyQt5 import QtWidgetsfrom PyQt5.QtGui import QFont,QIcon#QtWidgets不包含QFont必须调用QtGuifrom PyQt5 import QtGui,QtCoreimport random class MessageBox(QtWidgets.QWidget):#继承自父类QtWidgets.QWidget    CloseAllowed=0    def __init__(self,parent = None):#parent = None代表此QWidget属于最上层的窗口,也就是MainWindows.        QtWidgets.QWidget.__init__(self)#因为继承关系，要对父类初始化#通过super初始化父类，__init__()函数无self，若直接QtWidgets.QWidget.__init__(self)，括号里是有self的        self.setGeometry(300, 300, 800,800)  # setGeometry()方法完成两个功能--设置窗口在屏幕上的位置和设置窗口本身的大小。它的前两个参数是窗口在屏幕上的x和y坐标。后两个参数是窗口本身的宽和高        #self.resize(1000, 500)  # 设置窗体大小，本行可有可无。        self.center()#自定义一个居中的函数        self.setFixedSize(self.width(),self.height());#PyQT禁止调整窗口大小和窗口最大化按钮        #self.setWindowFlags(QtCore.Qt.WindowMinimizeButtonHint)#PyQT禁止窗口最大化按钮和关闭按钮        self.setWindowTitle(u'表白神器 by Python学习群：125240963')  # 仅仅设置窗体标题，不设置位置。        self.setWindowIcon(QIcon('rose.png'))  # 调用QIcon构造函数时，我们需要提供要显示的图标的路径(相对或绝对路径)。同时注意：使用QIcon类型必须导入此模块from PyQt5.QtGui import QIcon        self.setToolTip(u'Python学习群：125240963获取源码')#调用setToolTip()方法,该方法接受富文本格式的参数,css之类。        QtWidgets.QToolTip.setFont(QFont('华文楷体', 10))#设置字体以及字体大小        self.label1 = QtWidgets.QLabel(u'&lt;b&gt;小姐姐，观察你很久了！&lt;/b&gt;', self)  # 建立一个标签        self.label1.move(150, 40)  # 使此标签移动到这个部件(260,40)的位置        self.label1.setFont(QFont("Timers", 20));#设置字体与字体大小        self.label2= QtWidgets.QLabel(u'&lt;b&gt;做我女朋友好不好?&lt;/b&gt;', self)  # 建立一个标签        self.label2.move(150, 100)  # 使此标签移动到这个部件(260,100)的位置        self.label2.setFont(QFont("Timers", 20));#设置字体与字体大小         #Qt中提供的调色板QPalette类就是专门用于管理控件的外观显示。QPalette类相当于对话框或控件的调色板，管理着控件和窗体的所有颜色。        #每个窗体和控件都包含一个QPalette对象，在显示时，对其做相应的设置即可        self.window_pale = QtGui.QPalette()#实例化QPalette类        self.window_pale.setBrush(self.backgroundRole(), QtGui.QBrush(QtGui.QPixmap("biu.jpg")))#打开图片        self.setPalette(self.window_pale)#应用背景色        # setStyleSheet来设置图形界面的外观         self.buttonOK = QtWidgets.QPushButton(u'同意',self)  # 因为需要增加按钮，所以我们引入了QPushButton类,该按钮是QPushButton类的一个实例。构造函数的第一个参数是按钮的标签。第二个参数是父窗口小部件。父窗口小部件是示例窗口小部件，它是通过QWidget继承的        self.buttonOK.setFocusPolicy(QtCore.Qt.NoFocus)#按钮无焦点        # Qt::TabFocus 0x1  接受Tab键焦点        # Qt::ClickFocus 0x2 接受鼠标单击做焦点        # Qt::StrongFocus TabFocus | ClickFocus | 0x8 接受Tab键和鼠标单击做焦点        # Qt::WheelFocus StrongFocus | 0x4  滑轮作为焦点选中事件        # Qt::NoFocus 0 不接受焦点        self.buttonOK.move(50, 700)  # move()方法来指定部件的放置坐标，坐标的顶点就是窗口的左上角        self.buttonOK.clicked.connect(self.showDialogOK)         self.buttonE = QtWidgets.QPushButton(u'考虑考虑',self)  # 因为需要增加按钮，所以我们引入了QPushButton类,该按钮是QPushButton类的一个实例。构造函数的第一个参数是按钮的标签。第二个参数是父窗口小部件。父窗口小部件是示例窗口小部件，它是通过QWidget继承的        self.buttonE.setFocusPolicy(QtCore.Qt.NoFocus)  # 按钮无焦点        # Qt::TabFocus 0x1  接受Tab键焦点        # Qt::ClickFocus 0x2 接受鼠标单击做焦点        # Qt::StrongFocus TabFocus | ClickFocus | 0x8 接受Tab键和鼠标单击做焦点        # Qt::WheelFocus StrongFocus | 0x4  滑轮作为焦点选中事件        # Qt::NoFocus 0 不接受焦点        self.buttonE.move(330, 700)  # move()方法来指定部件的放置坐标，坐标的顶点就是窗口的左上角        self.buttonE.clicked.connect(self.showDialogEE)         self.buttonNO = QtWidgets.QPushButton(u'拒绝',self)  # 因为需要增加按钮，所以我们引入了QPushButton类,该按钮是QPushButton类的一个实例。构造函数的第一个参数是按钮的标签。第二个参数是父窗口小部件。父窗口小部件是示例窗口小部件，它是通过QWidget继承的        self.buttonNO.setFocusPolicy(QtCore.Qt.NoFocus)  # 按钮无焦点        # Qt::TabFocus 0x1  接受Tab键焦点        # Qt::ClickFocus 0x2 接受鼠标单击做焦点        # Qt::StrongFocus TabFocus | ClickFocus | 0x8 接受Tab键和鼠标单击做焦点        # Qt::WheelFocus StrongFocus | 0x4  滑轮作为焦点选中事件        # Qt::NoFocus 0 不接受焦点        self.buttonNO.move(610, 700)  # move()方法来指定部件的放置坐标，坐标的顶点就是窗口的左上角        self.buttonNO.clicked.connect(self.showDialogNO)        def showDialogOK(self):        QtWidgets.QMessageBox.information(self, "欧耶", "爱你,么么么么么么么哒～～～", QtWidgets.QMessageBox.Ok)        self.CloseAllowed = 1     def showDialogEE(self):        QtWidgets.QMessageBox.information(self, "别纠结了", "你完了，你妈让你嫁给我", QtWidgets.QMessageBox.Ok)        QtWidgets.QMessageBox.information(self, "别纠结了", "你爸也是这么说的", QtWidgets.QMessageBox.Ok)        QtWidgets.QMessageBox.information(self, "别纠结了", "你奶奶也让你嫁给我", QtWidgets.QMessageBox.Ok)        QtWidgets.QMessageBox.information(self, "别纠结了", "你哥哥也同意了，你全家都同意", QtWidgets.QMessageBox.Ok)        QtWidgets.QMessageBox.information(self, "别纠结了", "你闺蜜说嫁给我没错", QtWidgets.QMessageBox.Ok)        QtWidgets.QMessageBox.information(self, "别纠结了", "你爸说不同意就打你", QtWidgets.QMessageBox.Ok)        QtWidgets.QMessageBox.information(self, "别纠结了", "接受现实吧，我会对你好的", QtWidgets.QMessageBox.Ok)        QtWidgets.QMessageBox.information(self, "别纠结了", "你都是我的人了", QtWidgets.QMessageBox.Ok)     def showDialogNO(self):        self.q = random.randint(0, 650)  # 在0-650内生成随机的X坐标        self.w = random.randint(150, 650)  # 在150-650内生成随机的Y坐标        self.buttonNO.move(self.q, self.w)      #enterEvent事件PyQt自动运行,无需调用    # def enterEvent(self,event):#重写了鼠标的enterEvent事件，由于继承了窗口类，鼠标一进入主窗口便会出发此函数    #     self.q=random.randint(0,650)#在0-650内生成随机的X坐标    #     self.w=random.randint(150,650)#在150-650内生成随机的Y坐标    #     self.buttonNO.move(self.q,self.w) #当我们关闭一个窗口时，在PyQt中就会触发一个QCloseEvent的事件，正常情况下会直接关闭这个窗口，#但是我们不希望这样的事情发生，所以我们需要重新定义QCloseEvent，函数名称为closeEvent不可变    def closeEvent(self,event):#函数名固定不可变         if self.CloseAllowed==1:            event.accept()#关闭窗口        else:            QtWidgets.QMessageBox.information(self, "未作回应", "小姐姐,请不要逃避!", QtWidgets.QMessageBox.Ok)            event.ignore()#忽视点击X事件    def center(self):        screen=QtWidgets.QDesktopWidget().screenGeometry()#获取屏幕分辨率#QtWidgets.QDesktopWidget().screenGeometry()中QDesktopWidget()也有括号        size=self.geometry()#获取窗口尺寸        self.move((screen.width()-size.width())/2,(screen.height()-size.height())/2)#利用move函数窗口居中  app=QtWidgets.QApplication(sys.argv)window=MessageBox()window.show()sys.exit(app.exec_())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="想要发给你自己喜欢的人，肯定是需要打包成exe的呀"><a href="#想要发给你自己喜欢的人，肯定是需要打包成exe的呀" class="headerlink" title="想要发给你自己喜欢的人，肯定是需要打包成exe的呀"></a>想要发给你自己喜欢的人，肯定是需要打包成exe的呀</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">#!/usr/bin/env python # -*- coding: utf-8 -*-"""__title__ = '将calculator项目转换为exe文件'__author__ = '遂越净郝'"""from PyInstaller.__main__ import run if __name__ == '__main__':     opts = ['douyin.py', '-w', '--onefile']    #opts = ['douyin.py', '-F']    #opts = ['douyin.py', '-F', '-w']    #opts = ['douyin.py', '-F', '-w', '--icon=TargetOpinionMain.ico','--upx-dir','upx391w']    run(opts)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html表白网页</title>
      <link href="2021/04/18/html%E8%A1%A8%E7%99%BD%E7%BD%91%E9%A1%B5/"/>
      <url>2021/04/18/html%E8%A1%A8%E7%99%BD%E7%BD%91%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p>动态的,自己下载运行<br><a href="https://imgtu.com/i/cIsyqg"><img src="https://z3.ax1x.com/2021/04/18/cIsyqg.jpg" alt="cIsyqg.jpg"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>520快乐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;--&gt;</span><span class="token comment">&lt;!--    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"&gt;--&gt;</span>    <span class="token comment">&lt;!--&lt;meta itemprop="image" content="./images/fenxiang.png" /&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">html</span> <span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">body</span> <span class="token punctuation">{</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Helvetica Neue"</span><span class="token punctuation">,</span> <span class="token string">"Luxi Sans"</span><span class="token punctuation">,</span> <span class="token string">"DejaVu Sans"</span><span class="token punctuation">,</span> Tahoma<span class="token punctuation">,</span> <span class="token string">"Hiragino Sans GB"</span><span class="token punctuation">,</span> <span class="token string">"Microsoft Yahei"</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #79a8ae<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #CFEBE4<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 1.2px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">a</span> <span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> #ebf7f4<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.body--ready</span> <span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>203<span class="token punctuation">,</span> 235<span class="token punctuation">,</span> 219<span class="token punctuation">)</span> 0%<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>55<span class="token punctuation">,</span> 148<span class="token punctuation">,</span> 192<span class="token punctuation">)</span> 120%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>203<span class="token punctuation">,</span> 235<span class="token punctuation">,</span> 219<span class="token punctuation">)</span> 0%<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>55<span class="token punctuation">,</span> 148<span class="token punctuation">,</span> 192<span class="token punctuation">)</span> 120%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-o-linear-gradient</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>203<span class="token punctuation">,</span> 235<span class="token punctuation">,</span> 219<span class="token punctuation">)</span> 0%<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>55<span class="token punctuation">,</span> 148<span class="token punctuation">,</span> 192<span class="token punctuation">)</span> 120%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-ms-linear-gradient</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>203<span class="token punctuation">,</span> 235<span class="token punctuation">,</span> 219<span class="token punctuation">)</span> 0%<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>55<span class="token punctuation">,</span> 148<span class="token punctuation">,</span> 192<span class="token punctuation">)</span> 120%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>203<span class="token punctuation">,</span> 235<span class="token punctuation">,</span> 219<span class="token punctuation">)</span> 0%<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>55<span class="token punctuation">,</span> 148<span class="token punctuation">,</span> 192<span class="token punctuation">)</span> 120%<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.text</span> <span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 1.875rem<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.canvas</span> <span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">img#logo</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 128px<span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0px 0px 40px <span class="token function">rgba</span><span class="token punctuation">(</span>63<span class="token punctuation">,</span> 81<span class="token punctuation">,</span> 181<span class="token punctuation">,</span> 0.72<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 3px solid #00a0ff<span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> all 1.0s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">#logo:hover</span> <span class="token punctuation">{</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 10px #fff<span class="token punctuation">;</span>            <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> 0 0 19px #fff<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* IE 9 */</span>            <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Firefox */</span>            <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Safari 和 Chrome */</span>            <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Opera */</span>            <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token property">progid</span><span class="token punctuation">:</span>DXImageTransform.Microsoft.<span class="token function">BasicImage</span><span class="token punctuation">(</span>rotation=3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.cs</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.text</span> <span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.text-right</span> <span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--头像--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cs<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- src表示头像的地址,建议上传到网页,然后放链接 可以上传到这个网站http://chuantu.biz/--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://z3.ax1x.com/2021/04/12/cDaZi8.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1820<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>905<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">color</span><span class="token punctuation">:</span> #8ef5ff<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>    永远爱你    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>span_dt_dt<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">show_date_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"show_date_time()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//你俩在一起的那天</span>        BirthDay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"8/16/2020 13:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timeold <span class="token operator">=</span> <span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> BirthDay<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sectimeold <span class="token operator">=</span> timeold <span class="token operator">/</span> <span class="token number">1000</span>        secondsold <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>sectimeold<span class="token punctuation">)</span><span class="token punctuation">;</span>        msPerDay <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span>        e_daysold <span class="token operator">=</span> timeold <span class="token operator">/</span> msPerDay        daysold <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>e_daysold<span class="token punctuation">)</span><span class="token punctuation">;</span>        e_hrsold <span class="token operator">=</span> <span class="token punctuation">(</span>e_daysold <span class="token operator">-</span> daysold<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>        hrsold <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>e_hrsold<span class="token punctuation">)</span><span class="token punctuation">;</span>        e_minsold <span class="token operator">=</span> <span class="token punctuation">(</span>e_hrsold <span class="token operator">-</span> hrsold<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        minsold <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e_hrsold <span class="token operator">-</span> hrsold<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        seconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e_minsold <span class="token operator">-</span> minsold<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        span_dt_dt<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> daysold <span class="token operator">+</span> <span class="token string">"天"</span> <span class="token operator">+</span> hrsold <span class="token operator">+</span> <span class="token string">"小时"</span> <span class="token operator">+</span> minsold <span class="token operator">+</span> <span class="token string">"分"</span> <span class="token operator">+</span> seconds <span class="token operator">+</span> <span class="token string">"秒"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">show_date_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token constant">S</span><span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">'.canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'body--ready'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 动态变化的话,用|分割</span>            <span class="token constant">S</span><span class="token punctuation">.</span><span class="token constant">UI</span><span class="token punctuation">.</span><span class="token function">simulate</span><span class="token punctuation">(</span><span class="token string">"My|Dear|Pig|I|Love|You|#countdown 3|#time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">S</span><span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token constant">S</span><span class="token punctuation">.</span>Shape<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token constant">S</span><span class="token punctuation">.</span>Drawing <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> canvas<span class="token punctuation">,</span>            context<span class="token punctuation">,</span>            renderFn<span class="token punctuation">,</span>            requestFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span>                window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span>                window<span class="token punctuation">.</span>mozRequestAnimationFrame <span class="token operator">||</span>                window<span class="token punctuation">.</span>oRequestAnimationFrame <span class="token operator">||</span>                window<span class="token punctuation">.</span>msRequestAnimationFrame <span class="token operator">||</span>                <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>                context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">adjustCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token constant">S</span><span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span><span class="token function">adjustCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">loop</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                renderFn <span class="token operator">=</span> <span class="token operator">!</span>renderFn <span class="token operator">?</span> fn <span class="token operator">:</span> renderFn<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">renderFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">requestFrame</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">adjustCanvas</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">;</span>                canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">clearFrame</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">getArea</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>w<span class="token operator">:</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> h<span class="token operator">:</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">drawCircle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p<span class="token punctuation">.</span>y<span class="token punctuation">,</span> p<span class="token punctuation">.</span>z<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token constant">S</span><span class="token punctuation">.</span><span class="token constant">UI</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> interval<span class="token punctuation">,</span>            currentAction<span class="token punctuation">,</span>            time<span class="token punctuation">,</span>            maxShapeSize <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>            sequence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            cmd <span class="token operator">=</span> <span class="token string">'#'</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">formatTime</span><span class="token punctuation">(</span><span class="token parameter">date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> h <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                m <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                m <span class="token operator">=</span> m <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> m <span class="token operator">:</span> m<span class="token punctuation">;</span>            <span class="token keyword">return</span> h <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> value <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">getAction</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            value <span class="token operator">=</span> value <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> value <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> cmd <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">timedAction</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> max<span class="token punctuation">,</span> reverse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>            currentAction <span class="token operator">=</span> reverse <span class="token operator">?</span> max <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">fn</span><span class="token punctuation">(</span>currentAction<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>max <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>reverse <span class="token operator">&amp;&amp;</span> currentAction <span class="token operator">&lt;</span> max<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>reverse <span class="token operator">&amp;&amp;</span> currentAction <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    currentAction <span class="token operator">=</span> reverse <span class="token operator">?</span> currentAction <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> currentAction <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token function">fn</span><span class="token punctuation">(</span>currentAction<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>reverse <span class="token operator">&amp;&amp;</span> max <span class="token operator">&amp;&amp;</span> currentAction <span class="token operator">===</span> max<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>reverse <span class="token operator">&amp;&amp;</span> currentAction <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">clearInterval</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">performAction</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> action<span class="token punctuation">,</span>                value<span class="token punctuation">,</span>                current<span class="token punctuation">;</span>            sequence <span class="token operator">=</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> value <span class="token operator">:</span> sequence<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">timedAction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                current <span class="token operator">=</span> sequence<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                action <span class="token operator">=</span> <span class="token function">getAction</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                value <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token string">'countdown'</span><span class="token operator">:</span>                        value <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">10</span><span class="token punctuation">;</span>                        value <span class="token operator">=</span> value <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> value <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">;</span>                        <span class="token function">timedAction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token constant">S</span><span class="token punctuation">.</span>Shape<span class="token punctuation">.</span><span class="token function">switchShape</span><span class="token punctuation">(</span><span class="token constant">S</span><span class="token punctuation">.</span>ShapeBuilder<span class="token punctuation">.</span><span class="token function">letter</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                    <span class="token function">performAction</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token constant">S</span><span class="token punctuation">.</span>Shape<span class="token punctuation">.</span><span class="token function">switchShape</span><span class="token punctuation">(</span><span class="token constant">S</span><span class="token punctuation">.</span>ShapeBuilder<span class="token punctuation">.</span><span class="token function">letter</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">'rectangle'</span><span class="token operator">:</span>                        value <span class="token operator">=</span> value <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        value <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> value <span class="token operator">:</span> <span class="token punctuation">[</span>maxShapeSize<span class="token punctuation">,</span> maxShapeSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token constant">S</span><span class="token punctuation">.</span>Shape<span class="token punctuation">.</span><span class="token function">switchShape</span><span class="token punctuation">(</span><span class="token constant">S</span><span class="token punctuation">.</span>ShapeBuilder<span class="token punctuation">.</span><span class="token function">rectangle</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>maxShapeSize<span class="token punctuation">,</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>maxShapeSize<span class="token punctuation">,</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">'circle'</span><span class="token operator">:</span>                        value <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> maxShapeSize<span class="token punctuation">;</span>                        value <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> maxShapeSize<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token constant">S</span><span class="token punctuation">.</span>Shape<span class="token punctuation">.</span><span class="token function">switchShape</span><span class="token punctuation">(</span><span class="token constant">S</span><span class="token punctuation">.</span>ShapeBuilder<span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">'time'</span><span class="token operator">:</span>                        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token function">formatTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment">//定格</span>                             <span class="token constant">S</span><span class="token punctuation">.</span>Shape<span class="token punctuation">.</span><span class="token function">switchShape</span><span class="token punctuation">(</span><span class="token constant">S</span><span class="token punctuation">.</span>ShapeBuilder<span class="token punctuation">.</span><span class="token function">letter</span><span class="token punctuation">(</span><span class="token string">"Nothing but You"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token function">timedAction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                t <span class="token operator">=</span> <span class="token function">formatTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!==</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    time <span class="token operator">=</span> t<span class="token punctuation">;</span>                                    <span class="token comment">//定格</span>                                     <span class="token constant">S</span><span class="token punctuation">.</span>Shape<span class="token punctuation">.</span><span class="token function">switchShape</span><span class="token punctuation">(</span><span class="token constant">S</span><span class="token punctuation">.</span>ShapeBuilder<span class="token punctuation">.</span><span class="token function">letter</span><span class="token punctuation">(</span><span class="token string">"Nothing but You"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                        <span class="token constant">S</span><span class="token punctuation">.</span>Shape<span class="token punctuation">.</span><span class="token function">switchShape</span><span class="token punctuation">(</span><span class="token constant">S</span><span class="token punctuation">.</span>ShapeBuilder<span class="token punctuation">.</span><span class="token function">letter</span><span class="token punctuation">(</span>current<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> cmd <span class="token operator">?</span> <span class="token string">'HacPai'</span> <span class="token operator">:</span> current<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> sequence<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token function-variable function">simulate</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">performAction</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token constant">S</span><span class="token punctuation">.</span><span class="token function-variable function">Point</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> args<span class="token punctuation">.</span>x<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> args<span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>z <span class="token operator">=</span> args<span class="token punctuation">.</span>z<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> args<span class="token punctuation">.</span>a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>h <span class="token operator">=</span> args<span class="token punctuation">.</span>h<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token constant">S</span><span class="token punctuation">.</span><span class="token function-variable function">Color</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>g <span class="token operator">=</span> g<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token constant">S</span><span class="token punctuation">.</span><span class="token class-name">Color</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'rgba('</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>g <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token constant">S</span><span class="token punctuation">.</span><span class="token function-variable function">Dot</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">S<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            x<span class="token operator">:</span> x<span class="token punctuation">,</span>            y<span class="token operator">:</span> y<span class="token punctuation">,</span>            z<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            h<span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>e <span class="token operator">=</span> <span class="token number">0.07</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">S<span class="token punctuation">.</span>Color</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>t <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token constant">S</span><span class="token punctuation">.</span><span class="token class-name">Dot</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token function-variable function">clone</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">S<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                x<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>                y<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span>                z<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>z<span class="token punctuation">,</span>                a<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>                h<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>h            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">_draw</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>a<span class="token punctuation">;</span>            <span class="token constant">S</span><span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">_moveTowards</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> details <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">distanceTo</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                dx <span class="token operator">=</span> details<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                dy <span class="token operator">=</span> details<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                d <span class="token operator">=</span> details<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                e <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>e <span class="token operator">*</span> d<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>h <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>x <span class="token operator">=</span> n<span class="token punctuation">.</span>x<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>y <span class="token operator">=</span> n<span class="token punctuation">.</span>y<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>x <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>dx <span class="token operator">/</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>y <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>dy <span class="token operator">/</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>h <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>h<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">_update</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_moveTowards</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>q<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>t<span class="token punctuation">.</span>x <span class="token operator">=</span> p<span class="token punctuation">.</span>x <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>x<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>t<span class="token punctuation">.</span>y <span class="token operator">=</span> p<span class="token punctuation">.</span>y <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>y<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>t<span class="token punctuation">.</span>z <span class="token operator">=</span> p<span class="token punctuation">.</span>z <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>z<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>t<span class="token punctuation">.</span>a <span class="token operator">=</span> p<span class="token punctuation">.</span>a <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>a<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>h <span class="token operator">=</span> p<span class="token punctuation">.</span>h <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>x <span class="token operator">-=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.142</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>y <span class="token operator">-=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.142</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">S<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                            x<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">25</span><span class="token punctuation">,</span>                            y<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">25</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            d <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>a <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t<span class="token punctuation">.</span>a<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>a <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>a <span class="token operator">-</span> <span class="token punctuation">(</span>d <span class="token operator">*</span> <span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            d <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>z <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t<span class="token punctuation">.</span>z<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>z <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>z <span class="token operator">-</span> <span class="token punctuation">(</span>d <span class="token operator">*</span> <span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">distanceTo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> details</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> dx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>x <span class="token operator">-</span> n<span class="token punctuation">.</span>x<span class="token punctuation">,</span>                dy <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>y <span class="token operator">-</span> n<span class="token punctuation">.</span>y<span class="token punctuation">,</span>                d <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> details <span class="token operator">?</span> <span class="token punctuation">[</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> d<span class="token punctuation">]</span> <span class="token operator">:</span> d<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">move</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> avoidStatic</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>avoidStatic <span class="token operator">||</span> <span class="token punctuation">(</span>avoidStatic <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">distanceTo</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token constant">S</span><span class="token punctuation">.</span>ShapeBuilder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> gap <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">,</span>            shapeCanvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            shapeContext <span class="token operator">=</span> shapeCanvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            fontSize <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span>            fontFamily <span class="token operator">=</span> <span class="token string">'Avenir, Helvetica Neue, Helvetica, Arial, sans-serif'</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">fit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            shapeCanvas<span class="token punctuation">.</span>width <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">/</span> gap<span class="token punctuation">)</span> <span class="token operator">*</span> gap<span class="token punctuation">;</span>            shapeCanvas<span class="token punctuation">.</span>height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight <span class="token operator">/</span> gap<span class="token punctuation">)</span> <span class="token operator">*</span> gap<span class="token punctuation">;</span>            shapeContext<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>            shapeContext<span class="token punctuation">.</span>textBaseline <span class="token operator">=</span> <span class="token string">'middle'</span><span class="token punctuation">;</span>            shapeContext<span class="token punctuation">.</span>textAlign <span class="token operator">=</span> <span class="token string">'center'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">processCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> pixels <span class="token operator">=</span> shapeContext<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> shapeCanvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> shapeCanvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>            dots <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                pixels<span class="token punctuation">,</span>                x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>                y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>                fx <span class="token operator">=</span> shapeCanvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span>                fy <span class="token operator">=</span> shapeCanvas<span class="token punctuation">.</span>height<span class="token punctuation">,</span>                w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>                h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> pixels<span class="token punctuation">.</span>length<span class="token punctuation">;</span> p <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> gap<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pixels<span class="token punctuation">[</span>p <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dots<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">S<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        x<span class="token operator">:</span> x<span class="token punctuation">,</span>                        y<span class="token operator">:</span> y                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    w <span class="token operator">=</span> x <span class="token operator">&gt;</span> w <span class="token operator">?</span> x <span class="token operator">:</span> w<span class="token punctuation">;</span>                    h <span class="token operator">=</span> y <span class="token operator">&gt;</span> h <span class="token operator">?</span> y <span class="token operator">:</span> h<span class="token punctuation">;</span>                    fx <span class="token operator">=</span> x <span class="token operator">&lt;</span> fx <span class="token operator">?</span> x <span class="token operator">:</span> fx<span class="token punctuation">;</span>                    fy <span class="token operator">=</span> y <span class="token operator">&lt;</span> fy <span class="token operator">?</span> y <span class="token operator">:</span> fy<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                x <span class="token operator">+=</span> gap<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> shapeCanvas<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    y <span class="token operator">+=</span> gap<span class="token punctuation">;</span>                    p <span class="token operator">+=</span> gap <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">*</span> shapeCanvas<span class="token punctuation">.</span>width<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>dots<span class="token operator">:</span> dots<span class="token punctuation">,</span> w<span class="token operator">:</span> w <span class="token operator">+</span> fx<span class="token punctuation">,</span> h<span class="token operator">:</span> h <span class="token operator">+</span> fy<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            shapeContext<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">'bold '</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">'px '</span> <span class="token operator">+</span> fontFamily<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isFinite</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> fit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Init</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token function-variable function">imageFile</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    a <span class="token operator">=</span> <span class="token constant">S</span><span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    shapeContext<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> shapeCanvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> shapeCanvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>                    shapeContext<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>h <span class="token operator">*</span> <span class="token number">0.6</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>h <span class="token operator">*</span> <span class="token number">0.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token function">processCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                image<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token constant">S</span><span class="token punctuation">.</span>ShapeBuilder<span class="token punctuation">.</span><span class="token function">letter</span><span class="token punctuation">(</span><span class="token string">'What?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                image<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">circle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> r <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                shapeContext<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> shapeCanvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> shapeCanvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>                shapeContext<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                shapeContext<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>r <span class="token operator">*</span> gap<span class="token punctuation">,</span> r <span class="token operator">*</span> gap<span class="token punctuation">,</span> r <span class="token operator">*</span> gap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                shapeContext<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                shapeContext<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">processCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">letter</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">l</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">setFontSize</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">)</span><span class="token punctuation">;</span>                s <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">,</span>                    <span class="token punctuation">(</span>shapeCanvas<span class="token punctuation">.</span>width <span class="token operator">/</span> shapeContext<span class="token punctuation">.</span><span class="token function">measureText</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.8</span> <span class="token operator">*</span> fontSize<span class="token punctuation">,</span>                    <span class="token punctuation">(</span>shapeCanvas<span class="token punctuation">.</span>height <span class="token operator">/</span> fontSize<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">isNumber</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0.45</span><span class="token punctuation">)</span> <span class="token operator">*</span> fontSize<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setFontSize</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                shapeContext<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> shapeCanvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> shapeCanvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>                shapeContext<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> shapeCanvas<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> shapeCanvas<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">processCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">rectangle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">w<span class="token punctuation">,</span> h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> dots <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    width <span class="token operator">=</span> gap <span class="token operator">*</span> w<span class="token punctuation">,</span>                    height <span class="token operator">=</span> gap <span class="token operator">*</span> h<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> y <span class="token operator">+=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> x <span class="token operator">+=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dots<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">S<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                            x<span class="token operator">:</span> x<span class="token punctuation">,</span>                            y<span class="token operator">:</span> y                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>dots<span class="token operator">:</span> dots<span class="token punctuation">,</span> w<span class="token operator">:</span> width<span class="token punctuation">,</span> h<span class="token operator">:</span> height<span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token constant">S</span><span class="token punctuation">.</span>Shape <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> dots <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>            height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>            cx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>            cy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">compensate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token constant">S</span><span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cx <span class="token operator">=</span> a<span class="token punctuation">.</span>w <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            cy <span class="token operator">=</span> a<span class="token punctuation">.</span>h <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token function-variable function">shuffleIdle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token constant">S</span><span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> d <span class="token operator">&lt;</span> dots<span class="token punctuation">.</span>length<span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dots<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dots<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                            x<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> a<span class="token punctuation">.</span>w<span class="token punctuation">,</span>                            y<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> a<span class="token punctuation">.</span>h                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">switchShape</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> fast</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> size<span class="token punctuation">,</span>                    a <span class="token operator">=</span> <span class="token constant">S</span><span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                width <span class="token operator">=</span> n<span class="token punctuation">.</span>w<span class="token punctuation">;</span>                height <span class="token operator">=</span> n<span class="token punctuation">.</span>h<span class="token punctuation">;</span>                <span class="token function">compensate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>dots<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> dots<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    size <span class="token operator">=</span> n<span class="token punctuation">.</span>dots<span class="token punctuation">.</span>length <span class="token operator">-</span> dots<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> d <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dots<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">S<span class="token punctuation">.</span>Dot</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>w <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>h <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>                    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>dots<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">.</span>dots<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                    dots<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span>e <span class="token operator">=</span> fast <span class="token operator">?</span> <span class="token number">0.25</span> <span class="token operator">:</span> <span class="token punctuation">(</span>dots<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">?</span> <span class="token number">0.14</span> <span class="token operator">:</span> <span class="token number">0.11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dots<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dots<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">S<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                            z<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span>                            a<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            h<span class="token operator">:</span> <span class="token number">18</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        dots<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">S<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                            z<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span>                            h<span class="token operator">:</span> fast <span class="token operator">?</span> <span class="token number">18</span> <span class="token operator">:</span> <span class="token number">30</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    dots<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    dots<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">S<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        x<span class="token operator">:</span> n<span class="token punctuation">.</span>dots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> cx<span class="token punctuation">,</span>                        y<span class="token operator">:</span> n<span class="token punctuation">.</span>dots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> cy<span class="token punctuation">,</span>                        a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                        z<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>                        h<span class="token operator">:</span> <span class="token number">0</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    n<span class="token punctuation">.</span>dots <span class="token operator">=</span> n<span class="token punctuation">.</span>dots<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>dots<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    d<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> d<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dots<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">S<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                            z<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span>                            a<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            h<span class="token operator">:</span> <span class="token number">20</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        dots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        dots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e <span class="token operator">=</span> <span class="token number">0.04</span><span class="token punctuation">;</span>                        dots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">S<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                            x<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> a<span class="token punctuation">.</span>w<span class="token punctuation">,</span>                            y<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> a<span class="token punctuation">.</span>h<span class="token punctuation">,</span>                            a<span class="token operator">:</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token comment">//.4</span>                            z<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span>                            h<span class="token operator">:</span> <span class="token number">0</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> d <span class="token operator">&lt;</span> dots<span class="token punctuation">.</span>length<span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dots<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token constant">S</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 背景音乐,去这个网站搜http://y.webzcz.cn/,然后把下载链接放在src里 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">autoplay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autoplay<span class="token punctuation">"</span></span> <span class="token attr-name">loop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loop<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>小凌 - 有何不可.mp3<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>audio/mpeg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“代码雨”纯HTML源码实现及效果</title>
      <link href="2021/04/18/%E2%80%9C%E4%BB%A3%E7%A0%81%E9%9B%A8%E2%80%9D%E7%BA%AFHTML%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%95%88%E6%9E%9C/"/>
      <url>2021/04/18/%E2%80%9C%E4%BB%A3%E7%A0%81%E9%9B%A8%E2%80%9D%E7%BA%AFHTML%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p>动态的  自己下载运行<br>颜色也随机变化<br><a href="https://imgtu.com/i/cIDpLQ"><img src="https://z3.ax1x.com/2021/04/18/cIDpLQ.jpg" alt="cIDpLQ.jpg"></a></p><p>一致绿<br><a href="https://imgtu.com/i/cIBjRf"><img src="https://z3.ax1x.com/2021/04/18/cIBjRf.jpg" alt="cIBjRf.jpg"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html;charset=utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Code -by ZhenYu.Sha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">html,        body</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">body</span> <span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cvs<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> cvs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"cvs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ctx <span class="token operator">=</span> cvs<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> cw <span class="token operator">=</span> cvs<span class="token punctuation">.</span>width <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>        <span class="token keyword">var</span> ch <span class="token operator">=</span> cvs<span class="token punctuation">.</span>height <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>        <span class="token comment">//动画绘制对象</span>        <span class="token keyword">var</span> requestAnimationFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span> window<span class="token punctuation">.</span>mozRequestAnimationFrame <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span> window<span class="token punctuation">.</span>msRequestAnimationFrame<span class="token punctuation">;</span>        <span class="token keyword">var</span> codeRainArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//代码雨数组</span>        <span class="token keyword">var</span> cols <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>cw <span class="token operator">/</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//代码雨列数</span>        <span class="token keyword">var</span> step <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token comment">//步长，每一列内部数字之间的上下间隔</span>        ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">"bold 26px microsoft yahei"</span><span class="token punctuation">;</span> <span class="token comment">//声明字体，个人喜欢微软雅黑</span>        <span class="token keyword">function</span> <span class="token function">createColorCv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//画布基本颜色</span>            ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"#242424"</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cw<span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//创建代码雨</span>        <span class="token keyword">function</span> <span class="token function">createCodeRain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> col <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//基础位置，为了列与列之间产生错位</span>                <span class="token keyword">var</span> basePos <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//随机速度 3~13之间</span>                <span class="token keyword">var</span> speed <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token comment">//每组的x轴位置随机产生</span>                <span class="token keyword">var</span> colx <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> cw<span class="token punctuation">)</span>                <span class="token comment">//绿色随机</span>                <span class="token keyword">var</span> rgbr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> rgbg <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> rgbb <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">//ctx.fillStyle = "rgb("+r+','+g+','+b+")"</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>ch <span class="token operator">/</span> step<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> code <span class="token operator">=</span> <span class="token punctuation">{</span>                        x<span class="token operator">:</span> colx<span class="token punctuation">,</span>                        y<span class="token operator">:</span> <span class="token operator">-</span><span class="token punctuation">(</span>step <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> basePos<span class="token punctuation">,</span>                        speed<span class="token operator">:</span> speed<span class="token punctuation">,</span>                        <span class="token comment">//  text : parseInt(Math.random()*10)%2 == 0 ? 0 : 1  //随机生成0或者1</span>                        text<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"v"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//随机生成字母数组中的一个</span>                        color<span class="token operator">:</span> <span class="token string">"rgb("</span> <span class="token operator">+</span> rgbr <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> rgbg <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> rgbb <span class="token operator">+</span> <span class="token string">")"</span>                    <span class="token punctuation">}</span>                    col<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                codeRainArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//代码雨下起来</span>        <span class="token keyword">function</span> <span class="token function">codeRaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//把画布擦干净</span>            ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cw<span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建有颜色的画布</span>            <span class="token comment">//createColorCv();</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> codeRainArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//取出列</span>                col <span class="token operator">=</span> codeRainArr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//遍历列，画出该列的代码</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> col<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> code <span class="token operator">=</span> col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">//如果超出下边界则重置到顶部</span>                        code<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment">//匀速降落</span>                        code<span class="token punctuation">.</span>y <span class="token operator">+=</span> code<span class="token punctuation">.</span>speed<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment">//1 颜色也随机变化</span>                    ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"hsl("</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">359</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",30%,"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">-</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"%)"</span><span class="token punctuation">;</span>                    <span class="token comment">//2 绿色逐渐变浅</span>                    <span class="token comment">// ctx.fillStyle = "hsl(123,80%,"+(30-i*2)+"%)"; </span>                    <span class="token comment">//3 绿色随机</span>                    <span class="token comment">// var r= 0;</span>                    <span class="token comment">// var g= parseInt(Math.random()*255) + 3;</span>                    <span class="token comment">// var b= 0;</span>                    <span class="token comment">// ctx.fillStyle = "rgb("+r+','+g+','+b+")";</span>                    <span class="token comment">//4 一致绿</span>                    <span class="token comment">//ctx.fillStyle = code.color;</span>                    <span class="token comment">//把代码画出来</span>                    ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>code<span class="token punctuation">.</span>text<span class="token punctuation">,</span> code<span class="token punctuation">.</span>x<span class="token punctuation">,</span> code<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>codeRaining<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//创建代码雨</span>        <span class="token function">createCodeRain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//开始下雨吧 GO&gt;&gt;</span>        <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>codeRaining<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>&lt;/html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 代码雨 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯HTML个人简历模板代码</title>
      <link href="2021/04/18/%E7%BA%AFHTML%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81/"/>
      <url>2021/04/18/%E7%BA%AFHTML%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>简历<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>https://z3.ax1x.com/2021/04/18/cItRcd.jpg</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我的个人简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>姓名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span> 圆宝 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>年龄:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>民族:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>汉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span>                    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://z3.ax1x.com/2021/04/18/cItB0x.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>出生日期:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>19980527<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>政治面貌:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>团员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>学历:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>本科<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>专业:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>计算机科学与技术<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>毕业学校:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>新疆理工学院<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>邮编:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>843000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>爱好:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>书法，摄影，户外<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>籍贯:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>新<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>邮箱:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">&lt;p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mailto:197******@qq.com?subject=Hello%20again<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>197*******@qq.com <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>160<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>个人特长:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>我爱计算机，我爱计算机我爱计算机，我爱计算机我爱计算机，我爱计算机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>我爱计算机，我爱计算机我爱计算机，我爱计算机我爱计算机，我爱计算机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>我爱计算机，我爱计算机我爱计算机，我爱计算机我爱计算机，我爱计算机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>160<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 自我介绍:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>来自新疆昌吉的一个小村庄里，我爱计算机，我爱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>来自新疆昌吉的一个小村庄里，我爱计算机，我爱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>来自新疆昌吉的一个小村庄里，我爱计算机，我爱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>160<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>总结:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>来自新疆昌吉的一个小村庄里，我爱计算机，我爱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>来自新疆昌吉的一个小村庄里，我爱计算机，我爱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>来自新疆昌吉的一个小村庄里，我爱计算机，我爱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><a href="https://imgtu.com/i/cIU5Y8"><img src="https://z3.ax1x.com/2021/04/18/cIU5Y8.jpg" alt="cIU5Y8.jpg"></a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 个人简历模板代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java游戏：简单的贪吃蛇小游戏</title>
      <link href="2021/04/17/Java%E6%B8%B8%E6%88%8F%EF%BC%9A%E7%AE%80%E5%8D%95%E7%9A%84%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
      <url>2021/04/17/Java%E6%B8%B8%E6%88%8F%EF%BC%9A%E7%AE%80%E5%8D%95%E7%9A%84%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="程序设计思路"><a href="#程序设计思路" class="headerlink" title="程序设计思路"></a>程序设计思路</h2><h3 id="Data类"><a href="#Data类" class="headerlink" title="Data类"></a>Data类</h3><p><code>作用：连接statics文件夹，将静态资源包中的图片转化为图标 方便在面板上绘制。</code><br><code>实现：使用class.getResource(String path)方法。</code></p><p>   代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.snake;import javax.swing.*;import java.net.URL;public class Data {    //贪吃蛇头部    public static URL upUrl = Data.class.getResource("/statics/up.png");    public static ImageIcon up = new ImageIcon(upUrl);    public static URL downUrl = Data.class.getResource("/statics/down.png");    public static ImageIcon down = new ImageIcon(downUrl);    public static URL leftUrl = Data.class.getResource("/statics/left.png");    public static ImageIcon left = new ImageIcon(leftUrl);    public static URL rightUrl = Data.class.getResource("/statics/right.png");    public static ImageIcon right = new ImageIcon(rightUrl);    //贪食蛇身体    public static URL bodyUrl = Data.class.getResource("/statics/body.png");    public static ImageIcon body = new ImageIcon(bodyUrl);    //食物    public static URL foodUrl = Data.class.getResource("/statics/food.png");    public static ImageIcon food = new ImageIcon(foodUrl);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="StartGame类"><a href="#StartGame类" class="headerlink" title="StartGame类"></a>StartGame类</h3><p><code>作用：创建游戏窗口，在窗口中添加一个游戏面板。</code><br><code>实现：使用JFrame类创建游戏窗口，利用其add()方法添加一个GamePanel类实例化对象。</code></p><p>  代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.snake;import javax.swing.*;import java.awt.*;public class StartGame {    public static void main(String[] args){        //建立游戏窗口        JFrame frame = new JFrame("Java-贪吃蛇小游戏");//标题        frame.setSize(900,720);//窗口大小        frame.setLocationRelativeTo(null);//窗口显示屏幕中间        frame.setResizable(false);//固定窗口大小        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//设置窗体关闭事件        frame.add(new GamePanel());//添加游戏内容        frame.setVisible(true);//设置窗体可见    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GamePanel类"><a href="#GamePanel类" class="headerlink" title="GamePanel类"></a>GamePanel类</h3><p><code>作用：实现游戏的动态页面。</code><br><code>实现：（1）init()方法：初始化小蛇位置； &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;（2）eat()方法：用随机种子随机食物的位置，并进行判定，食物位置不能和小蛇位置重合； &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;（3）继承JPanel类，重写paintComponent(Graphics g)方法，在方法中绘制标题栏、小蛇的位置（根据direction小蛇头部方向变量绘制小蛇头部）、小蛇身体、积分栏、游戏提醒项与失败判断项； &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;（4）实现KeyListener 接口中的keyPressed(KeyEvent e)方法，获取键盘输入，根据键盘输入对游戏状态或者小蛇头部方向direction变量进行更改； &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;（5）实现ActionListener接口中的actionPerformed(ActionEvent e)方法，根据游戏状态和direction变量进行小蛇移动操作（注意禁用直接回头操作），进行吃食物判定和死亡判定。使用Timer计时器让游戏动态变化，用repaint()方法实时更新界面。 </code></p><p>   代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.snake;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import java.util.Random;public class GamePanel extends JPanel implements KeyListener, ActionListener {    int[] snakeX = new int[500];//贪吃蛇横坐标    int[] snakeY = new int[500];//贪吃蛇纵坐标    int foodX;//食物横坐标    int foodY;//食物蛇纵坐标    int length;//贪吃蛇的长度    String  direction;//贪吃蛇头方向    int score;//积分    Random r = new Random();    Timer timer = new Timer(100,this);    boolean isStart;    boolean isFail;    //构造函数    public GamePanel(){        init();        this.setFocusable(true);        this.addKeyListener(this);        timer.start();    }    private void init(){        length=3;        snakeX[0]=100;snakeY[0]=100;        snakeX[1]=75;snakeY[1]=100;        snakeX[2]=50;snakeY[2]=100;        direction = "R";        eat(foodX,foodY);        isStart = false;        isFail = false;        score = 0;    }    private void eat(int x,int y){        x= 25 + 25*r.nextInt(34);        y= 75 + 25*r.nextInt(24);        for (int i = 0; i &lt; length; i++) {            if(snakeX[i]==x&amp;&amp;snakeY[i]==y){                x = 25 + 25*r.nextInt(34);                y = 75 + 25*r.nextInt(24);            }        }        foodX = x;foodY = y;    }    protected void paintComponent(Graphics g) {        super.paintComponent(g);        this.setBackground(Color.white);//设置背景板为白色        //画标题        g.setColor(Color.GREEN);        g.setFont(new Font("幼圆",Font.BOLD,50));        g.drawString("贪吃蛇游戏",300,60);        //绘制游戏区域        g.setColor(Color.GRAY);        g.fillRect(25,75,850,600);        //画贪吃蛇头部        if(direction=="R"){            Data.right.paintIcon(this,g,snakeX[0],snakeY[0]);        }        else if(direction=="L"){            Data.left.paintIcon(this,g,snakeX[0],snakeY[0]);        }        if(direction=="U"){            Data.up.paintIcon(this,g,snakeX[0],snakeY[0]);        }        else if(direction=="D"){            Data.down.paintIcon(this,g,snakeX[0],snakeY[0]);        }        //画身体        for (int i = 1; i &lt; length ; i++) {            Data.body.paintIcon(this,g,snakeX[i],snakeY[i]);        }        //画食物        Data.food.paintIcon(this,g,foodX,foodY);        //绘制积分栏        g.setColor(Color.BLACK);        g.setFont(new Font("幼圆",Font.BOLD,20));        g.drawString("长度："+length,730,30);        g.drawString("得分："+score,730,60);        //游戏开始提醒        if(isStart==false){            g.setColor(Color.BLACK);            g.setFont(new Font("幼圆",Font.BOLD,40));            g.drawString("按空格键开始游戏",300,300);        }        //失败判断        if(isFail){            g.setColor(Color.RED);            g.setFont(new Font("幼圆",Font.BOLD,40));            g.drawString("游戏失败，按空格键重新开始",300,300);        }    }    @Override    public void keyPressed(KeyEvent e) {        int keyCode = e.getKeyCode();//获取按下的按键        //判断空格        if(keyCode==KeyEvent.VK_SPACE){            if(isFail){                isFail = false;                init();            }            else{                isStart = !isStart;            }            repaint();        }        //判断方向        if(keyCode==KeyEvent.VK_LEFT&amp;&amp;direction!="R"){            direction = "L";        }        else if(keyCode==KeyEvent.VK_RIGHT&amp;&amp;direction!="L"){            direction = "R";        }        else if(keyCode==KeyEvent.VK_UP&amp;&amp;direction!="D"){            direction = "U";        }        else if(keyCode==KeyEvent.VK_DOWN&amp;&amp;direction!="U"){            direction = "D";        }    }    @Override    public void keyReleased(KeyEvent e) {    }    @Override    public void keyTyped(KeyEvent e) {    }    @Override    public void actionPerformed(ActionEvent e) {        //判断游戏状态        if(isStart&amp;&amp;!isFail){            //移动身体            for (int i = length-1; i &gt; 0 ; i--) {                snakeX[i] = snakeX[i-1];                snakeY[i] = snakeY[i-1];            }            //移动头部            if(direction=="R"){                snakeX[0] += 25;                if(snakeX[0]&gt;850){                    snakeX[0] = 25;                }            }            else  if(direction=="L"){                snakeX[0] -= 25;                if(snakeX[0]&lt;25){                    snakeX[0] = 850;                }            }            else  if(direction=="U"){                snakeY[0] -= 25;                if(snakeY[0]&lt;75){                    snakeY[0] = 650;                }            }            else  if(direction=="D"){                snakeY[0] += 25;                if(snakeY[0]&gt;650){                    snakeY[0] = 75;                }            }            //吃食物            if(snakeX[0]==foodX&amp;&amp;snakeY[0]==foodY){                length++;                score += 10;                eat(foodX,foodY);            }            //死亡判定            for (int i = 1; i &lt; length; i++) {                if(snakeX[0]==snakeX[i]&amp;&amp;snakeY[0]==snakeY[i]){                    isFail=true;                }            }            repaint();        }        timer.start();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="游戏展示"><a href="#游戏展示" class="headerlink" title="游戏展示"></a>游戏展示</h2><p><a href="https://imgtu.com/i/cIUbOs"><img src="https://z3.ax1x.com/2021/04/18/cIUbOs.png" alt="cIUbOs.png"></a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> GUI </tag>
            
            <tag> 贪吃蛇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python控制台输出俄罗斯方块</title>
      <link href="2021/04/17/Python%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/"/>
      <url>2021/04/17/Python%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="俄罗斯方块-打印"><a href="#俄罗斯方块-打印" class="headerlink" title="俄罗斯方块-打印"></a>俄罗斯方块-打印</h2><h3 id="功能：输入字母，打印俄罗斯方块的-图形"><a href="#功能：输入字母，打印俄罗斯方块的-图形" class="headerlink" title="功能：输入字母，打印俄罗斯方块的*图形"></a>功能：输入字母，打印俄罗斯方块的*图形</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 尽可能吧俄罗斯方块放在中间Tetris = {'L': [[1, 1], [1, 2], [1, 3], [2, 3]],         'O': [[1, 1], [2, 1], [1, 2], [2, 2]],         'J': [[2, 1], [2, 2], [1, 3], [2, 3]],         'Z': [[1, 1], [2, 1], [2, 2], [3, 2]],         'S': [[1, 1], [1, 2], [2, 2], [2, 3]],         'I': [[1, 1], [1, 2], [1, 3], [1, 4]],         'T': [[1, 1], [2, 1], [2, 2], [3, 1]]}print(Tetris)while True:    figure = input("请输入俄罗斯方块的形状")    flag = 0    for i in range(0, 5):        for j in range(0, 4):            for li in range(0, len(Tetris[figure])):    # Tetris['L']                if j == Tetris[figure][li][0] and i == Tetris[figure][li][1]:                    flag = 1            if flag == 1:                print("*", end='')            else:                print(" ", end='')            flag = 0        print()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="俄罗斯方块-移动"><a href="#俄罗斯方块-移动" class="headerlink" title="俄罗斯方块-移动"></a>俄罗斯方块-移动</h2><p>这一版使用了函数+字典</p><h3 id="功能：输入字母，打印俄罗斯方块的-图形，输入468可以移动"><a href="#功能：输入字母，打印俄罗斯方块的-图形，输入468可以移动" class="headerlink" title="功能：输入字母，打印俄罗斯方块的*图形，输入468可以移动"></a>功能：输入字母，打印俄罗斯方块的*图形，输入468可以移动</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 文件名称：Model-Tetris.PY# 开发工具：PyCharmTetris = {'L': [[1, 1], [1, 2], [1, 3], [2, 3]],         'O': [[1, 1], [2, 1], [1, 2], [2, 2]],         'J': [[2, 1], [2, 2], [1, 3], [2, 3]],         'Z': [[1, 1], [2, 1], [2, 2], [3, 2]],         'S': [[1, 1], [1, 2], [2, 2], [2, 3]],         'I': [[1, 1], [1, 2], [1, 3], [1, 4]],         'T': [[1, 1], [2, 1], [2, 2], [3, 1]]}def L_char(char):    flag = 0    for i in range(0, 7):        for j in range(0, 7):            for li in range(0, len(Tetris[char])):  # Tetris['L']                if j == Tetris[char][li][0] and i == Tetris[char][li][1]:                    flag = 1            if flag == 1:                print("*", end='')            else:                print(" ", end='')            flag = 0        print()def move(char, num):    if num == 2:        for li in range(0, len(Tetris[char])):            Tetris[char][li][1] += 1    if num == 4:        for li in range(0, len(Tetris[char])):            Tetris[char][li][0] -= 1    if num == 6:        for li in range(0, len(Tetris[char])):            Tetris[char][li][0] += 1    if num == 8:        for li in range(0, len(Tetris[char])):            Tetris[char][li][1] -= 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 文件名称：Test-Tetris.PY# 开发工具：PyCharm   from Day05 import Model_Tetrisif __name__ == '__main__':    char = input("请输入图形：")    Model_Tetris.L_char(char)    while True:        num = int(input("请输入移动代码2/4/6/8:"))        if num == 8 or num == 2 or num == 4 or num == 6:            Model_Tetris.move(char, num)            Model_Tetris.L_char(char)        else:            break<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="俄罗斯方块-旋转"><a href="#俄罗斯方块-旋转" class="headerlink" title="俄罗斯方块-旋转"></a>俄罗斯方块-旋转</h2><p>主要思想：预定义4X4的坐标转换，旋转式查找字典中的转换坐标，进行相应的替换</p><h3 id="功能：输入字母，打印俄罗斯方块的-图形，输入468可以移动，输入5可以旋转"><a href="#功能：输入字母，打印俄罗斯方块的-图形，输入468可以移动，输入5可以旋转" class="headerlink" title="功能：输入字母，打印俄罗斯方块的*图形，输入468可以移动，输入5可以旋转"></a>功能：输入字母，打印俄罗斯方块的*图形，输入468可以移动，输入5可以旋转</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">#!/usr/bin/python# _*_coding:utf-8_*_# 开发人员：zys# 开发时间：2021/4/16 16:50 # 文件名称：Test-Tetris.PY# 开发工具：PyCharm   import randomfrom Day06.test1 import Model_Tetrisif __name__ == '__main__':    # 随机生成方法    # Character = "LOJSZIT"    # char = random.choice(Character)    char = "L"    Model_Tetris.L_char(char)    while True:        num = int(input("请输入移动代码4/5/6/8:")) # 5是旋转        if num == 8 or num == 4 or num == 6:            Model_Tetris.move(char, num)            Model_Tetris.L_char(char)        elif num == 5:            Model_Tetris.revolve(char)            Model_Tetris.L_char(char)        else:            break<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">#!/usr/bin/python# _*_coding:utf-8_*_# 开发人员：zys# 开发时间：2021/4/16 16:36 # 文件名称：Model-Tetris.PY# 开发工具：PyCharmTetris = {'L': [[1, 1], [1, 2], [1, 3], [2, 3]],         'O': [[1, 1], [1, 2], [2, 1], [2, 2]],         'J': [[1, 2], [2, 2], [3, 1], [3, 2]],         'Z': [[1, 1], [1, 2], [2, 2], [2, 3]],         'S': [[1, 1], [2, 1], [2, 2], [3, 2]],         'I': [[1, 1], [2, 1], [3, 1], [4, 1]],         'T': [[1, 1], [1, 2], [2, 2], [1, 3]]}# 4*4旋转'''这里补充一个知识点：    字典中的key是不可变的，所以不能用list作为字典的key，    因为list可以修改，这里采用了元组作为key，指明不可改变，    后面地址查值的时候需要进行类型转换。'''rotateDict = {(1, 1): [4, 1], (1, 2): [3, 1], (1, 3): [2, 1], (1, 4): [1, 1],              (2, 1): [4, 2], (3, 1): [4, 3], (4, 1): [4, 4], (4, 2): [3, 4],              (4, 3): [2, 4], (4, 4): [1, 4], (3, 4): [1, 3], (2, 4): [1, 2],              (2, 2): [3, 2], (3, 2): [3, 3], (3, 3): [2, 3], (2, 3): [2, 2]}def L_char(char):    flag = 0    for i in range(0, 5):        for j in range(0, 5):            for li in range(0, len(Tetris[char])):  # Tetris['L']                if j == Tetris[char][li][0] and i == Tetris[char][li][1]:                    flag = 1            if flag == 1:                print("*", end='')            else:                print(" ", end='')            flag = 0        print()def move(char, num):    if num == 2:        for li in range(0, len(Tetris[char])):            Tetris[char][li][1] += 1    if num == 4:        for li in range(0, len(Tetris[char])):            Tetris[char][li][0] -= 1    if num == 6:        for li in range(0, len(Tetris[char])):            Tetris[char][li][0] += 1    if num == 8:        for li in range(0, len(Tetris[char])):            Tetris[char][li][1] -= 1def revolve(char):    newTetris = []  # 新的list    for i in range(len(Tetris[char])):        newTetris.append(rotateDict[tuple(Tetris[char][i])])   # 对应坐标添加到新的坐标    Tetris[char] = newTetris<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><a href="https://imgtu.com/i/cIUbOs"><img src="https://z3.ax1x.com/2021/04/18/cIUbOs.png" alt="cIUbOs.png"></a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 字典 </tag>
            
            <tag> 列表 </tag>
            
            <tag> 元组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 历届试题 小朋友排队 Python</title>
      <link href="2021/04/15/%E8%93%9D%E6%A1%A5%E6%9D%AF%20%E5%8E%86%E5%B1%8A%E8%AF%95%E9%A2%98%20%E5%B0%8F%E6%9C%8B%E5%8F%8B%E6%8E%92%E9%98%9F%20python/"/>
      <url>2021/04/15/%E8%93%9D%E6%A1%A5%E6%9D%AF%20%E5%8E%86%E5%B1%8A%E8%AF%95%E9%A2%98%20%E5%B0%8F%E6%9C%8B%E5%8F%8B%E6%8E%92%E9%98%9F%20python/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯-历届试题-小朋友排队-Python"><a href="#蓝桥杯-历届试题-小朋友排队-Python" class="headerlink" title="蓝桥杯 历届试题 小朋友排队 Python"></a>蓝桥杯 历届试题 小朋友排队 Python</h2><p>问题描述<br>　　n 个小朋友站成一排。现在要把他们按身高从低到高的顺序排列，但是每次只能交换位置相邻的两个小朋友。</p><p>每个小朋友都有一个不高兴的程度。开始的时候，所有小朋友的不高兴程度都是0。</p><p>如果某个小朋友第一次被要求交换，则他的不高兴程度增加1，如果第二次要求他交换，则他的不高兴程度增加2（即不高兴程度为3），依次类推。当要求某个小朋友第k次交换时，他的不高兴程度增加k。</p><p>请问，要让所有小朋友按从低到高排队，他们的不高兴程度之和最小是多少。</p><p>如果有两个小朋友身高一样，则他们谁站在谁前面是没有关系的。<br>输入格式<br>　　输入的第一行包含一个整数n，表示小朋友的个数。<br>　　第二行包含 n 个整数 H1 H2 … Hn，分别表示每个小朋友的身高。<br>输出格式<br>　　输出一行，包含一个整数，表示小朋友的不高兴程度和的最小值。<br>样例输入<br>3<br>3 2 1<br>样例输出<br>9<br>样例说明<br>　　首先交换身高为3和2的小朋友，再交换身高为3和1的小朋友，再交换身高为2和1的小朋友，每个小朋友的不高兴程度都是3，总和为9。<br>数据规模和约定<br>　　对于10%的数据， 1&lt;=n&lt;=10；<br>　　对于30%的数据， 1&lt;=n&lt;=1000；<br>　　对于50%的数据， 1&lt;=n&lt;=10000；<br>　　对于100%的数据，1&lt;=n&lt;=100000，0&lt;=Hi&lt;=1000000。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>每一个小朋友最少的交换次数等于他左边比他高的人数加上右边比他矮的人数和。如果从左往右依次对每一个小朋友遍历，会超时，得分在20左右。<br>使用树状数组，先从左往右依次插入元素，每一次插入前查询比当前元素大的元素个数（即以当期前元素为后项的逆序对个数），作为左边比他大的元素个数；<br>再将树状数组清零，从右往左依次插入元素，每一次插入前查询比当前元素小的元素个数（即以当期前元素为前项的逆序对个数），作为右边比他小的元素个数，最后得到每一个元素最少的交换次数，进而求出总的不高兴程度。<br>但是为什么这段代码还是只得了70分，求大神解答。。。。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def discretization(h):#数组离散化    temp=list(set(h))    temp.sort()    for i in range(len(h)):        h[i]=temp.index(h[i])+1def lowbit(x):    return x&amp;-xdef insert(i):    while i&lt;len(C):        C[i]+=1        i+=lowbit(i)def sum_(i):#计算当前状态下i之前的元素总和(即当前状态下比i小的元素)    s=0    while(i&gt;0):        s+=C[i]        i-=lowbit(i)    return sn=int(input())H=list(map(int,input().split()))ans=[0 for _ in range(n)]#用于存储每个小朋友的最少交换次数res=0discretization(H)C=[0 for _ in range(len(set(H))+1)]#数状数组for i in range(n):#从最左端开始插入，计算比当前元素大的元素个数    ans[i]=i-sum_(H[i])    insert(H[i])C=[0 for _ in range(len(set(H))+1)]#数状数组清零for i in range(n-1,-1,-1):#从最右端开始插入，计算比当前元素小的元素个数    ans[i]+=sum_(H[i]-1)    insert(H[i])for i in range(n):    res+=int((1+ans[i])*ans[i]/2)print(res)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解js继承的六种方式</title>
      <link href="2021/04/10/%E7%90%86%E8%A7%A3js%E7%BB%A7%E6%89%BF%E7%9A%84%E5%85%AD%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>2021/04/10/%E7%90%86%E8%A7%A3js%E7%BB%A7%E6%89%BF%E7%9A%84%E5%85%AD%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><p><code>原型链继承是ECMAScript的主要继承方式。其基本思想就是通过原型继承多个引用类型的属性和方法。什么是原型链?每个构造函数都会有一个原型对象，调用构造函数创建的实例会有一个指针__proto__指向原型对象,这个原型可能是另一个类型的实例，所以内部可能也有一个指针指向另一个原型，然后就这样形成了一条原型链。</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">代码</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuperValue</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 继承SuperType</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSubValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//注意 不能通过对象字面量的方式添加新方法，否则上一行无效</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>缺点</code><br><code>1.如果父类实例的属性是引用类型的时候，其实父类的实例属性会成为子类的原型属性,子类创建的所有实例都会共享这些方法，修改一个实例的这个属性，其他实例的属性也会被修改</code><br><code>2.子类型在实例化时不能给父类型的构造函数传参</code></p><h2 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h2><p><code>为了解决原型包含引用值导致的继承问题，出现了一中’盗用构造函数’的技术流行起来，也被称为’对象伪装’或’经典继承’，思路就是在子类构造函 数中调用父类构造函数。可以使用call() apply()的方法以新创建的对象为上下文执行函数</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">)</span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token string">'小白'</span><span class="token punctuation">)</span>instance1<span class="token punctuation">.</span>colors <span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">)</span> <span class="token comment">//{name:"小明",colors:["red","blue","green","yellow"]...}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span> <span class="token comment">//{name:"小白",colors:["red","blue","green"]...}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>缺点:</code><br><code>1.只能在构造函数中调用方法 函数不能重用 就是每次子类生成实例的时候都会生成一次属性和方法</code><br><code>2. 子类无法访问到父类原型上的方法</code></p><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p><code>综合了原型链和构造函数，将两者的优点集中了起来。基本的思路是使用原型链继承原型上的属性和方法，而通过构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 继承属性 第二次调用</span><span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 继承方法  第一次调用</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["red,blue,green,black"]</span>instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Nicholas";</span>instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 29</span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["red,blue,green"]</span>instance2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Greg";</span>instance2<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 27</span><span class="token comment">//可以继承父类原型上的属性，可以传参，可复用。 每个新实例引入的构造函数属性是私有的 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>缺点</code><br><code>调用了两次父类构造函数 比较耗内存</code></p><h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><p><code>即使不自定义类型也可以通过原型实现对象之间的信息共享。</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span>  <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> person  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span><span class="token string">'小明'</span><span class="token punctuation">,</span>  colors<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>person1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>person1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">//['red','blue','green','yellow']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>适用环境: 你有一个对象，想在它的基础上再创建一个新对象。你需要把这个对象先传给object() ，然后再对返回的对象进行适当修改。类似于 Object.create()只传第一个参数的时候，本质上就是对传入的对象进行了一次浅复制,缺点就是新实例的属性都是后面添加的,无法复用</code></p><h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><p><code>与原型式继承比较接近的一种继承方式是寄生式继承，类似于寄生构造函数和工厂模式：创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象。</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span>  <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> person  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">let</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过调用函数创建一个新对象</span>clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 以某种方式增强这个对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> clone<span class="token punctuation">;</span> <span class="token comment">// 返回这个对象</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>寄生式继承同样适合主要关注对象，而不在乎类型和构造函数的场景。</code><br><code>缺点:通过寄生式继承给对象添加函数会导致函数难以重用，与构造函数模式类似</code></p><h2 id="寄生式组合继承"><a href="#寄生式组合继承" class="headerlink" title="寄生式组合继承"></a>寄生式组合继承</h2><p><code>最常用的继承方式，也是最佳的，组合继承会调用两次父类构造函数，存在效率问题。其实本质上子类原型最终是要包含父类对象的所有实例属性，子类构造函数只要在执行时重写自己的原型就行了。基本思路是不通过调用父类构造函数给子类原型赋值，而是取得父类原型的一个副本。说到底就是使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型。</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//核心代码</span><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> person  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">SubType<span class="token punctuation">,</span>SuperType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> prototype <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//生成一个父类原型的副本</span>  <span class="token comment">//重写这个实例的constructor</span>  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType  <span class="token comment">//将这个对象副本赋值给  子类的原型</span>  <span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//调用inheritPrototype函数给子类原型赋值,修复了组合继承的问题</span><span class="token function">inheritPrototype</span><span class="token punctuation">(</span>SubType<span class="token punctuation">,</span> SuperType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端复习总结HTML+CSS-超详细，超全面</title>
      <link href="2021/04/10/HTML5+CSS3%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>2021/04/10/HTML5+CSS3%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML5-CSS3复习总结"><a href="#HTML5-CSS3复习总结" class="headerlink" title="HTML5+CSS3复习总结"></a>HTML5+CSS3复习总结</h2><h2 id="一、HTML基础"><a href="#一、HTML基础" class="headerlink" title="一、HTML基础"></a>一、HTML基础</h2><h3 id="1-网页开发工具"><a href="#1-网页开发工具" class="headerlink" title="1.网页开发工具"></a>1.网页开发工具</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-lt-！DOCTYPE-gt-标签"><a href="#1-lt-！DOCTYPE-gt-标签" class="headerlink" title="(1)<！DOCTYPE >标签"></a>(1)&lt;！DOCTYPE &gt;标签</h4><ul><li>它是文档类型声明，作用就是告诉浏览器使用哪种HTML版本来显示网页。</li></ul><ul><li>声明位于文档中的最前面的位置，处于&lt; html&gt; 标签之前。</li></ul><ul><li>它不是一个HTML 标签，是文档类型声明标签。</li></ul><h4 id="2-lang语言"><a href="#2-lang语言" class="headerlink" title="(2)lang语言"></a>(2)lang语言</h4><ul><li>用来定义当前文档显示的语言。</li></ul><ul><li>en定义语言为英语 , zh-CN定义语言为中文</li></ul><ul><li>对于文档显示来说，定义成en的文档也可以显示中文，定义成zh-CN的文档也可以显示英文</li></ul><h4 id="3-charset-字符集"><a href="#3-charset-字符集" class="headerlink" title="(3)charset 字符集"></a>(3)charset 字符集</h4><ul><li>字符集(Character set)是多个字符的集合。以便计算机能够识别和存储各种文字。</li></ul><ul><li>上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用“UTF-8”编码。</li></ul><h3 id="2-常用基本标签"><a href="#2-常用基本标签" class="headerlink" title="2.常用基本标签"></a>2.常用基本标签</h3><h4 id="1-文本标签"><a href="#1-文本标签" class="headerlink" title="(1)文本标签"></a>(1)文本标签</h4><ul><li>标题<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>标题一共六级选,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>文字加粗一行显。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>由大到小依次减，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>从重到轻随之变。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">&gt;</span></span>语法规范书写后，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span>具体效果刷新见。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>对齐方式<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>三种对齐方式：left，center，right</code></p><ul><li>文本</li></ul><table><thead><tr><th>语义</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>加粗</td><td><code>&lt;strong&gt;&lt;/strong&gt;</code>或者<code>&lt;b&gt;&lt;/b&gt;</code></td><td>更推荐使用<code>&lt;strong&gt;</code>标签，语义更强烈</td></tr><tr><td>倾斜</td><td><code>&lt;em&gt;&lt;/em&gt;</code>或者<code>&lt;i&gt;&lt;/i&gt;</code></td><td>更推荐使用<code>&lt;em&gt;</code>标签，语义更强烈</td></tr><tr><td>删除线</td><td><code>&lt;del&gt;&lt;/del&gt;</code>或者<code>&lt;s&gt;&lt;/s&gt;</code></td><td>更推荐使用<code>&lt;del&gt;</code>标签，语义更强烈</td></tr><tr><td>下划线</td><td><code>&lt;ins&gt;&lt;/ins&gt;</code>或者<code>&lt;u&gt;&lt;/u&gt;</code></td><td>更推荐使用<code>&lt;ins&gt;</code>标签，语义更强烈</td></tr></tbody></table><ul><li>上标与下标</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>上标标记内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span>下标标记内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">&gt;</span></span>例：    x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>    2x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>段落、水平线</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>段落标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  //有较大空白缝隙<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>换行标签    //强制换行，单标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>           //水平线标记<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>div和span标签</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>     // 用来布局，但是现在一行只能放一个div。大盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  //用来布局，一行上可以多个span。小盒子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>图像标签和路径</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片的位置<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>图片路径</td><td>必须属性</td></tr><tr><td>alt</td><td>文本</td><td>替换文本，图片不能显示的文字</td></tr><tr><td>title</td><td>文本</td><td>提示文本鼠标放到图像上，显示文字</td></tr><tr><td>width</td><td>像素</td><td>设置图片的宽度</td></tr><tr><td>height</td><td>像素</td><td>设置图像的高度</td></tr><tr><td>border</td><td>像素</td><td>设置图片的边框粗细</td></tr></tbody></table><p><code>1.相对路径：以引用文件所在位置为参考基础，图片相对于HTML页面的位置</code><br><code>2.绝对路径：是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。</code></p><table><thead><tr><th>相对路径分类</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>同一级路径</td><td></td><td>图像文件位于HTML文件同一级 如<code>&lt;img src="baidu.gif"/&gt;</code></td></tr><tr><td>下一级路径</td><td>/</td><td>图像文件位于HTML文件下一级 如<code>&lt;img src="images/baidu.gif"/&gt;</code></td></tr><tr><td>上一级路径</td><td>../</td><td>图像文件位于HTML文件上一级 如<code>&lt;img src="../baidu.gif"/&gt;</code></td></tr></tbody></table><ul><li>超链接标签<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>跳转目标<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>目标窗口的弹出方式<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文本或图像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>用于指定链接目标的url地址，(必须属性)当为标签应用href属性时，它就具有了超链接的功能</td></tr><tr><td>target</td><td>用于指定链接页面的打开方式，其中_self为默认值，_blank为在新窗口中打开方式。</td></tr></tbody></table><ul><li>链接分类：</li></ul><ol><li>外部链接</li><li>内部链接</li><li>空链接:如果当时没有确定链接目标时，&lt; a href=”#”&gt; 首页&lt; /a &gt; 。</li><li>下载链接</li><li>网页元素链接: 在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接.</li><li>锚点链接: 点击链接,可以快速定位到页面中的某个位置。</li></ol><h4 id="2-表格标签"><a href="#2-表格标签" class="headerlink" title="(2)表格标签"></a>(2)表格标签</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>                             //是用于定义表格的标签        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                         //定义表格中的行，必须嵌套在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>标签中。        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                  // 表格的表头部分,加粗显示            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>单元格内的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>   // 定义表格中的单元格，必须嵌套在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>标签中。            ...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>表格结构标签</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">&gt;</span></span>：     //用于定义表格的头部。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span>：     //用于定义表格的主体。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>合并单元格<br><code>1. 跨行合并：rowspan=“合并单元格的个数”</code><br><code>2.跨列合并：colspan=“合并单元格的个数”</code></li></ul><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>align</td><td>left、center、right</td><td>规定表格相对周围元素的对齐方式</td></tr><tr><td>border</td><td>1或””</td><td>规定表格单元是否拥有边框，默认为””,表示没有边框</td></tr><tr><td>cellpadding</td><td>像素值</td><td>规定单元边沿与其内容之间的空白，默认1像素</td></tr><tr><td>cellspacing</td><td>像素值</td><td>规定单元格之间的空白，默认2像素</td></tr><tr><td>width</td><td>像素值或百分比</td><td>规定表格的宽度</td></tr></tbody></table><h4 id="3-列表标签"><a href="#3-列表标签" class="headerlink" title="(3)列表标签"></a>(3)列表标签</h4><ul><li><p>无序列表</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>//最常用，没有固定的顺序，默认有小圆点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>有序列表</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>//有先后顺序，默认有数字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义列表</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>名词1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>名词1解释1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>名词1解释2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">&gt;</span></span>//1. 一个名称对应一个值 2.一个名称对应多个值 3.多个名称对应一个值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-表单标签"><a href="#4-表单标签" class="headerlink" title="(4)表单标签"></a>(4)表单标签</h4><ul><li><p>表单的组成<br>提示信息,表单域,表单控件（表单元素)</p></li><li><p>表单域</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“url地址”</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“提交方式”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“表单域名称”</span><span class="token punctuation">&gt;</span></span>     各种表单元素控件 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url地址</td><td>用于指定接收并处理表单数据的服务器程序的url地址</td></tr><tr><td>method</td><td>get/post</td><td>用于设置表单数据的提交方式，其取值为get或post</td></tr><tr><td>name</td><td>名称</td><td>用于指定表单的名称，以区分同一个页面中的多个表单域</td></tr></tbody></table><p><code>1.在我们写表单元素之前,应该有个表单域把他们进行包含.</code><br><code>2.表单域是form标签.</code></p><ul><li>表单控件<br>（1.input表单元素2.select表单元素3.textarea元素<br>input 输入表单元素</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>button</td><td>定义可点击按钮（多数情况下，用于通过JavaScript启动脚本）</td></tr><tr><td>checkbox</td><td>定义复选框</td></tr><tr><td>file</td><td>定义输入字段和“浏览”按钮，供文件上传</td></tr><tr><td>hidden</td><td>定义隐藏的输入字段</td></tr><tr><td>image</td><td>定义图像形式的提交按钮</td></tr><tr><td>password</td><td>定义密码字段，该字段中的字符被掩码</td></tr><tr><td>radio</td><td>定义单选按钮</td></tr><tr><td>reset</td><td>定义重置按钮，重置按钮会清楚表单中的所有数据</td></tr><tr><td>submit</td><td>定义提交按钮，提交按钮会把表单数据发送到服务器</td></tr><tr><td>text</td><td>定义单行的输入字段，用户可在其中输入文本，默认宽度为20个字符</td></tr></tbody></table><p><code>1.刚打开页面就默认显示几个文字：可以给这些表单元素设置value 属性=“值”</code><br><code>2.一打开就让某个单选按钮或者复选框是选中状态：checked 属性：表示默认选中状态。 添加checked=“checked”</code><br><code>3.radio (或者checkbox）如果是一组，我们必须给他们命名相同的名字</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>女 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>1.&lt; label&gt; 标签</code><br><code>2.作用：点击区域内就可以选择</code><br><code>3.代码：&lt; label for = “id”&gt; &lt; /label&gt;</code></p><ul><li>select下拉表单元素<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>      ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><code>1.&lt; select&gt; 中至少包含一对&lt; option&gt;</code><br><code>2. 在 中定义selected =“selected " 时，当前项为默认选中项。</code></p><ul><li>textarea文本域元素<br>语法：<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    文本内容  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><code>1.通过 标签可以轻松地创建多行文本输入框</code><br><code>cols=“每行中的字符数”，rows=“显示的行数”，我们在实际开发中不会使用，都是用CSS 来改变大小。</code></p><p>简历案例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>个人信息注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>个人介绍 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入您的姓名<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>性别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nan<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nan<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/up.jpg<span class="token punctuation">"</span></span>                        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>男                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/down.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>女            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>出生日期：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>--请选择年份--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>2000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>2001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>2002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>2003<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>--请选择月份--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>--请选择日--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>籍贯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>重庆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>山西<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>山东<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>个人爱好：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>love<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>唱歌                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>love<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>画画                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>love<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>跳舞            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>求职原因<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>对公司的描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>手机号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重新填写<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>了解更多<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>关注公司<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>附件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">&gt;</span></span>选拔标准<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>态度认真<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>阳光开朗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>专业技能突出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-HTML5新增"><a href="#3-HTML5新增" class="headerlink" title="3.HTML5新增"></a>3.HTML5新增</h3><h4 id="1-HTML5新增的语义化标签"><a href="#1-HTML5新增的语义化标签" class="headerlink" title="(1)HTML5新增的语义化标签"></a>(1)HTML5新增的语义化标签</h4><ul><li>&lt; header&gt;：头部标签 </li><li>&lt; nav&gt;：导航标签</li><li>&lt; article&gt;：内容标签</li><li>&lt; section&gt;：定义文档某个区域</li><li>&lt; aside&gt;：侧边栏标签</li><li>&lt; footer&gt;：尾部</li></ul><h4 id="2-新增的多媒体标签"><a href="#2-新增的多媒体标签" class="headerlink" title="(2)新增的多媒体标签"></a>(2)新增的多媒体标签</h4><ul><li>音频：&lt; audio&gt;</li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>如果出现该属性，则音频在就绪后马上播放</td></tr><tr><td>controls</td><td>controls</td><td>如果出现该属性，则向用户显示控件，比如播放按钮</td></tr><tr><td>loop</td><td>loop</td><td>如果出现该属性，则每当音频结束时重新开始播放</td></tr><tr><td>src</td><td>url</td><td>要播放的音频的URL</td></tr></tbody></table><ul><li>视频：&lt; video&gt;</li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>如果出现该属性，则视频在就绪后自动播放，谷歌浏览器需要添加muted来解决自动播放问题</td></tr><tr><td>controls</td><td>controls</td><td>如果出现该属性，则向用户显示播放控件</td></tr><tr><td>loop</td><td>loop</td><td>如果出现该属性，循环播放</td></tr><tr><td>src</td><td>url</td><td>要播放的视频的URL</td></tr><tr><td>width</td><td>像素</td><td>设置播放器宽度</td></tr><tr><td>height</td><td>像素</td><td>设置播放器高度</td></tr><tr><td>preload</td><td>auto(预先加载视频)none(不应加载视频)</td><td>规定是否预加载视频（如果有了autoplay 就忽略该属性）</td></tr><tr><td>poster</td><td>imgurl</td><td>加载等待的画面图片</td></tr><tr><td>muted</td><td>muted</td><td>静音播放</td></tr></tbody></table><h4 id="3-新增的input类型"><a href="#3-新增的input类型" class="headerlink" title="(3)新增的input类型"></a>(3)新增的input类型</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>type=”email”</td><td>限制用户输入必须为Email类型</td></tr><tr><td>type=”url”</td><td>限制用户输入必须为URL类型</td></tr><tr><td>type=”date”</td><td>限制用户输入必须为日期类型</td></tr><tr><td>type=”time”</td><td>限制用户输入必须为时间类型</td></tr><tr><td>type=”month”</td><td>限制用户输入必须为月类型</td></tr><tr><td>type=”week”</td><td>限制用户输入必须为周类型</td></tr><tr><td>type=”number”</td><td>限制用户输入必须为数字类型</td></tr><tr><td>type=”tel”</td><td>手机号码</td></tr><tr><td>type=”search”</td><td>搜索框</td></tr><tr><td>type=”color”</td><td>生成一个颜色选择表单</td></tr></tbody></table><h4 id="4-新增的表单属性"><a href="#4-新增的表单属性" class="headerlink" title="(4)新增的表单属性"></a>(4)新增的表单属性</h4><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>表单拥有该属性表示其内容不能为空，必填</td></tr><tr><td>placeholder</td><td>提示文本</td><td>表单的提示信息，存在默认值将不显示</td></tr><tr><td>autofocus</td><td>autofocus</td><td>自动聚焦属性，页面加载完成自动聚焦到指定表单</td></tr><tr><td>autocomplete</td><td>off/on</td><td>当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示字段中填写的选项。默认已经打开，如autocomplete=”on”，关闭autocomplete=”off”需要放在表单内，同事加上name属性，同时成功提交</td></tr><tr><td>multiple</td><td>multiple</td><td>可以多选文件提交</td></tr></tbody></table><h2 id="二、CSS"><a href="#二、CSS" class="headerlink" title="二、CSS"></a>二、CSS</h2><h3 id="1-CSS选择器"><a href="#1-CSS选择器" class="headerlink" title="1.CSS选择器"></a>1.CSS选择器</h3><p><code>在CSS 中，可以根据选择器的类型把选择器分为基础选择器和复合选择器，复合选择器是建立在基础选择器之上，对基本选择器进行组合形成的。</code></p><h4 id="1-css基础选择器"><a href="#1-css基础选择器" class="headerlink" title="(1)css基础选择器"></a>(1)css基础选择器</h4><p>标签选择器、类选择器、id 选择器 、通配符选择器</p><ol><li><p>标签选择器</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">p {  属性：属性值;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>类选择器</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">.red {color: red;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>（1）结构需要用class属性来调用class 类 （2）可以在标签class 属性中写多个类名 （3）多个类名中间必须用空格分开</code></p></li><li><p>id选择器</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">#nav {color:red;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p><code> (1)HTML 元素以id 属性来设置id 选择器，CSS 中id 选择器以“#" 来定义。  (2)id 属性只能在每个HTML 文档中出现一次。</code></p><ol start="4"><li>通配符选择器<pre class="line-numbers language-html" data-language="html"><code class="language-html">* { margin: 0;padding: 0;} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><code>它表示选取页面中所有元素（标签）。</code></li></ol><table><thead><tr><th>基础选择器</th><th>作用</th><th>特点</th><th>使用情况</th><th>用法</th></tr></thead><tbody><tr><td>标签选择器</td><td>可以选出所有相同的标签</td><td>不能差异化选择</td><td>较多</td><td>p{};</td></tr><tr><td>类选择器</td><td>可以选出1个或多个标签</td><td>可以根据需求选择</td><td>非常多</td><td>.p{};</td></tr><tr><td>id选择器</td><td>一次只能选择1个标签</td><td>id属性只能在每个HTML文档出现一次</td><td>一般和js搭配</td><td>#nav{};</td></tr><tr><td>通配符选择器</td><td>选出所有的标签</td><td>选择的太多，有部分不需要</td><td>特殊情况使用</td><td>*{};</td></tr></tbody></table><h4 id="2-css复合选择器（引用选择器）"><a href="#2-css复合选择器（引用选择器）" class="headerlink" title="(2)css复合选择器（引用选择器）"></a>(2)css复合选择器（引用选择器）</h4><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择后代元素</td><td>可以使子孙后代</td><td>较多</td><td>符号是空格.nav a</td></tr><tr><td>子代选择器</td><td>选择最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是大于.nav&gt;p</td></tr><tr><td>并集选择器</td><td>选择某些相同样式的元素</td><td>可以用于集体声明</td><td>较多</td><td>符号是逗号.nav,.header</td></tr><tr><td>链接伪类选择器</td><td>选择不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>重点记住a{}和a:hover实际开发的写法</td></tr><tr><td>:focus选择器</td><td>选择获得光标的表单</td><td>跟表单相关</td><td>较少</td><td>input:focus 记住这个写法</td></tr></tbody></table><p>注意：<br><code>链接伪类选择器按照LVHA的循顺序声明:link－:visited－:hover－:active。记忆法：love hate 或者lv 包包hao。</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">a:link           /*选择所有未被访问的链接*/a:visited        /*选择所有已被访问的链接*/a:hover          /*选择鼠标指针位于其上的链接*/a:active         /*选择活动链接（鼠标按下未弹起的链接）*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-CSS字体属性"><a href="#2-CSS字体属性" class="headerlink" title="2.CSS字体属性"></a>2.CSS字体属性</h3><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td>font-size</td><td>字号</td><td>我们通常用的单位是px像素，一定要跟上单位</td></tr><tr><td>font-family</td><td>字体</td><td>实际工作中按照团队约定来写字体</td></tr><tr><td>font-weight</td><td>字体粗细</td><td>记住加粗是700或者bold不加粗是normal或者400记住数字不要跟单位</td></tr><tr><td>font-style</td><td>字体样式</td><td>记住倾斜是italic  不倾斜是normal 工作中我们最常用的是normal</td></tr><tr><td>font</td><td>字体连写</td><td>1.字体连写是有顺序的 不能随意换位置2.其中字号和字体必须同时出现</td></tr></tbody></table><h3 id="3-CSS文本属性"><a href="#3-CSS文本属性" class="headerlink" title="3.CSS文本属性"></a>3.CSS文本属性</h3><ul><li>(1)文本颜色<pre class="line-numbers language-html" data-language="html"><code class="language-html">div { color：red; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><table><thead><tr><th>表示</th><th>属性值</th></tr></thead><tbody><tr><td>预定义的颜色值</td><td>red,green,blue,还有我们的御用色pink</td></tr><tr><td>十六进制</td><td>#FF0000,#FF6600,#29D794</td></tr><tr><td>RGB代码</td><td>rgb(255,0,0)或rgb(100%,0%,0%)</td></tr></tbody></table><ul><li>(2)装饰文本<pre class="line-numbers language-html" data-language="html"><code class="language-html">div { text-decoration：underline；}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。没有装饰线（最常用）</td></tr><tr><td>underline</td><td>下划线。链接a自带下划线（常用）</td></tr><tr><td>overline</td><td>上划线。（几乎不用）</td></tr><tr><td>line-through</td><td>删除线。（不常用）</td></tr></tbody></table><ul><li>(3)文本缩进<br>首行缩进:<pre class="line-numbers language-html" data-language="html"><code class="language-html">div { text-indent: 10px;}p { text-indent: 2em;}1.px像素相对长度单位。像素px是相对于显示器屏幕分辨率而言的。2.em是一个相对单位，就是当前元素1个文字的大小, <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>(4)行间距</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">p { line-height: 26px;}控制行高<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>(5)对齐方式</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">div { text-align: center;  居中 }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认值）</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><h3 id="4-CSS的引入方式"><a href="#4-CSS的引入方式" class="headerlink" title="4.CSS的引入方式"></a>4.CSS的引入方式</h3><ul><li><p>（1）内部样式表（嵌入式）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">   <span class="token selector">div</span> <span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>     <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>（2）行内样式表（行内式）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>元宝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>（3）外部样式表（链接式）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css文件路径<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便，权重高</td><td>结构样式混乱</td><td>较少</td><td>控制一个标签</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多，推荐</td><td>控制多个页面</td></tr></tbody></table><h3 id="5-CSS元素显示模式"><a href="#5-CSS元素显示模式" class="headerlink" title="5.CSS元素显示模式"></a>5.CSS元素显示模式</h3><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或则其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度和高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><p><code>转换为块元素：display:block;</code><br><code>转换为行内元素：display:inline;</code><br><code>转换为行内块：display: inline-block;</code></p><h3 id="6-CSS背景"><a href="#6-CSS背景" class="headerlink" title="6.CSS背景"></a>6.CSS背景</h3><ul><li>（1）背景颜色</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">background-color:颜色值; background-color:transparent; //透明色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>（2）背景图片</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">background-image : none；                    //无背景background-image : url（../images/1.jpg);  //图片地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>（3）背景平铺</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">background-repeat: repeat | no-repeat | repeat-x | repeat-y;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>repeat</td><td>背景图像在纵向和横向上平铺（默认的）</td></tr><tr><td>no-repeat</td><td>背景图像不平铺</td></tr><tr><td>repeat-x</td><td>背景图像在横向上平铺</td></tr><tr><td>repeat-y</td><td>背景图像在纵向上平铺</td></tr></tbody></table><ul><li>(4)背景图片位置 <pre class="line-numbers language-html" data-language="html"><code class="language-html">background-position:x  y;   //参数代表的意思是：x 坐标和y 坐标。可以使用方位名词或者精确单位<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>百分数、有浮点数字和单位标识符组成的长度值</td></tr><tr><td>position</td><td>top、center、bottom、left、right方位名词</td></tr></tbody></table><ul><li>(5)背景图像固定（背景附着）<pre class="line-numbers language-html" data-language="html"><code class="language-html">background-attachment :scroll;   //随对象内容滚动background-attachment :fixed;    //图像固定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>+（6）背景图像复合写法<br><code>background: -背景颜色 -背景图片地址 -背景平铺 -背景图像滚动 -背景图片位置;</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">background: transparent url(image.jpg) repeat-y  fixed  top ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>+（7）背景颜色半透明 </p><pre class="line-numbers language-html" data-language="html"><code class="language-html">background: rgba(0, 0, 0,.3);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>最后一个参数是alpha 透明度，取值范围在0~1之间。</code></p><table><thead><tr><th>属性</th><th>作用</th><th>值</th></tr></thead><tbody><tr><td>background-color</td><td>背景图片</td><td>预定义的颜色/十六进制/RGB代码</td></tr><tr><td>background-image</td><td>背景图片</td><td>url(图片路径)</td></tr><tr><td>background-repeat</td><td>是否平铺</td><td>repeat/no-repeat/repeat-x/repeat-y</td></tr><tr><td>background-position</td><td>背景位置</td><td>length/position 分别是x和y坐标</td></tr><tr><td>background-attachment</td><td>背景附着</td><td>scroll(背景滚动)/fixed(背景固定)</td></tr><tr><td>背景简写</td><td>书写更简单</td><td>背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td></tr><tr><td>背景色半透明</td><td>背景颜色半透明</td><td>background:rgba(0,0,0,0.3); 后面必须4个值</td></tr></tbody></table><h3 id="7-CSS三大特性"><a href="#7-CSS三大特性" class="headerlink" title="7.CSS三大特性"></a>7.CSS三大特性</h3><ul><li><p>（1）层叠性<br><code>样式冲突，遵循就近原则</code></p></li><li><p>（2）继承性<br><code>行高可以跟单位也可以不跟单位</code><br><code>没有手动指定文字大小，则会继承父亲的文字大小</code></p></li><li><p>（3）优先级</p></li></ul><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承 或者 *</td><td>0，0，0，0</td></tr><tr><td>元素选择器</td><td>0，0，0，1w</td></tr><tr><td>类选择器，伪类选择器</td><td>0，0，1，0</td></tr><tr><td>ID选择器</td><td>0，1，0，0</td></tr><tr><td>行内样式style=””</td><td>1，0，0，0</td></tr><tr><td>！important 重要的</td><td>无穷大</td></tr></tbody></table><h3 id="8-页面布局"><a href="#8-页面布局" class="headerlink" title="8.页面布局"></a>8.页面布局</h3><h4 id="1-盒子模型"><a href="#1-盒子模型" class="headerlink" title="(1)盒子模型"></a>(1)盒子模型</h4><p><code>CSS 盒子模型本质上是一个盒子，封装周围的HTML 元素，它包括：边框、外边距、内边距、和实际内容。</code></p><ul><li>边框<br>border可以设置元素的边框。边框有三部分组成：边框宽度（粗细）边框样式 边框颜色</li></ul><p>语法：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">border : border-width || border-style || border-color<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>定义边框粗细，单位是px</td></tr><tr><td>border-style</td><td>边框的样式</td></tr><tr><td>border-color</td><td>边框颜色</td></tr></tbody></table><pre class="line-numbers language-html" data-language="html"><code class="language-html">border-style:solid;         //实线border-style:dashed;        //虚线border-style:dotted;        //点线<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>内边距<br><code>padding属性用于设置内边距，即边框与内容之间的距离。</code></li></ul><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>padding-left</td><td>左内边距</td></tr><tr><td>padding-right</td><td>右内边距</td></tr><tr><td>padding-top</td><td>上内边距</td></tr><tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table><p>padding属性（简写属性）可以有一到四个值。</p><table><thead><tr><th>值得个数</th><th>表达意思</th></tr></thead><tbody><tr><td>padding：5px;</td><td>1个值，代表上下左右都有5像素内边距</td></tr><tr><td>padding:5px 10px;</td><td>2个值，代表上下内边距是5像素 左右内边距是10像素</td></tr><tr><td>padding:5px 10px 20px;</td><td>3个值，代表上内边距5像素 左右内边距10像素 下内边距20像素</td></tr><tr><td>padding:5px 10px 20px 30;</td><td>4个值，上是5像素 有10像素 下20像素 做30像素 顺时针</td></tr></tbody></table><ul><li>外边距<br><code>margin属性用于设置外边距，即控制盒子和盒子之间的距离。</code></li></ul><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td></tr><tr><td>margin-right</td><td>右外边距</td></tr><tr><td>margin-top</td><td>上外边距</td></tr><tr><td>margin-bottom</td><td>下外边距</td></tr></tbody></table><p><code>外边距可以让块级盒子水平居中，但是必须满足两个条件：</code><br><code>①盒子必须指定了宽度（width）。</code><br><code>②盒子左右的外边距都设置为auto 。margin: 0 auto;</code><br><code>注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加text-align:center 。</code></p><ul><li>圆角边框<pre class="line-numbers language-html" data-language="html"><code class="language-html">border-radius:length;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><code>参数值可以为数值或百分比的形式。</code><br><code>分开写为：border-top-left-radius（左上角）、border-top-right-radius（右上角）、border-bottom-right-radius（右下角） 和border-bottom-left-radius(左下角)</code></p><ul><li>盒子阴影</li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置。允许负值</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置。允许负值</td></tr><tr><td>blur</td><td>可选。模糊距离</td></tr><tr><td>spread</td><td>可选。阴影的尺寸</td></tr><tr><td>color</td><td>可选。阴影的颜色。请参阅CSS颜色值</td></tr><tr><td>inset</td><td>可选。将外部阴影（outset）改为内部阴影</td></tr></tbody></table><ul><li>文字阴影</li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置。允许负值</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置。允许负值</td></tr><tr><td>blur</td><td>可选。模糊的距离</td></tr><tr><td>color</td><td>可选。阴影的颜色。请参阅CSS颜色值</td></tr></tbody></table><h4 id="2-浮动"><a href="#2-浮动" class="headerlink" title="(2)浮动"></a>(2)浮动</h4><p>为什么需要清除浮动？<br><code>①父级没高度。②子盒子浮动了。③影响下面布局了。</code></p><table><thead><tr><th>清楚浮动的方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>额外标签法（隔墙法）</td><td>通俗易懂，书写方便</td><td>添加许多无意义的标签，结构化较差</td></tr><tr><td>父级overflow:hidden;</td><td>书写简单</td><td>溢出隐藏</td></tr><tr><td>父级after伪元素</td><td>结构语义化正确</td><td>由于IE6-7不支持：after,兼容性问题</td></tr><tr><td>父级双伪元素</td><td>结构语义化正确</td><td>由于IE6-7不支持：after,兼容性问题</td></tr></tbody></table><h4 id="3-定位"><a href="#3-定位" class="headerlink" title="(3)定位"></a>(3)定位</h4><ul><li>总结</li></ul><table><thead><tr><th>定位模式</th><th>是否脱标</th><th>移动位置</th><th>是否常用</th></tr></thead><tbody><tr><td>static静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td>relative相对定位</td><td>否（占有位置）</td><td>相对于自身位置移动</td><td>常用</td></tr><tr><td>absolute绝对定位</td><td>是（不占有位置）</td><td>带有定位的父级</td><td>常用</td></tr><tr><td>fixed固定定位</td><td>是（不占有位置）</td><td>浏览器可视区</td><td>常用</td></tr><tr><td>sticky粘性定位</td><td>否（占有位置）</td><td>浏览器可视区</td><td>当前阶段少</td></tr></tbody></table><ul><li>定位叠放次序<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器{ z-index: 1; }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><code>1.如果属性值相同，则按照书写顺序，后来居上。</code><br><code>2.数字后面不能加单位</code><br><code>3.只有定位的盒子才有z-index 属性</code></li></ul><ul><li>元素的显示与隐藏</li></ul><p>1.display 属性<br><code>display: none ；隐藏对象</code><br><code>display：block ；除了转换为块级元素之外，同时还有显示元素的意思。</code><br><code>隐藏元素后，不占有原来的位置。</code></p><p>2.visibility 可见性<br><code>visibility：visible ; 元素可视</code><br><code>visibility：hidden; 元素隐藏</code><br><code>隐藏元素后，继续占有原来的位置。</code></p><p>3.overflow 溢出显示隐藏</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>不剪切内容也不添加滚动条</td></tr><tr><td>hidden</td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td>scroll</td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td>auto</td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><h3 id="9-CSS用户界面样式"><a href="#9-CSS用户界面样式" class="headerlink" title="9.CSS用户界面样式"></a>9.CSS用户界面样式</h3><ul><li>（1）鼠标样式cursor</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">li {cursor: pointer; }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>default</td><td>小白 默认</td></tr><tr><td>pointer</td><td>小手</td></tr><tr><td>move</td><td>移动</td></tr><tr><td>text</td><td>文本</td></tr><tr><td>not-allowed</td><td>禁止</td></tr></tbody></table><ul><li>（2）轮廓线outline</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">input {outline: none; }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>给表单添加outline: 0; 或者outline: none; 样式之后，就可以去掉默认的蓝色边框。</code></p><ul><li>（3）防止拖拽文本域resize</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">textarea{ resize: none;}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-vertical-align-属性应用"><a href="#10-vertical-align-属性应用" class="headerlink" title="10.vertical-align 属性应用"></a>10.vertical-align 属性应用</h3><p><code>vertical-align 属性经常用于设置图片或者表单(行内块元素）和文字垂直对齐。</code><br><code>官方解释：用于设置一个元素的垂直对齐方式，但是它只针对于行内元素或者行内块元素有效。</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">vertical-align : baseline | top | middle | bottom ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td>默认。元素放置在父元素的基线上</td></tr><tr><td>top</td><td>把元素的顶端与行中最高元素的顶端对齐</td></tr><tr><td>middle</td><td>把此元素放置在父元素的中部</td></tr><tr><td>bottom</td><td>把元素的顶端与行中最低的元素的顶端对齐</td></tr></tbody></table><p><code>vertical-align 属性设置为middle 就可以让文字和图片垂直居中对齐了。</code></p><h3 id="11-溢出的文字省略号显示"><a href="#11-溢出的文字省略号显示" class="headerlink" title="11.溢出的文字省略号显示"></a>11.溢出的文字省略号显示</h3><p><code>(1). 先强制一行内显示文本*/white-space: nowrap; （默认normal 自动换行）</code><br><code>(2). 超出的部分隐藏overflow: hidden;</code><br><code>(3). 文字用省略号替代超出的部分text-overflow: ellipsis;</code></p><h3 id="12-CSS3-的新特性"><a href="#12-CSS3-的新特性" class="headerlink" title="12.CSS3 的新特性"></a>12.CSS3 的新特性</h3><h4 id="1-属性选择器"><a href="#1-属性选择器" class="headerlink" title="(1)属性选择器"></a>(1)属性选择器</h4><p><code>属性选择器可以根据元素特定属性的来选择元素。这样就可以不用借助于类或者id选择器。</code></p><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E[att]</td><td>选择具有att属性的E元素</td></tr><tr><td>E[att=”val”]</td><td>选择具有att属性且属性值等于val的E元素</td></tr><tr><td>E[att^=”val”]</td><td>匹配具有att属性且值以val开头的E元素</td></tr><tr><td>E[att$=”val”]</td><td>匹配具有att属性且值以val结尾的E元素</td></tr><tr><td>E[att*=”val”]</td><td>匹配具有att属性且值中含有val的E元素</td></tr></tbody></table><h4 id="2-结构伪类选择器"><a href="#2-结构伪类选择器" class="headerlink" title="(2)结构伪类选择器"></a>(2)结构伪类选择器</h4><p><code>结构伪类选择器主要根据文档结构来选择器元素，常用于根据父级选择器里面的子元素</code></p><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配父元素中的第一个子元素E</td></tr><tr><td>E:last-child</td><td>匹配父元素中最后一个E元素</td></tr><tr><td>E:nth-child(n)</td><td>匹配父元素中的第n个子元素E</td></tr><tr><td>E:first-of-type</td><td>指定类型E的第一个</td></tr><tr><td>E:last-of-type</td><td>指定类型E的最后一个</td></tr><tr><td>E:nth-of-type(n)</td><td>指定类型E的第n个</td></tr></tbody></table><p><code>nth-child（n）选择某个父元素的一个或多个特定的子元素（重点）</code><br><code>n 可以是数字，关键字和公式</code></p><h4 id="3-伪元素选择器"><a href="#3-伪元素选择器" class="headerlink" title="(3)伪元素选择器"></a>(3)伪元素选择器</h4><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>::before</td><td>在元素内部的前面插入内容</td></tr><tr><td>::after</td><td>在元素内部的后面插入内容</td></tr></tbody></table><h4 id="4-2D转换"><a href="#4-2D转换" class="headerlink" title="(4)2D转换"></a>(4)2D转换</h4><p>移动：translate</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">transform: translate(x,y);       //沿着X 和Y 轴移动元素 transform: translateX(n);          transform: translateY(n);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>translate最大的优点：不会影响到其他元素的位置</code><br><code>translate中的百分比单位是相对于自身元素的translate:(50%,50%);</code><br><code>对行内标签没有效果</code></p><p>旋转：rotate</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">transform:rotate(度数);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>rotate里面跟度数，单位是deg 比如rotate(45deg)</code><br><code>角度为正时，顺时针，负时，为逆时针</code><br><code>默认旋转的中心点是元素的中心点</code></p><p>缩放：scale</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">transform:scale(x,y);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>默认以中心点缩放的，而且不影响其他盒子</code></p><p>2D 转换中心点</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">transform-origin: x y;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-动画"><a href="#5-动画" class="headerlink" title="(5)动画"></a>(5)动画</h4><p>动画的基本使用<br>-用keyframes 定义动画</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">@keyframes 动画名称{   0%{        width:100px;     }       100%{        width:200px;       } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>再使用（调用）动画</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">div {       width: 200px;      height: 200px;        background-color:blue;         /*调用动画*/       animation-name: 动画名称;         /*持续时间*/      animation-duration: 持续时间;      }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动画常用属性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>@keyframes</td><td>规定动画</td></tr><tr><td>animation</td><td>所有动画属性的简写属性，除了 animation-play-state 属性。</td></tr><tr><td>animation-name</td><td>规定 @keyframes 动画的名称。</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线。默认是 “ease”。</td></tr><tr><td>animation-delay</td><td>规定动画何时开始。默认是 0。</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数。默认是 1。</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向地播放。默认是 “normal”，alternate逆播放</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。默认是 “running”。</td></tr><tr><td>animation-fill-mode</td><td>规定当动画结束后状态，保持forwards回到起始backwards</td></tr></tbody></table><p>动画简写属性</p><p><code>animation：动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态;</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">animation: myfirst 5s linear 2s infinite alternate;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>速度曲线细节</p><p><code>animation-timing-function：规定动画的速度曲线，默认是“ease”</code></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>linear</td><td>动画从头到尾的速度是相同的。</td></tr><tr><td>ease</td><td>默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td>ease-in</td><td>动画以低速开始。</td></tr><tr><td>ease-out</td><td>动画以低速结束。</td></tr><tr><td>ease-in-out</td><td>动画以低速开始和结束。</td></tr><tr><td>steps()</td><td>指定了时间函数中的间隔数量（步长）</td></tr></tbody></table><h4 id="6-3D转换"><a href="#6-3D转换" class="headerlink" title="(6)3D转换"></a>(6)3D转换</h4><p>3D位移: translate3d(x,y,z)</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">translform:translateX(100px);    //在x轴上移动,水平向右translform:translateY(100px);    //在Y轴上移动,垂直向下translform:translateZ(100px);    //在Z轴上移动,垂直屏幕transform:translate3d(x,y,z);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>透视: perspective<br>透视写到被观察元素的父盒子上面</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">perspective：500px;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3D呈现 transfrom-style</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">transform-style :flat;          //默认值，子元素将不保留其 3D 位置。transform-style :preserve-3d;   //子元素将保留其 3D 位置,在父级元素定义，但是影响的是子元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3D转换方法</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)</td><td>定义 3D 转换，使用 16 个值的 4x4 矩阵。</td></tr><tr><td>translate3d(x,y,z)</td><td>定义 3D 转化。</td></tr><tr><td>translateX(x)</td><td>定义 3D 转化，仅使用用于 X 轴的值。</td></tr><tr><td>translateY(y)</td><td>定义 3D 转化，仅使用用于 Y 轴的值。</td></tr><tr><td>translateZ(z)</td><td>定义 3D 转化，仅使用用于 Z 轴的值。</td></tr><tr><td>scale3d(x,y,z)</td><td>定义 3D 缩放转换。</td></tr><tr><td>scaleX(x)</td><td>定义 3D 缩放转换，通过给定一个 X 轴的值。</td></tr><tr><td>scaleY(y)</td><td>定义 3D 缩放转换，通过给定一个 Y 轴的值。</td></tr><tr><td>scaleZ(z)</td><td>定义 3D 缩放转换，通过给定一个 Z 轴的值。</td></tr><tr><td>rotate3d(x,y,z,angle)</td><td>定义 3D 旋转。</td></tr><tr><td>rotateX(angle)</td><td>定义沿 X 轴的 3D 旋转。</td></tr><tr><td>rotateY(angle)</td><td>定义沿 Y 轴的 3D 旋转。</td></tr><tr><td>rotateZ(angle)</td><td>定义沿 Z 轴的 3D 旋转。</td></tr><tr><td>perspective(n)</td><td>定义 3D 转换元素的透视视图。</td></tr></tbody></table><h4 id="7-浏览器私有前缀"><a href="#7-浏览器私有前缀" class="headerlink" title="(7)浏览器私有前缀"></a>(7)浏览器私有前缀</h4><table><thead><tr><th>内核</th><th>私有前缀</th><th>应用浏览器</th></tr></thead><tbody><tr><td>Gecko内核</td><td>前缀为 -moz-</td><td>火狐浏览器</td></tr><tr><td>Webkit内核(谷歌内核)</td><td>前缀为 -webkit-</td><td>chrome浏览器、safari浏览器、360极速、猎豹、世界之窗</td></tr><tr><td>Trident内核</td><td>前缀为 -ms-</td><td>IE浏览器</td></tr><tr><td>Presto内核</td><td>前缀 -o-</td><td>opera浏览器</td></tr></tbody></table><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
