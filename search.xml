<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>简单实现轮播图</title>
      <link href="2022/03/29/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
      <url>2022/03/29/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><a href="https://imgtu.com/i/q66urV"><img src="https://s1.ax1x.com/2022/03/29/q66urV.png" alt="q66urV.png"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>            <span class="token property">background-position</span><span class="token punctuation">:</span> center center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> d <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> imgs <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"https://t7.baidu.com/it/u=3752346458,2323286029&amp;fm=193&amp;f=GIF"</span><span class="token punctuation">,</span>        <span class="token string">"https://t7.baidu.com/it/u=2531125946,3055766435&amp;fm=193&amp;f=GIF"</span><span class="token punctuation">,</span>        <span class="token string">"https://t7.baidu.com/it/u=3880073250,1266855579&amp;fm=193&amp;f=GIF"</span><span class="token punctuation">,</span>        <span class="token string">"https://t7.baidu.com/it/u=393706316,2629632698&amp;fm=193&amp;f=GIF"</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 图片地址的下标</span>    d<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundImage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">url(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>imgs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token comment">//先延迟 后执行</span>    <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        index <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        d<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundImage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">url(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>imgs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> js </tag>
            
            <tag> 轮播图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现简单的选字游戏</title>
      <link href="2022/03/29/js%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%89%E5%AD%97%E6%B8%B8%E6%88%8F/"/>
      <url>2022/03/29/js%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%89%E5%AD%97%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><a href="https://imgtu.com/i/q60TRP"><img src="https://s1.ax1x.com/2022/03/29/q60TRP.png" alt="q60TRP.png"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>选字游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.wrap</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>            <span class="token property">padding-top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">header</span> <span class="token punctuation">{</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">header p</span> <span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">header p.time</span> <span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">header p.score</span> <span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector">.showWord</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.rule</span> <span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">ul</span> <span class="token punctuation">{</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">ul li</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>剩余时间: 20.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>score<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>得分: 0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showWord<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>黄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rule<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>根据上面的字的颜色从下面选择正确的字，选择正确自动开始<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>黑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>红<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>绿<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>黄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>蓝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//全局变量</span>    <span class="token keyword">var</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"黑"</span><span class="token punctuation">,</span><span class="token string">"红"</span><span class="token punctuation">,</span><span class="token string">"绿"</span><span class="token punctuation">,</span><span class="token string">"蓝"</span><span class="token punctuation">,</span><span class="token string">"黄"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"black"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> pShowWord <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"showWord"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> pScore <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//得分</span>    <span class="token comment">// 1. showWord  随机文字  随机颜色</span>    <span class="token keyword">function</span> <span class="token function">setShowWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pShowWord<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> words<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pShowWord<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> colors<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setShowWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. lis 随机文字  随机颜色 (唯一)</span>    <span class="token keyword">function</span> <span class="token function">setLi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> wordIndex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> colorIndex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">/*  ---------------------  */</span>        <span class="token comment">//将上述两个数组打乱</span>        <span class="token comment">// console.log([2,3,11].sort());</span>        <span class="token comment">// sort 默认按照ASCII排序</span>        <span class="token comment">// sort正确的使用方式</span>        <span class="token comment">// var arr = [2,3,4,15]</span>        <span class="token comment">// arr.sort(function(a,b) {</span>        <span class="token comment">//     // a,b是数组中相邻的两个值</span>        <span class="token comment">//     // 如果n&gt;0 那么交换a和b的位置</span>                <span class="token comment">// return n</span>        <span class="token comment">//     // 反之不交换位置</span>        <span class="token comment">//     return a-b;  //冒泡排序</span>        <span class="token comment">// })</span>        <span class="token comment">/*  ---------------------  */</span>        <span class="token comment">// 打乱数组</span>        wordIndex <span class="token operator">=</span> wordIndex<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 假如[2,4,0,3,1]</span>        colorIndex <span class="token operator">=</span> colorIndex<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 假如[4,2,1,3,0]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> li <span class="token operator">=</span> lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> n <span class="token operator">=</span> wordIndex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> words<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> m <span class="token operator">=</span> colorIndex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            li<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> colors<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">setLi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 点击判断是否正确（得分）</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> li <span class="token operator">=</span> lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        li<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> color <span class="token operator">=</span> pShowWord<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color<span class="token punctuation">;</span>            <span class="token comment">// 方法1：</span>            <span class="token comment">// if (this.innerHTML === "绿") {</span>            <span class="token comment">//     if (color === "green") {}</span>            <span class="token comment">// } else if (this.innerHTML === "红") {</span>            <span class="token comment">//     if (color === "red") {}</span>            <span class="token comment">// } </span>            <span class="token comment">// 方法2：</span>            <span class="token keyword">var</span> ci <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> wi <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ci <span class="token operator">===</span> wi<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 点对了 </span>                score <span class="token operator">++</span><span class="token punctuation">;</span>                pScore<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"得分:"</span> <span class="token operator">+</span> score<span class="token punctuation">;</span>                <span class="token comment">// 重新设置 pShowWord 和 lis </span>                <span class="token function">setShowWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setLi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 4. 20s倒计时</span>    <span class="token comment">//随机函数</span>    <span class="token keyword">function</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> js </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web编程基础知识</title>
      <link href="2021/05/05/Web%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>2021/05/05/Web%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>##1 Html: HyperText Markup Language，超文本标记语言，网络内容载体</p><h3 id="1-Html是网页内容载体、CSS（层叠样式表）样式是表现、JavaScript是用来实现网页的特效效果"><a href="#1-Html是网页内容载体、CSS（层叠样式表）样式是表现、JavaScript是用来实现网页的特效效果" class="headerlink" title="(1) Html是网页内容载体、CSS（层叠样式表）样式是表现、JavaScript是用来实现网页的特效效果"></a>(1) Html是网页内容载体、CSS（层叠样式表）样式是表现、JavaScript是用来实现网页的特效效果</h3><h3 id="2-Html语言不分大小写，但建议使用小写"><a href="#2-Html语言不分大小写，但建议使用小写" class="headerlink" title="(2) Html语言不分大小写，但建议使用小写"></a>(2) Html语言不分大小写，但建议使用小写</h3><h3 id="3-常用标签："><a href="#3-常用标签：" class="headerlink" title="(3) 常用标签："></a>(3) 常用标签：</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>根标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>；<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>头部标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>；<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>，h1-h6；<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>段落标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>；<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>’1.jpg’</span><span class="token punctuation">&gt;</span></span>插入图片；<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>特殊样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>；<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">&gt;</span></span>引用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">&gt;</span></span>，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">&gt;</span></span>长文本引用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>或者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>回车，<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>空格，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/&gt;</span></span>或者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>横线；<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">&gt;</span></span>地址；<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>代码，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>多行代码；<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>…<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>无序列表，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>…<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>有序列表；<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>表格；&lt;a herf =’’title=’’target=’’&gt;链接；&lt;text area cols=’’rows=’’&gt;文本域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>下拉`<span class="token comment">&lt;!--注释文字--&gt;</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="html样式"><a href="#html样式" class="headerlink" title="html样式"></a>html样式</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>{content}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-CSS-Cascading-Style-Sheets，层叠样式表，网页样式表现"><a href="#2-CSS-Cascading-Style-Sheets，层叠样式表，网页样式表现" class="headerlink" title="2 CSS: Cascading Style Sheets，层叠样式表，网页样式表现"></a>2 CSS: Cascading Style Sheets，层叠样式表，网页样式表现</h2><h3 id="1-CSS样式包含内联式、嵌入式、外部式，优先次序依次"><a href="#1-CSS样式包含内联式、嵌入式、外部式，优先次序依次" class="headerlink" title="(1) CSS样式包含内联式、嵌入式、外部式，优先次序依次"></a>(1) CSS样式包含内联式、嵌入式、外部式，优先次序依次</h3><h3 id="2-选择器包含：选择器、类选择器、id选择器、后代选择器、子选择器、伪选择器、分担选择符"><a href="#2-选择器包含：选择器、类选择器、id选择器、后代选择器、子选择器、伪选择器、分担选择符" class="headerlink" title="(2) 选择器包含：选择器、类选择器、id选择器、后代选择器、子选择器、伪选择器、分担选择符"></a>(2) 选择器包含：选择器、类选择器、id选择器、后代选择器、子选择器、伪选择器、分担选择符</h3><h3 id="3-权值大小决定样式，标签1，类10，id100，-important-最高权值"><a href="#3-权值大小决定样式，标签1，类10，id100，-important-最高权值" class="headerlink" title="(3) 权值大小决定样式，标签1，类10，id100，!important 最高权值"></a>(3) 权值大小决定样式，标签1，类10，id100，!important 最高权值</h3><h3 id="4-字体属性：font-size、font-family、font-weight-bold-italic-…"><a href="#4-字体属性：font-size、font-family、font-weight-bold-italic-…" class="headerlink" title="(4) 字体属性：font-size、font-family、font-weight(bold/italic)…"></a>(4) 字体属性：font-size、font-family、font-weight(bold/italic)…</h3><h3 id="5-元素包含块、内联、内联-块，display（inline、block、inline-block）"><a href="#5-元素包含块、内联、内联-块，display（inline、block、inline-block）" class="headerlink" title="(5) 元素包含块、内联、内联-块，display（inline、block、inline-block）"></a>(5) 元素包含块、内联、内联-块，display（inline、block、inline-block）</h3><h3 id="6-CSS布局：流动模型、浮动模型、层模型"><a href="#6-CSS布局：流动模型、浮动模型、层模型" class="headerlink" title="(6) CSS布局：流动模型、浮动模型、层模型"></a>(6) CSS布局：流动模型、浮动模型、层模型</h3><h2 id="3-JavaScript，脚本语言，用来实现网页的动态效果"><a href="#3-JavaScript，脚本语言，用来实现网页的动态效果" class="headerlink" title="3 JavaScript，脚本语言，用来实现网页的动态效果"></a>3 JavaScript，脚本语言，用来实现网页的动态效果</h2><p>###(1) 调用样式：</p><pre class="line-numbers language-none"><code class="language-none">&lt;script type = "text/javascript"&gt;&lt;/script&gt;&lt;script src="script.js"&gt;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-JavaScript作为脚本语言可以放在html任何位置，浏览器按先后顺序进行解释，一般置于head和body之间"><a href="#2-JavaScript作为脚本语言可以放在html任何位置，浏览器按先后顺序进行解释，一般置于head和body之间" class="headerlink" title="(2) JavaScript作为脚本语言可以放在html任何位置，浏览器按先后顺序进行解释，一般置于head和body之间"></a>(2) JavaScript作为脚本语言可以放在html任何位置，浏览器按先后顺序进行解释，一般置于head和body之间</h3><h3 id="3-单行注释-……和多行注释-……"><a href="#3-单行注释-……和多行注释-……" class="headerlink" title="(3) 单行注释//……和多行注释/……/"></a>(3) 单行注释//……和多行注释/<em>……</em>/</h3><h3 id="4-var-a：定义变量名（字母-开头）"><a href="#4-var-a：定义变量名（字母-开头）" class="headerlink" title="(4) var a：定义变量名（字母/_/$开头）"></a>(4) var a：定义变量名（字母/_/$开头）</h3><h3 id="5-JS区分大小写"><a href="#5-JS区分大小写" class="headerlink" title="(5) JS区分大小写"></a>(5) JS区分大小写</h3><h3 id="6-if-else"><a href="#6-if-else" class="headerlink" title="(6) if(){} else{}"></a>(6) if(){} else{}</h3><h3 id="7-确认对话框：var-message-confirm-“……”"><a href="#7-确认对话框：var-message-confirm-“……”" class="headerlink" title="(7) 确认对话框：var message = confirm(“……”)"></a>(7) 确认对话框：var message = confirm(“……”)</h3><h3 id="8-提问对话框：var-myname-prompt-“……”"><a href="#8-提问对话框：var-myname-prompt-“……”" class="headerlink" title="(8) 提问对话框：var myname = prompt(“……”)"></a>(8) 提问对话框：var myname = prompt(“……”)</h3><h3 id="9-打开新窗口：window-open-url-name-param-，"><a href="#9-打开新窗口：window-open-url-name-param-，" class="headerlink" title="(9) 打开新窗口：window.open([url],[name],[param])，"></a>(9) 打开新窗口：window.open([url],[name],[param])，</h3><h3 id="name-blank-新窗口-self-当前窗口-top-框架网页上部"><a href="#name-blank-新窗口-self-当前窗口-top-框架网页上部" class="headerlink" title="[name]: _blank(新窗口) /_self(当前窗口)/_top(框架网页上部)"></a>[name]: _blank(新窗口) /_self(当前窗口)/_top(框架网页上部)</h3><h3 id="param-top-left-right-width-height-50px-menubar-toolbar-scrollbars-status-yes-no"><a href="#param-top-left-right-width-height-50px-menubar-toolbar-scrollbars-status-yes-no" class="headerlink" title="[param]: top|left|right|width|height: 50px/menubar|toolbar|scrollbars|status: yes|no"></a>[param]: top|left|right|width|height: 50px/menubar|toolbar|scrollbars|status: yes|no</h3><h3 id="10-关闭窗口：window-close"><a href="#10-关闭窗口：window-close" class="headerlink" title="(10) 关闭窗口：window.close()"></a>(10) 关闭窗口：window.close()</h3><h3 id="11-alert-警告"><a href="#11-alert-警告" class="headerlink" title="(11) alert(): 警告"></a>(11) alert(): 警告</h3><h3 id="12-document-writ-：输出文本"><a href="#12-document-writ-：输出文本" class="headerlink" title="(12) document.writ()：输出文本"></a>(12) document.writ()：输出文本</h3><h3 id="13-document-getElementByid-‘’-：通过ID获取元素"><a href="#13-document-getElementByid-‘’-：通过ID获取元素" class="headerlink" title="(13) document.getElementByid(‘’)：通过ID获取元素"></a>(13) document.getElementByid(‘’)：通过ID获取元素</h3><h3 id="14-NaN-Not-a-Number-，与任何数都不相等，判断用isNaN-NaN-Infinity-无穷大"><a href="#14-NaN-Not-a-Number-，与任何数都不相等，判断用isNaN-NaN-Infinity-无穷大" class="headerlink" title="(14) NaN(Not a Number)，与任何数都不相等，判断用isNaN(NaN), Infinity(无穷大)"></a>(14) NaN(Not a Number)，与任何数都不相等，判断用isNaN(NaN), Infinity(无穷大)</h3><h3 id="15-或-且-非-amp-amp"><a href="#15-或-且-非-amp-amp" class="headerlink" title="(15) 或/且/非: &amp;&amp; / || / !"></a>(15) 或/且/非: &amp;&amp; / || / !</h3><h3 id="16-等号用-不会转换数据类型-，不用"><a href="#16-等号用-不会转换数据类型-，不用" class="headerlink" title="(16) 等号用===(不会转换数据类型)，不用=="></a>(16) 等号用===(不会转换数据类型)，不用==</h3><h3 id="17-浮点比较用差值：Math-abs-1-3-1-2-3-lt-0-000001"><a href="#17-浮点比较用差值：Math-abs-1-3-1-2-3-lt-0-000001" class="headerlink" title="(17) 浮点比较用差值：Math.abs(1/3 -(1-2/3))<0.000001"></a>(17) 浮点比较用差值：Math.abs(1/3 -(1-2/3))&lt;0.000001</h3><h3 id="18-空值：JavaScript-null-swift-nil-Java-null-Python-None"><a href="#18-空值：JavaScript-null-swift-nil-Java-null-Python-None" class="headerlink" title="(18) 空值：JavaScript(null)/swift(nil)/Java(null)/Python(None)"></a>(18) 空值：JavaScript(null)/swift(nil)/Java(null)/Python(None)</h3><h3 id="19-数组：var-arr-1-2-3-null-true-new-Array-1-2-3-null-true"><a href="#19-数组：var-arr-1-2-3-null-true-new-Array-1-2-3-null-true" class="headerlink" title="(19) 数组：var arr = [1,2,3,null,true]/new Array(1,2,3,null,true)"></a>(19) 数组：var arr = [1,2,3,null,true]/new Array(1,2,3,null,true)</h3><h3 id="20-对象：var-person-name-’bob’-age-20-···"><a href="#20-对象：var-person-name-’bob’-age-20-···" class="headerlink" title="(20) 对象：var person = {name:’bob’,age:20,···}"></a>(20) 对象：var person = {name:’bob’,age:20,···}</h3><h3 id="21-JavaScript是动态语言，var-a-123-a-’ABC’-不会报错-Java里就会报错"><a href="#21-JavaScript是动态语言，var-a-123-a-’ABC’-不会报错-Java里就会报错" class="headerlink" title="(21) JavaScript是动态语言，var a=123;a=’ABC’;不会报错, Java里就会报错"></a>(21) JavaScript是动态语言，var a=123;a=’ABC’;不会报错, Java里就会报错</h3><h3 id="22-变量未声明即为全局变量，’use-strict’变量强制需要声明才能使用"><a href="#22-变量未声明即为全局变量，’use-strict’变量强制需要声明才能使用" class="headerlink" title="(22) 变量未声明即为全局变量，’use strict’变量强制需要声明才能使用"></a>(22) 变量未声明即为全局变量，’use strict’变量强制需要声明才能使用</h3><h3 id="23-用于转义，反引号hello表示多行字符串"><a href="#23-用于转义，反引号hello表示多行字符串" class="headerlink" title="(23) \用于转义，反引号hello表示多行字符串"></a>(23) \用于转义，反引号hello表示多行字符串</h3><h3 id="24-操作字符串：var-s-’hello’-s-length-s0-toIpperCase-toLowerCase-substring-0-2"><a href="#24-操作字符串：var-s-’hello’-s-length-s0-toIpperCase-toLowerCase-substring-0-2" class="headerlink" title="(24) 操作字符串：var s=’hello’, s.length, s0, toIpperCase, toLowerCase, substring(0,2)"></a>(24) 操作字符串：var s=’hello’, s.length, s<a href="%E8%B6%85%E5%87%BA%E4%B8%8D%E4%BC%9A%E6%8A%A5%E9%94%99%EF%BC%8C%E8%BF%94%E5%9B%9Eundefined">0</a>, toIpperCase, toLowerCase, substring(0,2)</h3><h3 id="25-操作数组：arr-length-arr-slice-arr-push-arr-pop-arr-unshift-arr-shift-arr-soft-arr-reverse-arr-splice-concat-连接数组，arr-join-‘-‘-替换逗号，变为字符串"><a href="#25-操作数组：arr-length-arr-slice-arr-push-arr-pop-arr-unshift-arr-shift-arr-soft-arr-reverse-arr-splice-concat-连接数组，arr-join-‘-‘-替换逗号，变为字符串" class="headerlink" title="(25) 操作数组：arr.length,arr.slice(),arr.push(),arr.pop(),arr.unshift(),arr.shift(),arr.soft(),arr.reverse(),arr.splice(),concat(): 连接数组，arr.join(‘-‘): 替换逗号，变为字符串"></a>(25) 操作数组：arr.length,arr.slice(),arr.push(),arr.pop(),arr.unshift(),arr.shift(),arr.soft(),arr.reverse(),arr.splice(),concat(): 连接数组，arr.join(‘-‘): 替换逗号，变为字符串</h3><h3 id="26-for-var-key-in-…-while-do…while-for…of"><a href="#26-for-var-key-in-…-while-do…while-for…of" class="headerlink" title="(26) for (var key in …), while, do…while, for…of"></a>(26) for (var key in …), while, do…while, for…of</h3><h3 id="27-RegEXP-d-匹配一个数字-w-匹配一个字母或数字-匹配任何字符-匹配至少一个字符-匹配0个或1个任意字符-n-：n个字符"><a href="#27-RegEXP-d-匹配一个数字-w-匹配一个字母或数字-匹配任何字符-匹配至少一个字符-匹配0个或1个任意字符-n-：n个字符" class="headerlink" title="(27) RegEXP: \d: 匹配一个数字,\w: 匹配一个字母或数字,.: 匹配任何字符,*: 匹配至少一个字符,?: 匹配0个或1个任意字符,{n}：n个字符"></a>(27) RegEXP: \d: 匹配一个数字,\w: 匹配一个字母或数字,.: 匹配任何字符,*: 匹配至少一个字符,?: 匹配0个或1个任意字符,{n}：n个字符</h3><h3 id="28-JSON-JavaScript-Object-Notation-JS-对象标记-轻量级的数据交换格式，var-json-‘-“a”-“Hello”-“b”-“World”-’-对比xml"><a href="#28-JSON-JavaScript-Object-Notation-JS-对象标记-轻量级的数据交换格式，var-json-‘-“a”-“Hello”-“b”-“World”-’-对比xml" class="headerlink" title="(28) JSON: JavaScript Object Notation, JS 对象标记, 轻量级的数据交换格式，var json = ‘{“a”: “Hello”, “b”: “World”}’(对比xml)"></a>(28) JSON: JavaScript Object Notation, JS 对象标记, 轻量级的数据交换格式，var json = ‘{“a”: “Hello”, “b”: “World”}’(对比xml)</h3><h3 id="29-面向对象：var-Student-var-xiaoming-xiaoming-proto-student"><a href="#29-面向对象：var-Student-var-xiaoming-xiaoming-proto-student" class="headerlink" title="(29) 面向对象：var Student{}, var xiaoming = {}, xiaoming.proto = student"></a>(29) 面向对象：var Student{}, var xiaoming = {}, xiaoming.<em>proto</em> = student</h3><h2 id="4-PHP（外文名：PHP-Hypertext-Preprocessor，中文名：“超文本预处理器”）"><a href="#4-PHP（外文名：PHP-Hypertext-Preprocessor，中文名：“超文本预处理器”）" class="headerlink" title="4 PHP（外文名：PHP: Hypertext Preprocessor，中文名：“超文本预处理器”）"></a>4 PHP（外文名：PHP: Hypertext Preprocessor，中文名：“超文本预处理器”）</h2><h3 id="1-创建动态交互性站点强有力的服务器端脚本语言（后端语言）"><a href="#1-创建动态交互性站点强有力的服务器端脚本语言（后端语言）" class="headerlink" title="(1) 创建动态交互性站点强有力的服务器端脚本语言（后端语言）"></a>(1) 创建动态交互性站点强有力的服务器端脚本语言（后端语言）</h3><h3 id="2-引用格式："><a href="#2-引用格式：" class="headerlink" title="(2) 引用格式："></a>(2) 引用格式：</h3><pre class="line-numbers language-none"><code class="language-none">&lt;?phpecho "我的第一段PHP脚本"?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-WordPress、Facebook、Twitter核心都是PHP"><a href="#3-WordPress、Facebook、Twitter核心都是PHP" class="headerlink" title="(3) WordPress、Facebook、Twitter核心都是PHP"></a>(3) WordPress、Facebook、Twitter核心都是PHP</h3><h3 id="4-功能包括：生成动态页面、创建-打开-读取-写入-删除-关闭服务器文件、接受表单、发送并取回cookie。数据库、限制访问、数据加密"><a href="#4-功能包括：生成动态页面、创建-打开-读取-写入-删除-关闭服务器文件、接受表单、发送并取回cookie。数据库、限制访问、数据加密" class="headerlink" title="(4) 功能包括：生成动态页面、创建/打开/读取/写入/删除/关闭服务器文件、接受表单、发送并取回cookie。数据库、限制访问、数据加密"></a>(4) 功能包括：生成动态页面、创建/打开/读取/写入/删除/关闭服务器文件、接受表单、发送并取回cookie。数据库、限制访问、数据加密</h3><h3 id="5-PHP可运行于各种平台，多种服务器（Apache、IIS）、多数据源、免费、易于学习"><a href="#5-PHP可运行于各种平台，多种服务器（Apache、IIS）、多数据源、免费、易于学习" class="headerlink" title="(5) PHP可运行于各种平台，多种服务器（Apache、IIS）、多数据源、免费、易于学习"></a>(5) PHP可运行于各种平台，多种服务器（Apache、IIS）、多数据源、免费、易于学习</h3><h3 id="6-注释用-、-、-…"><a href="#6-注释用-、-、-…" class="headerlink" title="(6) 注释用//、#、/…/"></a>(6) 注释用//、#、/<em>…</em>/</h3><h3 id="7-函数、类、关键词对大小写不敏感，变量对大小写敏感（以开-头-，-常-量-不-加-开头，常量不加开头，常量不加）"><a href="#7-函数、类、关键词对大小写不敏感，变量对大小写敏感（以开-头-，-常-量-不-加-开头，常量不加开头，常量不加）" class="headerlink" title="(7) 函数、类、关键词对大小写不敏感，变量对大小写敏感（以开 头 ， 常 量 不 加 开头，常量不加开头，常量不加）"></a>(7) 函数、类、关键词对大小写不敏感，变量对大小写敏感（以开 头 ， 常 量 不 加 开头，常量不加开头，常量不加）</h3><h3 id="8-变量无需定义类型，三种作用域（local、global、static）"><a href="#8-变量无需定义类型，三种作用域（local、global、static）" class="headerlink" title="(8) 变量无需定义类型，三种作用域（local、global、static）"></a>(8) 变量无需定义类型，三种作用域（local、global、static）</h3><h3 id="9-echo-无返回值-和print-返回值1-，用于输出"><a href="#9-echo-无返回值-和print-返回值1-，用于输出" class="headerlink" title="(9) echo(无返回值)和print(返回值1)，用于输出"></a>(9) echo(无返回值)和print(返回值1)，用于输出</h3><h3 id="10-str-字符串长度"><a href="#10-str-字符串长度" class="headerlink" title="(10) str()字符串长度"></a>(10) str()字符串长度</h3><h3 id="11-strpos-‘hello-world’-‘world’-，匹配返回（true和flase）"><a href="#11-strpos-‘hello-world’-‘world’-，匹配返回（true和flase）" class="headerlink" title="(11) strpos(‘hello world’, ‘world’)，匹配返回（true和flase）"></a>(11) strpos(‘hello world’, ‘world’)，匹配返回（true和flase）</h3><h3 id="12-等号用-不会转换数据类型-，不用"><a href="#12-等号用-不会转换数据类型-，不用" class="headerlink" title="(12) 等号用===(不会转换数据类型)，不用=="></a>(12) 等号用===(不会转换数据类型)，不用==</h3><h3 id="13-document-getElementByid-’’-：通过ID获取元素"><a href="#13-document-getElementByid-’’-：通过ID获取元素" class="headerlink" title="(13) document.getElementByid(’’)：通过ID获取元素"></a>(13) document.getElementByid(’’)：通过ID获取元素</h3><h3 id="14-NaN-Not-a-Number-，与任何数都不相等，判断用isNaN-NaN-Infinity-无穷大-1"><a href="#14-NaN-Not-a-Number-，与任何数都不相等，判断用isNaN-NaN-Infinity-无穷大-1" class="headerlink" title="(14) NaN(Not a Number)，与任何数都不相等，判断用isNaN(NaN), Infinity(无穷大)"></a>(14) NaN(Not a Number)，与任何数都不相等，判断用isNaN(NaN), Infinity(无穷大)</h3><h3 id="15-与：-amp-amp-and，或：or-，非：！，异或：Xor"><a href="#15-与：-amp-amp-and，或：or-，非：！，异或：Xor" class="headerlink" title="(15) 与：&amp;&amp;/and，或：or/||，非：！，异或：Xor"></a>(15) 与：&amp;&amp;/and，或：or/||，非：！，异或：Xor</h3><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> html </category>
          
          <category> js </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> web </tag>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯真题——装饰珠</title>
      <link href="2021/04/22/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%E2%80%94%E2%80%94%E8%A3%85%E9%A5%B0%E7%8F%A0/"/>
      <url>2021/04/22/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%E2%80%94%E2%80%94%E8%A3%85%E9%A5%B0%E7%8F%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在怪物猎人这一款游戏中，玩家可以通过给装备镶嵌不同的装饰珠来获取 相应的技能，以提升自己的战斗能力。</p><p>已知猎人身上一共有 6 件装备，每件装备可能有若干个装饰孔，每个装饰孔有各自的等级，可以镶嵌一颗小于等于自身等级的装饰珠 (也可以选择不镶嵌)。</p><p>装饰珠有 M 种，编号 1 至 M，分别对应 M 种技能，第 i 种装饰珠的等级为 Li，只能镶嵌在等级大于等于 Li 的装饰孔中。<br>对第 i 种技能来说，当装备相应技能的装饰珠数量达到 Ki个时，会产生Wi(Ki)的价值，镶嵌同类技能的数量越多，产生的价值越大，即Wi(Ki-1)&lt;Wi(Ki)。但每个技能都有上限Pi(1≤Pi≤7)，当装备的珠子数量超过Pi时，只会产生Wi(Pi)的价值。</p><p>对于给定的装备和装饰珠数据，求解如何镶嵌装饰珠，使得 6 件装备能得到的总价值达到最大。</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><p>输入的第 1 至 6 行，包含 6 件装备的描述。其中第i行的第一个整数Ni表示第i件装备的装饰孔数量。后面紧接着Ni个整数，分别表示该装备上每个装饰孔的等级L(1≤ L ≤4)。<br>第 7 行包含一个正整数 M，表示装饰珠 (技能) 种类数量。<br>第 8 至 M + 7 行，每行描述一种装饰珠 (技能) 的情况。每行的前两个整数Lj(1≤ Lj ≤4)和Pj(1≤ Pj ≤7)分别表示第 j 种装饰珠的等级和上限。接下来Pj个整数，其中第 k 个数表示装备该中装饰珠数量为 k 时的价值Wj(k)。<br>其中1 ≤ Ni ≤ 50，1 ≤ M ≤ 104，1 ≤ Wj(k) ≤ 104。</p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><p>输出一行包含一个整数，表示能够得到的最大价值。<br>输入</p><pre class="line-numbers language-none"><code class="language-none">1 12 1 21 12 2 21 11 331 5 1 2 3 5 82 4 2 4 8 153 2 5 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>样例说明<br>按照如下方式镶嵌珠子得到最大价值 20，括号内表示镶嵌的装饰珠的种类编号：</p><pre class="line-numbers language-none"><code class="language-none">1: (1)2: (1) (2)3: (1)4: (2) (2)5: (1)6: (2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4 颗技能 1 装饰珠，4 颗技能 2 装饰珠 W1(4) + W2(4) = 5 + 15 = 20。W1(4)+W2(4)=5+15=20。</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>这道题的题面较为复杂，但理清以后会发现，装备数其实没什么用，实质是把各种各样的珠子放进不同等级的孔里（珠子等级≤孔等级），同时每种珠子放进若干个会产生一个递增的价值，用一个数组描述，但放多少个有上限，比如上限为5，则放进6个和5个的价值相同。</p><p>这道题和背包问题很像，但有两点不同，第一点是高等级的珠子不能放进低等级的孔中，因此放入有限制；第二点是同种珠子放入不同的个数的价值是用一个数组描述的，而不是每个珠子是一样的价值。</p><p>由于一共只有4个等级，因此对于输入量，我们选择按照等级记录每个等级的孔数，还有每种珠子放若干个的价值。因为孔的等级对于珠子的等级是向下兼容的，因此选择从高等级到低等级逐层开放孔数，同时优先放同等级的珠子，放入时就不会受到限制，即可转换为背包问题，孔数即相当于容量。</p><p>以dp[i][j]表示前 i 种珠子放入 j 个孔中所能产生的最大价值，每开放一个等级就枚举与之等级相同的珠子放多少个，然后与前i - 1种珠子相对应转移过来的情况进行比较。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">//必须先平行转移，因为有好几种转移情况(放i个) for (int i = 1; i &lt;= sum; ++i) { dp[kind][i] = dp[kind - 1][i];}//放i个该种珠子for (int i = 1; i &lt; W[k].size(); ++i) {for (int j = sum; j &gt;= i; --j) {dp[kind][j] = max(dp[kind][j], dp[kind - 1][j - i] + W[k][i]);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){    vector&lt;int&gt; Hole(5); //每个等级的孔有多少    int N, tmp, total = 0;    for (int i = 0; i &lt; 6; ++i) {        cin &gt;&gt; N;         for (int j = 0; j &lt; N; ++j) {            cin &gt;&gt; tmp;             ++Hole[tmp];            ++total; //总孔数        }    }    cin &gt;&gt; N; //装饰珠种类    vector&lt;int&gt; L(N + 1); //第i种的等级    vector&lt;vector&lt;int&gt;&gt; W(N + 1, vector&lt;int&gt;()); //第i种放j个的价值    for (int i = 1; i &lt;= N; ++i) {        cin &gt;&gt; L[i];        cin &gt;&gt; tmp;        W[i].resize(tmp + 1);        for (int j = 1; j &lt;= tmp; ++j) {            cin &gt;&gt; W[i][j];        }    }    vector&lt;vector&lt;int&gt;&gt; dp(N + 1, vector&lt;int&gt; (total + 1));    int sum = 0;    int kind = 0;    for (int level = 4; level &gt;= 1; --level) {        sum += Hole[level]; // 该等级开放的孔数        if (sum == 0)   continue;        for (int k = 1; k &lt;= N; ++k) { //第k种珠子            if (L[k] == level) {                ++kind;                //必须先平行转移，因为有好几种转移情况(放i个)                 for (int i = 1; i &lt;= sum; ++i) {                    dp[kind][i] = dp[kind - 1][i];                }            //放i个该种珠子                for (int i = 1; i &lt; W[k].size(); ++i) {                    for (int j = sum; j &gt;= i; --j) {                        dp[kind][j] = max(dp[kind][j], dp[kind - 1][j - i] + W[k][i]);                    }                }            }        }    }    cout &lt;&lt; *max_element(dp[kind].begin(), dp[kind].end()) &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android学习笔记——Galley</title>
      <link href="2021/04/21/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Galley/"/>
      <url>2021/04/21/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Galley/</url>
      
        <content type="html"><![CDATA[<p>Gallery==&gt;画廊视图</p><p>Gallery和Spinnery父类相同——AbsSpinner,表明Garrey和Spinner都是一个列表框。</p><p>两者之间的区别是：Spinner显示的是一个垂直列表框，Gallery显示的是一个水平列表框；</p><p>　　　　　　　　   Spinner的作用是供用户选择，而Gallery则允许用户通过拖动来查看上一个、下一个列表项。</p><p>Garrey常用XML属性：</p><table><thead><tr><th>android:animationDuration</th><th>setAnimationDuration(int)</th><th>设置列表项切换时的动画帧持续时间</th></tr></thead><tbody><tr><td>android:gravity</td><td>setGravity(int)</td><td>设置对其方式</td></tr><tr><td>android:spacing</td><td>setSpacing(int)</td><td>设置Gallery内列表项之间的间距</td></tr><tr><td>android: unselectedAlpha</td><td>setUnselectedAlpha(float)</td><td>设置没有选中的列表项的透明度</td></tr></tbody></table><p>注意:</p><p>Gallery用法类似Spinner，使用Adapter提供数据源，Adapter的getView()所返回的View将作为Gallery列表的列表项；</p><p>通过OnItemSelectedListener监听器监听选择项的改变。</p><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">布局文件==》<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageSwitcher</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/switcher<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>320dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>320dp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Gallery</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/gallery<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>spacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3pt<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>unselectedAlpha</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.6<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">代码实现==》package com.example.mygrallery; import android.os.Bundle;import android.annotation.SuppressLint;import android.app.Activity;import android.app.ActionBar.LayoutParams;import android.content.res.TypedArray;import android.view.Menu;import android.view.View;import android.view.ViewGroup;import android.view.animation.AnimationUtils;import android.widget.AdapterView;import android.widget.AdapterView.OnItemSelectedListener;import android.widget.BaseAdapter;import android.widget.Gallery;import android.widget.ImageSwitcher;import android.widget.ImageView;import android.widget.ViewSwitcher.ViewFactory; @SuppressWarnings("deprecation")@SuppressLint("InlinedApi")public class MainActivity extends Activity{private int[] ImageIds = new int[]{ R.drawable.one, R.drawable.tw, R.drawable.th, R.drawable.eight, R.drawable.ele,R.drawable.five, R.drawable.four, R.drawable.nice, R.drawable.seven, R.drawable.six,R.drawable.sl, R.drawable.ss, R.drawable.sw, R.drawable.ten, R.drawable.tw,R.drawable.oneowne }; @Overrideprotected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_main); final ImageSwitcher switcher = (ImageSwitcher) this.findViewById(R.id.switcher);final Gallery gallery = (Gallery) this.findViewById(R.id.gallery); switcher.setFactory(new ViewFactory(){@Overridepublic View makeView(){ImageView img = new ImageView(MainActivity.this);img.setBackgroundColor(0xff0000);img.setScaleType(ImageView.ScaleType.FIT_CENTER);img.setLayoutParams(new ImageSwitcher.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));return img;}});// 设置图片更换的动画效果switcher.setInAnimation(AnimationUtils.loadAnimation(this, android.R.anim.fade_in));switcher.setOutAnimation(AnimationUtils.loadAnimation(this, android.R.anim.fade_out));// 创建DataAdapter对象,为gallery提供数据BaseAdapter adapter = new BaseAdapter(){@Overridepublic int getCount(){// TODO Auto-generated method stubreturn ImageIds.length;} @Overridepublic Object getItem(int position){// TODO Auto-generated method stubreturn position;} @Overridepublic long getItemId(int position){// TODO Auto-generated method stubreturn position;} @Overridepublic View getView(int position, View convertView, ViewGroup parent){ImageView img = new ImageView(MainActivity.this);img.setImageResource(ImageIds[position % ImageIds.length]);// 设置ImageView的缩放类型img.setScaleType(ImageView.ScaleType.FIT_XY);img.setLayoutParams(new Gallery.LayoutParams(75, 110));// TypedArray arr= obtainStyledAttributes(R.)// img.setBackgroundResource(resid); return img;}}; gallery.setAdapter(adapter);gallery.setOnItemSelectedListener(new OnItemSelectedListener(){@Overridepublic void onItemSelected(AdapterView&lt;?&gt; parent, View view, int position, long id){// TODO Auto-generated method stubswitcher.setImageResource(ImageIds[position % ImageIds.length]);} @Overridepublic void onNothingSelected(AdapterView&lt;?&gt; parent){// TODO Auto-generated method stub}});} @Overridepublic boolean onCreateOptionsMenu(Menu menu){// Inflate the menu; this adds items to the action bar if it is present.getMenuInflater().inflate(R.menu.main, menu);return true;} }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现效果："><a href="#实现效果：" class="headerlink" title="实现效果："></a>实现效果：</h2><p><a href="https://imgtu.com/i/cq9o6g"><img src="https://z3.ax1x.com/2021/04/21/cq9o6g.jpg" alt="cq9o6g.jpg"></a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> 移动开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android学习笔记——Spinner</title>
      <link href="2021/04/21/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Spinner/"/>
      <url>2021/04/21/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Spinner/</url>
      
        <content type="html"><![CDATA[<h2 id="Spinner的功能与用法"><a href="#Spinner的功能与用法" class="headerlink" title="Spinner的功能与用法"></a>Spinner的功能与用法</h2><p>Spinner支持的常用XML属性及相关方法：</p><table><thead><tr><th>XML属性</th><th>相关方法</th><th>说明</th></tr></thead><tbody><tr><td>android:entries</td><td></td><td>使用数组资源设置该下拉列表框的列表项</td></tr><tr><td>android:dropDownHorizontalOffset</td><td>setDropDownHorizontalOffset(int)</td><td>设置列表选择框的水平偏移距</td></tr><tr><td>android:dropDownVerticalOffset</td><td>setDropDownVerticalOffset(int)</td><td>设置列表选择框的垂直偏移距</td></tr><tr><td>android:dropDownWidth</td><td>setDropDownWidth(int)</td><td>设置列表选择框的宽度</td></tr><tr><td>android:popupBackground</td><td>android:popupBackground</td><td>设置列表选择框的背景色</td></tr><tr><td>android:prompt</td><td></td><td>设置列表选择框的提示信息</td></tr></tbody></table><p>实例：让用户选择<br>程序清单：实例：让用户选择<br>程序清单：</p><h3 id="layout-main-xml"><a href="#layout-main-xml" class="headerlink" title="\layout\main.xml"></a>\layout\main.xml</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Spinner</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>entries</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@array/books<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>prompt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/tip<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Spinner</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/spinner<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>prompt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/tip<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="values-arrays-xml"><a href="#values-arrays-xml" class="headerlink" title="\values\arrays.xml"></a>\values\arrays.xml</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string-array</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>西游记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>水浒传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>简爱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>巴黎圣母院<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>红与黑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>羊脂球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>老人与海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>追风筝的人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>嫌疑人X的献身<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>呼啸山庄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>狂人日记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>朝花夕拾<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string-array</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">import android.app.Activity;import android.os.Bundle;import android.widget.ArrayAdapter;import android.widget.Spinner;import androidx.annotation.Nullable;public class MainActivity extends Activity {    Spinner spinner;    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.main);        spinner = (Spinner) findViewById(R.id.spinner);        String[] arr = {"鲁迅", "曹雪芹", "莫泊桑","施耐庵","维克多·雨果"};        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_list_item_multiple_choice, arr);        spinner.setAdapter(adapter);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> 移动开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS实现简单网页计算器</title>
      <link href="2021/04/19/JS%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%BD%91%E9%A1%B5%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>2021/04/19/JS%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%BD%91%E9%A1%B5%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>js实现简易计算器。计算器的布局不像表格那么公正对称，所以布局这块相对比较繁琐，但是也可以通过这来练习一下CSS。</p><h2 id="一、实现功能"><a href="#一、实现功能" class="headerlink" title="一、实现功能"></a>一、实现功能</h2><ul><li>完成计算器的加减乘除的基本计算功能</li><li>实现输入框中的字符串拼接</li></ul><h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><ul><li>完成基本布局</li><li>js实现运算功能</li></ul><h2 id="三、知识点"><a href="#三、知识点" class="headerlink" title="三、知识点"></a>三、知识点</h2><p>e.target||e.srcElement ：获取触发事件的元素</p><h2 id="四、具体代码实现"><a href="#四、具体代码实现" class="headerlink" title="四、具体代码实现"></a>四、具体代码实现</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>计算器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span> <span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">h1</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">button</span><span class="token punctuation">{</span><span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 65px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 45px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>182<span class="token punctuation">,</span> 93%<span class="token punctuation">,</span> 45%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> 3px 3px 5px #ccc<span class="token punctuation">;</span><span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">input</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#main</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 287px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span>2px solid #ccc<span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../imges/4.jpg'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.num</span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">}</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>计算器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cal(event);<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">readonly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>readonly<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取触发事件的元素</span><span class="token keyword">var</span> obj <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token operator">||</span>e<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>nodeName <span class="token operator">!=</span> <span class="token string">"BUTTON"</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> v <span class="token operator">=</span> obj<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span><span class="token keyword">var</span> screen <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"screen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//获取到输入框的值</span><span class="token keyword">var</span> exp <span class="token operator">=</span> screen<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span>exp<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将计算结果赋值给输入框</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"error"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span>screen<span class="token punctuation">.</span>value <span class="token operator">+=</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、js部分详解"><a href="#五、js部分详解" class="headerlink" title="五、js部分详解"></a>五、js部分详解</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取触发事件的元素</span><span class="token keyword">var</span> obj <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token operator">||</span>e<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>nodeName <span class="token operator">!=</span> <span class="token string">"BUTTON"</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> v <span class="token operator">=</span> obj<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span><span class="token keyword">var</span> screen <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"screen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//获取到输入框的值</span><span class="token keyword">var</span> exp <span class="token operator">=</span> screen<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span>exp<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将计算结果赋值给输入框</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"error"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>screen<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span>screen<span class="token punctuation">.</span>value <span class="token operator">+=</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用e.target||e.srcElement，获取到触发事件的元素，||连接两个语法是为了解决不同浏览器的兼容性问题。</p><p>获取到触发事件元素的具体值之后，判断元素值是否等于“=”和“C”，这两个按钮是做区别于普通字符串拼接及计算的其他功能。</p><p>C做清屏处理：判断触发事件的按钮值是否为C，若为C，屏幕中只显示0；</p><p>=做计算处理：判断触发事件的按钮值是否为=，若为=，利用eval()方法计算屏幕上的公式；</p><p>其他触发事件的按钮直接做字符串拼接显示在屏幕上。</p><h2 id="六、动图效果"><a href="#六、动图效果" class="headerlink" title="六、动图效果"></a>六、动图效果</h2><p><img src="photos%5C1.png"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 计算器 </tag>
            
            <tag> js实现计算器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10 CMD命令大全与超好用的快捷键</title>
      <link href="2021/04/19/Win10%20CMD%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%E4%B8%8E%E8%B6%85%E5%A5%BD%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2021/04/19/Win10%20CMD%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%E4%B8%8E%E8%B6%85%E5%A5%BD%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Windows-CMD-命令大全"><a href="#一、Windows-CMD-命令大全" class="headerlink" title="一、Windows CMD 命令大全"></a>一、Windows CMD 命令大全</h2><p>按组合键 Win(Windows图标键)+R 键打开运行窗口，输入“cmd”按回车即可打开cmd命令提示符</p><p>在窗口右击选择属性可进行个性化设置~</p><p>&nbsp;&nbsp;&nbsp;&nbsp; </p><p>　　1.calc：启动计算器</p><p>　　2.appwiz.cpl：程序和功能</p><p>　　3.certmgr.msc：证书管理实用程序</p><p>　　4.charmap：启动字符映射表</p><p>　　5.chkdsk.exe：Chkdsk磁盘检查(管理员身份运行命令提示符)</p><p>　　6.cleanmgr: 打开磁盘清理工具</p><p>　　7.cliconfg：SQL SERVER 客户端网络实用工具</p><p>　　8.cmstp：连接管理器配置文件安装程序</p><p>　　9.cmd.exe：CMD命令提示符</p><p>　　10.自动关机命令</p><p>　　Shutdown -s -t 600：表示600秒后自动关机</p><p>　　shutdown -a ：可取消定时关机</p><p>　　Shutdown -r -t 600：表示600秒后自动重启</p><p>　　rundll32 user32.dll,LockWorkStation：表示锁定计算机</p><p>　　11.colorcpl：颜色管理，配置显示器和打印机等中的色彩</p><p>　　12.CompMgmtLauncher：计算机管理</p><p>　　13.compmgmt.msc：计算机管理</p><p>　　14.credwiz：备份或还原储存的用户名和密码</p><p>　　15.comexp.msc：打开系统组件服务</p><p>　　16.control：控制面版</p><p>　　17.dcomcnfg：打开系统组件服务</p><p>　　18.Dccw：显示颜色校准</p><p>　　19.devmgmt.msc：设备管理器</p><p>　　20.desk.cpl：屏幕分辨率</p><p>　　21.dfrgui：优化驱动器 Windows 7→dfrg.msc：磁盘碎片整理程序</p><p>　　22.dialer：电话拨号程序</p><p>　　23.diskmgmt.msc：磁盘管理</p><p>　　24.dvdplay：DVD播放器</p><p>　　25.dxdiag：检查DirectX信息</p><p>　　26.eudcedit：造字程序</p><p>　　27.eventvwr：事件查看器</p><p>　　28.explorer：打开资源管理器</p><p>　　29.Firewall.cpl：Windows防火墙</p><p>　　30.FXSCOVER：传真封面编辑器</p><p>　　31.fsmgmt.msc：共享文件夹管理器</p><p>　　32.gpedit.msc：组策略</p><p>　　33.hdwwiz.cpl：设备管理器</p><p>　　34.inetcpl.cpl：Internet属性</p><p>　　35.intl.cpl：区域</p><p>　　36.iexpress：木马捆绑工具，系统自带</p><p>　　37.joy.cpl：游戏控制器</p><p>　　38.logoff：注销命令</p><p>　　39.lusrmgr.msc：本地用户和组</p><p>　　40.lpksetup：语言包安装/删除向导，安装向导会提示下载语言包</p><p>　　41.lusrmgr.msc：本机用户和组</p><p>　　42.main.cpl：鼠标属性</p><p>　　43.mmsys.cpl：声音</p><p>　　44.magnify：放大镜实用程序</p><p>　　45.mem.exe：显示内存使用情况(如果直接运行无效，可以先管理员身份运行命令提示符，在命令提示符里输入mem.exe&gt;d:a.txt<br>即可打开d盘查看a.txt，里面的就是内存使用情况了。当然什么盘什么文件名可自己决定。)</p><p>　　46.MdSched:Windows内存诊断程序</p><p>　　47.mmc：打开控制台</p><p>　　48.mobsync：同步命令</p><p>　　49.mplayer2：简易widnows media player</p><p>　　50.Msconfig.exe：系统配置实用程序</p><p>　　51.msdt：微软支持诊断工具</p><p>　　52.msinfo32：系统信息</p><p>　　53.mspaint：画图</p><p>　　54.Msra：Windows远程协助</p><p>　　55.mstsc：远程桌面连接</p><p>　　56.NAPCLCFG.MSC：客户端配置</p><p>　　57.ncpa.cpl：网络连接</p><p>　　58.narrator：屏幕“讲述人”</p><p>　　59.Netplwiz：高级用户帐户控制面板，设置登陆安全相关的选项</p><p>　　60.netstat : an(TC)命令检查接口</p><p>　　61.notepad：打开记事本</p><p>　　62.Nslookup：IP地址侦测器</p><p>　　63.odbcad32：ODBC数据源管理器</p><p>　　64.OptionalFeatures：打开“打开或关闭Windows功能”对话框</p><p>　　65.osk：打开屏幕键盘</p><p>　　66.perfmon.msc：计算机性能监测器</p><p>　　67.perfmon：计算机性能监测器</p><p>　　68.PowerShell：提供强大远程处理能力</p><p>　　69.printmanagement.msc：打印管理</p><p>　　70.powercfg.cpl：电源选项</p><p>　　71.psr：问题步骤记录器</p><p>　　72.Rasphone：网络连接</p><p>　　73.Recdisc：创建系统修复光盘</p><p>　　74.Resmon：资源监视器</p><p>　　75.Rstrui：系统还原</p><p>　　76.regedit.exe：注册表</p><p>　　77.regedt32：注册表编辑器</p><p>　　78.rsop.msc：组策略结果集</p><p>　　79.sdclt：备份状态与配置，就是查看系统是否已备份</p><p>　　80.secpol.msc：本地安全策略</p><p>　　81.services.msc：本地服务设置</p><p>　　82.sfc /scannow：扫描错误并复原/windows文件保护</p><p>　　83.sfc.exe：系统文件检查器</p><p>　　84.shrpubw：创建共享文件夹</p><p>　　85.sigverif：文件签名验证程序</p><p>　　86.slui：Windows激活，查看系统激活信息</p><p>　　87.slmgr.vbs -dlv ：显示详细的许可证信息</p><p>　　88.snippingtool：截图工具，支持无规则截图</p><p>　　89.soundrecorder：录音机，没有录音时间的限制</p><p>　　90.StikyNot：便笺</p><p>　　91.sysdm.cpl：系统属性</p><p>　　92.sysedit：系统配置编辑器</p><p>　　93.syskey：系统加密，一旦加密就不能解开，保护系统的双重密码</p><p>　　94.taskmgr：任务管理器(旧版)</p><p>　　95.TM任务管理器(新版)</p><p>　　96.taskschd.msc：任务计划程序</p><p>　　97.timedate.cpl：日期和时间</p><p>　　98.UserAccountControlSettings用户账户控制设置</p><p>　　99.utilman：辅助工具管理器</p><p>　　100.wf.msc：高级安全Windows防火墙</p><p>　　101.WFS：Windows传真和扫描</p><p>　　102.wiaacmgr：扫描仪和照相机向导</p><p>　　103.winver：关于Windows</p><p>　　104.wmimgmt.msc：打开windows管理体系结构(WMI)</p><p>　　105.write：写字板</p><p>　　106.wscui.cpl：操作中心</p><p>　　107.wuapp：Windows更新</p><p>　　108.wscript：windows脚本宿主设置<br>&nbsp;以上就是windows 10系统中运行命令大全，有需要可复制粘贴即可使用。&nbsp; Windows 不区分大小写</p><h2 id="二、Windows-cmd窗口中cd指令切换路径"><a href="#二、Windows-cmd窗口中cd指令切换路径" class="headerlink" title="二、Windows cmd窗口中cd指令切换路径"></a>二、Windows cmd窗口中cd指令切换路径</h2><p>&nbsp; 通用的格式为输入 cd /d *&nbsp;&nbsp; // *可以是你要切换的任意盘符</p><p>1、Windows cmd窗口中cd指令无法转换盘符目录怎么办？</p><p>1）按下WIN+R键 输入cmd，打开cmd窗口。</p><p>2）默认路径为用户文档路径，如果想切换到D盘 ，输入 cd d:是不行的。</p><p>3）如果要切换盘符的目录，正确的用法是在cd 和路径中间 增加一个’/d’，输入&nbsp;cd /d d:</p><p>4）当我们要切换盘符时，可以不用cd指令直接可用盘符，输入&nbsp;d：&nbsp;&nbsp;&nbsp;</p><p>5）cd命令有什么用呢？</p><p>cmd中输入 cd /? ，就得到其对应的帮助文件。其主要功能是显示当前目录的名称，或更改当前的目录。</p><p>&nbsp;</p><p>2、Windows cmd窗口中cd指令切换盘符和盘符目录：</p><p>1）显示当前目录的所有文件，输入 dir</p><p>2）进入当前目录下的子目录，输入 cd 目录名</p><p>3）返回上一层目录，输入 cd ..</p><p>4）切换到根目录，输入 cd /</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </p><h2 id="三、WIN10-超好用的快捷键"><a href="#三、WIN10-超好用的快捷键" class="headerlink" title="三、WIN10 超好用的快捷键"></a>三、WIN10 超好用的快捷键</h2><p>1、以管理员身份打开</p><p>&nbsp; &nbsp; &nbsp; &nbsp; Win10中的UAC（用户账号控制）虽然已经很智能，但并不完美，不少程序我们在执行的时候需要手工指定“以管理员身份运行”。</p><p>方式一：搜索cmd，右击选择以管理员身份运行</p><p>方式二：在目录C:\Windows\System32下，搜索cmd.exe，右击选择以管理员身份运行</p><p>2、打开“任务管理器”– Ctrl+Shift+Esc</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 在Win10中之前，要打开“任务管理器”，按下那个众所周知的“Ctrl+Alt+Del”三指禅即可，</p><p>在Win10中，按下这个组合键，打开的却 是“锁定计算机”、“启动任务管理器” 、“切换用户”等一系列任务列表，虽然也可以间接打开“任务管理器”，但更直接的方法是按下“Ctrl+shift+Esc”组合键。</p><p>3、Win + D 显示桌面</p><p>4、Win + E 打开文件资源管理器（计算机）</p><p>5、Win + I 打开设置</p><p>6、Win + L&nbsp; 锁屏</p><p>7、Win + R&nbsp; 打开运行窗口</p><p>8、Ctrl + P&nbsp;&nbsp; 打开打印视图</p><p>9、Ait + Tab 任务切换</p><p>10、Ctrl + Z&nbsp;&nbsp; 撤销</p><p>11、Ctrl + F&nbsp;&nbsp; 查找。可以查找文字，浏览器里面也可以用。写论文的时候很熟练。</p><p>12、Ctrl+Shift+N 打开想要新建文件夹的分区或者目录，一个“新建文件夹”就出现了</p><p>13、Win +P&nbsp;&nbsp; 打开“投影”，用投影仪以及玩双屏的老铁，自然知道。很方便的快捷键。</p><p>14、Win +左/右&gt; Win +上/下&gt;&nbsp;&nbsp;&nbsp; 贴靠窗口，窗口可以变为1/4大小放置在屏幕4个角落（个人比较喜欢常用）</p><p>15、Win + Tab&nbsp; 时间轴（1803版本）、查看任务视图，时间轴可以看到几天执行过的任务，查找起来真的方便。</p><p>16、Win +“=”键（就是在backspace旁边的有加号有等号的那个键），打开放大镜的快捷键，适合眼神不好的人使用。</p><p>17、Win + F4键&nbsp; 在浏览器中按下，则全选中链接，不需要使用鼠标点选链接栏，可快速打网址。</p><p>18、Win + S 打开搜索 小娜</p><p>19、Win + X&nbsp;&nbsp;&nbsp; 等于在左下角开始图标上面点击右键。</p><p>20、Win+K 打开「连接」设备</p><p>&nbsp; &nbsp;&nbsp; 这相对是一个冷门快捷键，主要是用来快速连接无线和蓝牙设备，比如一些蓝牙鼠标、蓝牙音箱、蓝牙键盘或者无线显示器。只要用Win+K 呼出这个菜单，我们就能快速的进行蓝牙配置。不必每次去点击右下角的蓝牙图标再连接蓝牙这么麻烦了。</p><p>21、Win+A 打开操作中心</p><p>&nbsp; &nbsp; 通知中心和常用的设置选项都会出现在操作中心里,可以快速调整电脑的联网状态和夜间模式等选项，用起来还是十分方便的。</p><p>22、Win + Shift + S&nbsp; 召唤Windows截图</p><p>&nbsp; &nbsp; &nbsp;&nbsp; 换到win10之后，它自带的截图功能非常好用，快捷键 Win + Shift + S呼出，可以选择截屏幕的任意区域，任意形状，以及全面屏幕截图。截图之后可以马上进入编辑模式，不必每次开电脑的还去登陆QQ。</p><p>&nbsp;</p><p>23、虚拟桌面（可以自己尝试）</p><p>&nbsp; &nbsp; &nbsp; &nbsp; win10中加入了对虚拟桌面的支持。虚拟桌面简单得说：就是保留现有桌面全部设置的情况下。打开一个全新的空白桌面供用户使用。适合在做现有工作的间中临时插入一套新工作进行。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 比如说你打开一堆表格和文档时，突然接到老板的加急任务。就可以打开一个新的虚拟桌面处理，完事以后还可以切换到原先打开的那堆表格中。又或者接了“私活”不想让老板发现，就可以创建一个虚拟桌面“藏在电脑中”随时可以切换出来。</p><p>下边是一组关于虚拟桌面的快捷键：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>Win + Ctrl + D 创建虚拟桌面</p><p>Win + Ctrl + F4 关闭当前虚拟桌面</p><p>Win + Ctrl + ← 向左切换虚拟桌面</p><p>Win + Ctrl + → 向右切换虚拟桌面</p><p>&nbsp; &nbsp;</p><h2 id="三、Windows-cmd窗口常用命令"><a href="#三、Windows-cmd窗口常用命令" class="headerlink" title="三、Windows cmd窗口常用命令"></a>三、Windows cmd窗口常用命令</h2><p>cmd中输入 命令名 /? ，就可查看其对应的帮助文件。</p><p>1、ping 命令：用来验证与远程计算机的连接。</p><p>ping 是Windows自带的一个DOS命令。利用它可以检查网络是否能够连通和分析网络速度，用好它可以很好地帮助我们分析判定网络故障。</p><p>输入ping按回车即可看到详细说明。默认响应4下结束</p><p>语法：ping &nbsp; [选项] &nbsp;[主机名称或IP地址]</p><p>D:&gt;ping 127.0.0.1</p><p>正在 Ping 127.0.0.1 具有 32 字节的数据:<br>来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64<br>来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64<br>来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64<br>来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64</p><p>127.0.0.1 的 Ping 统计信息:<br>    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，<br>往返行程的估计时间(以毫秒为单位):<br>    最短 = 0ms，最长 = 0ms，平均 = 0ms<br>2、用命令查看和终止进程</p><p>netstat命令：显示协议统计信息和当前 TCP/IP 网络连接</p><p>语法：netstat &nbsp; [选项]&nbsp;</p><p>常用参数：</p><p>-a &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;显示所有连接和侦听端口。<br>-n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;以数字形式显示地址和端口号。<br>-o &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;显示拥有的与每个连接关联的进程 ID。<br>比如：</p><p>查看监听端口以及监听对应的进程（PID）&gt;netstat -ano | findstr 端口号</p><p>D:&gt;netstat -ano | findstr 8000<br>  TCP    0.0.0.0:8000           0.0.0.0:0              LISTENING       29296<br>  TCP    [::]:8000              [::]:0                 LISTENING       29296<br>taskkill命令：按照进程 ID (PID) 或映像名称终止任务。</p><p>语法：taskkill &nbsp; [选项]&nbsp;</p><p>常用参数：</p><p>&nbsp;/F &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;指定要强行终止 &nbsp;<br>&nbsp;/T &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Tree kill: 终止指定的进程和任何由此启动的子进程。<br>/IM &nbsp; &nbsp;&nbsp; &nbsp;image name &nbsp;指定要终止的进程的名称。<br>/PID &nbsp;process id &nbsp; &nbsp; &nbsp; 指定要终止的进程的PID。 &nbsp;<br>比如：</p><p>终止 idea进程及子进程&gt; taskkill /f /im &nbsp;idea64.exe&nbsp;&nbsp;/t</p><p>根据pid强制终止进程&gt; taskkill&nbsp; /pid &nbsp;进程的PID&nbsp; /f&nbsp;</p><p>D:&gt;taskkill /pid 29296 /f<br>成功: 已终止 PID 为 29296 的进程。&nbsp;</p><p>ends ~</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> cmd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识学习笔记总结</title>
      <link href="2021/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/"/>
      <url>2021/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="java基础复习"><a href="#java基础复习" class="headerlink" title="java基础复习"></a>java基础复习</h2><h3 id="1、-抽象类可以有构造器，可以有一个非抽象的父类"><a href="#1、-抽象类可以有构造器，可以有一个非抽象的父类" class="headerlink" title="1、 抽象类可以有构造器，可以有一个非抽象的父类"></a>1、 抽象类可以有构造器，可以有一个非抽象的父类</h3><h3 id="2、-垃圾回收机制回收的是堆里面的内存，栈里面的数据自动入栈自动出栈"><a href="#2、-垃圾回收机制回收的是堆里面的内存，栈里面的数据自动入栈自动出栈" class="headerlink" title="2、 垃圾回收机制回收的是堆里面的内存，栈里面的数据自动入栈自动出栈"></a>2、 垃圾回收机制回收的是堆里面的内存，栈里面的数据自动入栈自动出栈</h3><h3 id="3、-引用类型的数据在堆当中，内存中操作的只有栈，new关键字在堆里面分配一块内存"><a href="#3、-引用类型的数据在堆当中，内存中操作的只有栈，new关键字在堆里面分配一块内存" class="headerlink" title="3、 引用类型的数据在堆当中，内存中操作的只有栈，new关键字在堆里面分配一块内存"></a>3、 引用类型的数据在堆当中，内存中操作的只有栈，new关键字在堆里面分配一块内存</h3><h3 id="4、-java中是值传递"><a href="#4、-java中是值传递" class="headerlink" title="4、 java中是值传递"></a>4、 java中是值传递</h3><h3 id="5、-String是不可变字符，即一旦分配了内存，此内存的值将不会改变，又将String赋值是，会重新分配一块内存，字符串池：-StringBuffer"><a href="#5、-String是不可变字符，即一旦分配了内存，此内存的值将不会改变，又将String赋值是，会重新分配一块内存，字符串池：-StringBuffer" class="headerlink" title="5、 String是不可变字符，即一旦分配了内存，此内存的值将不会改变，又将String赋值是，会重新分配一块内存，字符串池： StringBuffer"></a>5、 String是不可变字符，即一旦分配了内存，此内存的值将不会改变，又将String赋值是，会重新分配一块内存，字符串池： StringBuffer</h3><h3 id="6、-在堆中的东西叫对象"><a href="#6、-在堆中的东西叫对象" class="headerlink" title="6、 在堆中的东西叫对象"></a>6、 在堆中的东西叫对象</h3><h4 id="运行时异常："><a href="#运行时异常：" class="headerlink" title="运行时异常："></a>运行时异常：</h4><p>&nbsp; &nbsp; ArithmeticException&nbsp; 当出现异常的运算条件时，抛出此异常。例如，一个整数“除以零”时，抛出此类的一个实例。</p><p>&nbsp; &nbsp;ArrayIndexOutOfBoundsException用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引。</p><p>&nbsp; &nbsp;ArrayStoreException试图将错误类型的对象存储到一个对象数组时抛出的异常。如：</p><p>&nbsp; &nbsp;Objectx[] = new String[3];</p><p>&nbsp; &nbsp;x[0]= new Integer(0);</p><p>&nbsp; &nbsp;ClassCastException视图将对象转换为不是实例的子类时，抛出该异常。如：</p><p>&nbsp; &nbsp;Objectx = new Integer(0);</p><p>&nbsp; &nbsp;System.out.println((String)x);</p><p>&nbsp; &nbsp;illegalArgumentException表明向方法传递了一个不合法或不正确的参数</p><p>&nbsp; &nbsp;NegativeArraySizeException如果应用程序视图创建大小为负的数组，则抛出该异常</p><h4 id="编译时异常："><a href="#编译时异常：" class="headerlink" title="编译时异常："></a>编译时异常：</h4><p>&nbsp; &nbsp;NoSuchMethodException无法找到某一特定方法时，抛出该异常</p><h3 id="7、-unicode码范围"><a href="#7、-unicode码范围" class="headerlink" title="7、 unicode码范围"></a>7、 unicode码范围</h3><p>&nbsp; 汉字：[\u4e00,\u9fa5]</p><p>&nbsp; 数字：[0x30,0x39]</p><p>&nbsp; 小写字母：[0x61,0x7a]</p><p>&nbsp; 大写字母：[0x41,0x5a]</p><h3 id="8、-final类"><a href="#8、-final类" class="headerlink" title="8、 final类"></a>8、 final类</h3><p>&nbsp; &nbsp;final类能够修饰非抽象类、非抽象类成员方法和变量（静态变量、实例变量、局部变量）</p><p>&nbsp; &nbsp;final类不能被继承，没有子类</p><p>&nbsp; &nbsp;final方法可以被继承，但不能被子类的方法覆盖</p><p>&nbsp; &nbsp;final成员变量表示常量，声明成员变量时，必须赋值（要么在声明的时候赋值，要么在构造器中赋值），赋值后不能被改变</p><p>&nbsp; &nbsp;publicfinalint E; //final空白,必须在初始化对象的时候赋初值<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Test3(int x) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E= x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp; &nbsp;final不能用于修饰构造方法2.5</p><h3 id="9、-static只能修饰成员变量，表示所有对象共享这个数据"><a href="#9、-static只能修饰成员变量，表示所有对象共享这个数据" class="headerlink" title="9、 static只能修饰成员变量，表示所有对象共享这个数据"></a>9、 static只能修饰成员变量，表示所有对象共享这个数据</h3><p>&nbsp; &nbsp;static能够修饰成员变量和方法，内部类，也可以形成静态static代码块，不能修饰局部变量</p><p>&nbsp; &nbsp;被static修饰的成员变量可以直接用类名来调用，语法如下：</p><p>&nbsp; &nbsp;类名.静态放大名（）；</p><p>&nbsp; &nbsp;类名.静态变量名；</p><p>&nbsp; &nbsp;静态方法中不能用this和super关键字，不能直接访问不带static的成员变量和成员方法</p><p>&nbsp; &nbsp;因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract</p><p>&nbsp; &nbsp;先运行静态代码块，再运行构造器</p><p>&nbsp;</p><h3 id="10、static和final一块表示什么"><a href="#10、static和final一块表示什么" class="headerlink" title="10、static和final一块表示什么"></a>10、static和final一块表示什么</h3><p>&nbsp; &nbsp;staticfinal用来修饰成员变量和成员方法，可理解为全局变量（java中没有全局变量的概念）</p><p>&nbsp; &nbsp;staticfinal修饰变量，表示一旦给值就不可修改，并且通过类名就可以访问</p><p>&nbsp; &nbsp;staticfinal修饰方法，表示不可覆盖，并可通过类名直接访问&nbsp;</p><p>&nbsp; &nbsp;staticfinal修饰一些容器类型（ArrayList、HashMap）的变量，不可以改变容器变量本省，但可以修改容器中存放的对象</p><p>&nbsp;</p><h3 id="11、类成员变量分类"><a href="#11、类成员变量分类" class="headerlink" title="11、类成员变量分类"></a>11、类成员变量分类</h3><p>&nbsp;&nbsp;&nbsp; 被static修饰的变量叫静态变量或者类变量；</p><p>&nbsp;&nbsp;&nbsp; 没有被static修饰的变量叫实例变量。</p><p>&nbsp;</p><h3 id="12、命令行参数"><a href="#12、命令行参数" class="headerlink" title="12、命令行参数"></a>12、命令行参数</h3><p>&nbsp;&nbsp;&nbsp; java主类参数（即命令行参数）</p><p>&nbsp;&nbsp;&nbsp; eclipse中java输入命令行参数，在选定的类中，点击右键run as—Runconfigurations—Arguments-Program arguments-Variables-选择string_prompt</p><p>&nbsp;</p><h3 id="13、Integer-valueOf-String-将字符串转换成Integer包装类"><a href="#13、Integer-valueOf-String-将字符串转换成Integer包装类" class="headerlink" title="13、Integer.valueOf(String)将字符串转换成Integer包装类"></a>13、Integer.valueOf(String)将字符串转换成Integer包装类</h3><p>&nbsp;</p><h3 id="14、一个-java文件中可以有很多类。不过注意以下几点："><a href="#14、一个-java文件中可以有很多类。不过注意以下几点：" class="headerlink" title="14、一个.java文件中可以有很多类。不过注意以下几点："></a>14、一个.java文件中可以有很多类。不过注意以下几点：</h3><h4 id="a、public-权限的类只能有一个（也可以一个都没有，但最多只有1个）"><a href="#a、public-权限的类只能有一个（也可以一个都没有，但最多只有1个）" class="headerlink" title="a、public 权限的类只能有一个（也可以一个都没有，但最多只有1个）"></a>a、public 权限的类只能有一个（也可以一个都没有，但最多只有1个）</h4><h4 id="b、这个-java文件的文件名必须是public类的类名（一般的情况下，这里放置main方法是程序的入口。）"><a href="#b、这个-java文件的文件名必须是public类的类名（一般的情况下，这里放置main方法是程序的入口。）" class="headerlink" title="b、这个.java文件的文件名必须是public类的类名（一般的情况下，这里放置main方法是程序的入口。）"></a>b、这个.java文件的文件名必须是public类的类名（一般的情况下，这里放置main方法是程序的入口。）</h4><h4 id="c、若这个文件中没有public的类，则文件名随便是一个类的名字即可"><a href="#c、若这个文件中没有public的类，则文件名随便是一个类的名字即可" class="headerlink" title="c、若这个文件中没有public的类，则文件名随便是一个类的名字即可"></a>c、若这个文件中没有public的类，则文件名随便是一个类的名字即可</h4><h4 id="d、用javac-编译这个-java文件的时候，它会给每一个类生成一个-class文件"><a href="#d、用javac-编译这个-java文件的时候，它会给每一个类生成一个-class文件" class="headerlink" title="d、用javac 编译这个.java文件的时候，它会给每一个类生成一个.class文件"></a>d、用javac 编译这个.java文件的时候，它会给每一个类生成一个.class文件</h4><p>&nbsp;</p><h3 id="15、面向对象、面向过程"><a href="#15、面向对象、面向过程" class="headerlink" title="15、面向对象、面向过程"></a>15、面向对象、面向过程</h3><p>&nbsp;&nbsp;&nbsp; 面向对象的三大特性：封装、继承、多态</p><p>&nbsp;&nbsp;&nbsp; 面向过程：C语言的底层语言的特性</p><p>&nbsp;</p><h3 id="16、类和对象："><a href="#16、类和对象：" class="headerlink" title="16、类和对象："></a>16、类和对象：</h3><p>&nbsp;&nbsp;&nbsp; 一个类中可以有多个对象，类是对对象的描述</p><p>&nbsp;&nbsp;&nbsp; 一个类中的成员：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 字段：封装private</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 方法：类的行为</p><p>&nbsp; &nbsp; 构造器：与类同名，没有返回值。作用：初始化成员变量。默认构造器：无参且同名没有返回值，当一个类显示的表明构</p><p>造器，则类不自己建立默认构造器</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 内部类</p><p>&nbsp;</p><h3 id="17、类之间的关系：继承耦合度最高"><a href="#17、类之间的关系：继承耦合度最高" class="headerlink" title="17、类之间的关系：继承耦合度最高"></a>17、类之间的关系：继承耦合度最高</h3><p>&nbsp;&nbsp;&nbsp; A．继承（is-a）: 单继承多实现&nbsp;extends 优点：减少了代码的冗余、缺点：耦合度太高</p><p>&nbsp; &nbsp; B．实现:</p><p>&nbsp;&nbsp;&nbsp; C．组合(has-a):</p><p>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 合成:个体和整体的关系，个体与整体生命周期相同，公司和部门的关系</p><p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 聚合：个体和整体的关系，生命周期不同，学生和学校的关系</p><p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 关联：双向关联</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Class Person{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Petpet;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ClassPet{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Personowner;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; D．依赖(use-a):一个类作为另一个类方法的参数或者是返回值，称为依赖</p><p>&nbsp;</p><h3 id="18、java设计原则"><a href="#18、java设计原则" class="headerlink" title="18、java设计原则"></a>18、java设计原则</h3><p>低耦合高内聚</p><p>可扩展性和可维护性</p><h3 id="19、继承："><a href="#19、继承：" class="headerlink" title="19、继承："></a>19、继承：</h3><p>&nbsp; 子类中的成员：</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 1）从父类中继承的可视化（非私有的）的成员（字段、方法），不能继承父类的构造器</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 2）子类所特有的成员（字段、方法、构造器）</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 3）重载父类的成员（方法）&nbsp; 多态</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重载的条件：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a）发生在同一个类或者父子类之间</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b）方法名称相同，参数列表（参数的个数，参数的数据类型、参数的顺序）不同</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c）返回值无所谓</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d）访问权限无所谓</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;歧义重载：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ma(12,34)//歧义重载，编译错误</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; publicvoid ma(int i,double j){//打印1}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; publicvoid ma(double i,int j){//打印2}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;构造器重载：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; this.成员（字段、方法）：调用本类的字段、方法</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; this(参数列表):调用本类的其他构造方法，必须在构造方法的第一句</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; public Person(int age){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this(age,””);//调用下面那个构造器</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; publicPerson(int age,String name){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.age= age;//调用本类的字段</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.name= name;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;super：父类的对象</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.成员：调用父类的成员（方法、字段）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super(参数列表)：调用父类的构造方法，必须位于子类构造方法的第一句</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果父类中没有无参的构造器，在子类中必须显式的调用父类带参数的构造方法（super（参数类表或者this（参数列表）））；&nbsp; 如果父类有无参的构造器，则子类中可以不用显式调用父类的构造器，因为系统默认调用super（）;</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 4）重写父类的成员（方法）&nbsp; 多态</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重写的条件 ：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a）发生在父子类之间</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b）方法名称相同，参数列表（参数的个数，参数的数据类型、参数的顺序）相同</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c）返回值必须相同</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d）子类覆盖方法的访问权限大于等于父类被覆盖方法的访问权限</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e）子类不能抛出比父类异常更大的异常（RuntimeException例外）</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 5）隐藏父类的成员（字段）&nbsp;&nbsp;&nbsp;</p><p>多态对象：调用隐藏成员，调用的是父类的</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;调用覆盖成员，调用的是子类的&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;</p><h3 id="20、static-类成员"><a href="#20、static-类成员" class="headerlink" title="20、static:类成员"></a>20、static:类成员</h3><p>字段：所有对象共享</p><p>&nbsp;&nbsp;&nbsp; 方法：静态方法不能直接访问非静态的成员，如果需要访问，产生实例访问；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;非静态方法能够直接访问静态成员和非静态成员</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;静态方法中不能有this、super关键字</p><p>&nbsp;&nbsp;&nbsp; 块：内存中只执行一次，通常用来初始化静态成员</p><p>&nbsp;&nbsp;&nbsp; 内部类</p><h3 id="21、final：终态的"><a href="#21、final：终态的" class="headerlink" title="21、final：终态的"></a>21、final：终态的</h3><p>&nbsp;&nbsp;&nbsp; 变量：不能第二次赋值，而且必须有初始值</p><p>&nbsp;&nbsp;&nbsp; 方法：不能被重写</p><p>类：不能被继承</p><h3 id="22、abstract："><a href="#22、abstract：" class="headerlink" title="22、abstract："></a>22、abstract：</h3><p>&nbsp;&nbsp; 抽象方法必须在抽象类中，抽象类中不一定要有抽象方法</p><p>&nbsp;&nbsp; 抽象类没有实例</p><p>&nbsp;&nbsp; 抽象类可以有父类，父类可以是抽象类也可以是非抽象类</p><p>&nbsp;&nbsp; 抽象类有构造器，不能用来产生本类实例，构造器用来间接产生子类实例时使用</p><p>&nbsp;&nbsp;abstract不能与static、final、private一起使用</p><h3 id="23、异常处理："><a href="#23、异常处理：" class="headerlink" title="23、异常处理："></a>23、异常处理：</h3><p>&nbsp;&nbsp; 1）try{}catch（）finally{}</p><p>&nbsp;&nbsp; 2）throws&nbsp;&nbsp; 方法声明后 throws 异常类</p><p>&nbsp;&nbsp; 3）throw&nbsp;&nbsp;&nbsp; 句子（通常是if）后throw&nbsp;异常类的实例</p><p>&nbsp;&nbsp; 4）自定义异常类&nbsp; extends&nbsp; Exception或者RuntimeException&nbsp;</p><h3 id="24、方法重写-override-和-重载-overlord-的区别"><a href="#24、方法重写-override-和-重载-overlord-的区别" class="headerlink" title="24、方法重写(override)和 重载(overlord)的区别"></a>24、方法重写(override)和 重载(overlord)的区别</h3><p>重写override：子类中出现与父类中签名相同的方法、访问修饰符要等于高于父类、返回值类型，参数列表都相同</p><p>重载overlord：一个类内部出现两个及两个以上方法名相同、参数列表不同(参数类型，参数个数，参数类型的顺序)的方法</p><p>&nbsp;</p><h3 id="25、动态多态和静态多态"><a href="#25、动态多态和静态多态" class="headerlink" title="25、动态多态和静态多态"></a>25、动态多态和静态多态</h3><p>&nbsp;&nbsp;&nbsp; 动态多态（运行时多态）：运行过程中才知道调用那个方法，指的是方法重写</p><p>&nbsp;&nbsp;&nbsp; 静态多态（编译时多态）：编译时就知道所调用的方法，指的是方法重载</p><p>&nbsp;</p><h3 id="26、如果父类中没有空参构造"><a href="#26、如果父类中没有空参构造" class="headerlink" title="26、如果父类中没有空参构造"></a>26、如果父类中没有空参构造</h3><p>那么子类必须同super()的方式显示的调用父类构造</p><p>建议：如果父类中出现带参构造，那么必须手动添加空参构造</p><p>例：下列代码的运行结果是（&nbsp;B）</p><p>classA{</p><p>&nbsp;&nbsp;&nbsp;&nbsp; public&nbsp; A(int a){System.out.println（“A”）;}</p><p>}</p><p>class B extends A{</p><p>&nbsp;&nbsp;&nbsp; publicB(){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super(5);//必须加上这一块，用super（）显示的调用父类中的方法</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; public voidma(){System.out.println(“ma”);}</p><p>}</p><p>public class test{</p><p>&nbsp;&nbsp;&nbsp; public static void main(String[]args){</p><p>B b=new B（）;</p><p>b.ma();</p><p>&nbsp;&nbsp;&nbsp; }</p><p>}</p><p>A.&nbsp; 打印输出ma</p><p>B.&nbsp; 编译错误</p><p>C.&nbsp; 打印输出A</p><p>D.&nbsp; 打印输出A&nbsp; ma</p><p>&nbsp;</p><h3 id="27、-static："><a href="#27、-static：" class="headerlink" title="27、 static："></a>27、 static：</h3><p>表示静态的，修饰的内容属于类成员；被该类的所有对象共享，建议使用类名.的方式访问；修饰的内容在类加载的时候，执行；只能访问被static修饰的内容；修饰的内容只在类加载的时候执行一次。</p><p>可以修饰的内容：修饰属性、修饰方法、作为代码块使用 jdbc 加载驱动的时候</p><p>&nbsp;&nbsp;&nbsp; static{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class.forName(“”);//作为代码块使用</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp; 特点：</p><p>&nbsp;&nbsp;&nbsp; 1.修饰的内容属于类成员</p><p>&nbsp;&nbsp;&nbsp; 2.修饰的方法，不能被重写，可以被重载</p><p>&nbsp;&nbsp;&nbsp; 3.修饰的内容，执行一次</p><p>例：public class HelloWorld{</p><p>public staticvoid main(String args[]){</p><p>method();</p><p>}</p><p>public voidmethod(){</p><p>try{</p><p>System.out.println(“hello我执行”);</p><p>}</p><p>finally{</p><p>System.out.println(“我就不执行”);</p><p>}</p><p>&nbsp; }</p><p>}</p><p>编译运行后，输出结果是什么？(D&nbsp;)</p><p>A.”hello 我执行”</p><p>B.”我就不执行”</p><p>C.”hello 我执行”</p><p>“我就不执行”</p><p>&nbsp; D.代码不能编译</p><p>因为main方法是用static修饰的静态方法，调用的方法也必须用static修饰，而method();方法没有被static修饰</p><p>&nbsp;</p><h3 id="28、hashcode-返回的是对象的内存地址对应的int类型数据，但是我们可以重写hashCode-方法，返回的就不再是内存地址。"><a href="#28、hashcode-返回的是对象的内存地址对应的int类型数据，但是我们可以重写hashCode-方法，返回的就不再是内存地址。" class="headerlink" title="28、hashcode()返回的是对象的内存地址对应的int类型数据，但是我们可以重写hashCode()方法，返回的就不再是内存地址。"></a>28、hashcode()返回的是对象的内存地址对应的int类型数据，但是我们可以重写hashCode()方法，返回的就不再是内存地址。</h3><p>hashcode()相同的对象，这两个对象不一定相同；如果两个对象相同，则hashcode()一定相同。</p><p>&nbsp;</p><h3 id="29、java中的访问修饰符"><a href="#29、java中的访问修饰符" class="headerlink" title="29、java中的访问修饰符"></a>29、java中的访问修饰符</h3><p>public： 所有</p><p>protected： 自己、同一包中、子类可以访问</p><p>default： 默认什么都不加，就是default，自己、同一包中可以访问，但是比protected级别要低即限制更多</p><p>friendly： 自己、同一包中可以访问</p><p>private： 自己</p><p>例：以下代码的运行结果是：(&nbsp;C&nbsp; )</p><ol><li>abstract class abstrctIt {</li></ol><p>2.&nbsp;&nbsp; abstractfloat getFloat ();</p><ol start="3"><li><p>}</p></li><li><p>public class AbstractTest extends AbstractIt {</p></li></ol><p>5.&nbsp;&nbsp; privatefloat f1 = 1.0f;</p><p>6.&nbsp;&nbsp; privatefloat getFloat () {return f1;}</p><ol start="7"><li>}</li></ol><p>A. 编译成功</p><p>B. 第6行产生错误，导致运行失败</p><p>C. 第6行产生错误，导致编译失败</p><p>D. 第5行产生错误，导致编译失败</p><p>默认什么不加的访问修饰符是default，default比private限制少（即更高级），比protected限制多，所有第六行重写方法用的private访问修饰符比父类低级，所有会出现编译失败</p><p>&nbsp;</p><h3 id="30、Math-random-获取-0-1-的值，取不到1；"><a href="#30、Math-random-获取-0-1-的值，取不到1；" class="headerlink" title="30、Math.random()获取[0,1)的值，取不到1；"></a>30、Math.random()获取[0,1)的值，取不到1；</h3><p>用法：（int）Math.random()*n+1;取到1到n之间的整数</p><p>&nbsp;</p><h3 id="31、数组、集合、字符串之间的转换"><a href="#31、数组、集合、字符串之间的转换" class="headerlink" title="31、数组、集合、字符串之间的转换"></a>31、数组、集合、字符串之间的转换</h3><p>a. Arrays.asList() //将数组转换成集合</p><p>例：List list = Arrays.asList(names);//将数组转换成集合。</p><p>b.String.valueOf() //将数组转换成字符串、也可将整数转换成字符串</p><p>例：char []ch1 = {‘a’,’c’,’a’,’b’,’a’};</p><p>&nbsp;&nbsp;&nbsp;&nbsp; String str2 = String.valueOf(ch1);</p><p>例：int num = 123456;</p><p>&nbsp;&nbsp;&nbsp;&nbsp; String str =String.valueOf(num);</p><p>c.toCharArray()将字符串转换成数组</p><p>例：String str = “gdfgdfgd”;</p><p>char[] ch = str.toCharArray();</p><p>&nbsp;&nbsp; d.Arrays.toString()将字符数组变成字符串特定格式输出，如[1,2,3]</p><p>&nbsp;&nbsp;例：String str1 = Arrays.toString(ch);</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println(str1);</p><p>&nbsp; &nbsp;e.str.reverse();将字符串反转</p><p>&nbsp;&nbsp; 例：StringBuffersb =new StringBuffer(“adfsdsd”);</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; sb.reverse();</p><p>&nbsp;&nbsp; f.</p><h3 id="32、replace-函数"><a href="#32、replace-函数" class="headerlink" title="32、replace();函数"></a>32、replace();函数</h3><p>&nbsp;&nbsp;&nbsp; 例1：//将字符串”abcdabcdabdcadcbadcb”的字符出现的次数输出</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Stringnum = “abcdabcdabdcadcbadcb”;</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; String t = num.replace(“a”,””);</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println(num.length()-t.length());</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; replaceAll()，用正则表达式</p><p>&nbsp;&nbsp;&nbsp; 例2：//将字符串中的数字去除&nbsp;&nbsp;</p><p>String num1 = “ab23c7da45bc5da65bd5c67ad7cb9adcb”;</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; String t1 = num1.replaceAll(“[0-9]”, “”);</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println(t1);</p><p>&nbsp;&nbsp;&nbsp; 例3：//计算字符串的长度，一个字符算两个&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; byte[]b =str.getBytes();</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println(b.length);//若出现一个汉字代表3个字节的情况，将Utf-8换成GBK就可以了</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; String m = str.replaceAll(“[\u4e00-\u9fa5]”, “xx”);</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println(m.length());</p><p>&nbsp;</p><h3 id="33、DecimalFormat（）-将数字转换成特定的格式"><a href="#33、DecimalFormat（）-将数字转换成特定的格式" class="headerlink" title="33、DecimalFormat（）;将数字转换成特定的格式"></a>33、DecimalFormat（）;将数字转换成特定的格式</h3><p>例：//数组格式化 int num = 1234567;&nbsp;换成123，4567</p><p>int num = 1234567;</p><p>DecimalFormat f =new DecimalFormat(“#,####”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String t =f.format(num);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(t);</p><p>&nbsp;&nbsp;&nbsp; 例： //将数组转换成123,4567.89的格式</p><p>doubled = 1234567.88898890;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DecimalFormat &nbsp;f =new DecimalFormat(“#,####.##”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(f.format(d));</p><h3 id="34、String类型是否可以被继承，为什么？"><a href="#34、String类型是否可以被继承，为什么？" class="headerlink" title="34、String类型是否可以被继承，为什么？"></a>34、String类型是否可以被继承，为什么？</h3><p>&nbsp;&nbsp;&nbsp; 不能被继承，因为是被final修饰的类</p><p>&nbsp;</p><h3 id="35、String类型是否是基本类型，比较String类型变量时，-和equals有何区别？"><a href="#35、String类型是否是基本类型，比较String类型变量时，-和equals有何区别？" class="headerlink" title="35、String类型是否是基本类型，比较String类型变量时，== 和equals有何区别？"></a>35、String类型是否是基本类型，比较String类型变量时，== 和equals有何区别？</h3><p>&nbsp;&nbsp;&nbsp; 不是，是引用类型</p><p>&nbsp;&nbsp;&nbsp; a.如果 String类型是直接赋值 == 和 equals 效果相同</p><p>&nbsp;&nbsp;&nbsp; &nbsp;String a = “abc “;</p><p>&nbsp;&nbsp;&nbsp; &nbsp;String b = “abc”;</p><p>&nbsp;&nbsp;&nbsp; &nbsp; a ==b 和 a.equals(b)都为true</p><p>&nbsp;&nbsp;&nbsp; b.如果String是通过new构建的 == 和equals效果不同</p><p>&nbsp;&nbsp;&nbsp; &nbsp;String a = new String（“abc”）；</p><p>&nbsp;&nbsp;&nbsp; &nbsp;String b = new String（“abc”）；</p><p>&nbsp;&nbsp;&nbsp; &nbsp; a ==b 结果为false</p><p>&nbsp;&nbsp;&nbsp; &nbsp; a．equals（b）结果为true</p><p>&nbsp;</p><h3 id="36、char类型中是否可以存放一个汉字，为什么？"><a href="#36、char类型中是否可以存放一个汉字，为什么？" class="headerlink" title="36、char类型中是否可以存放一个汉字，为什么？"></a>36、char类型中是否可以存放一个汉字，为什么？</h3><p>&nbsp;&nbsp;&nbsp; 可以，char类型中存放的数据以Unicode码存放。</p><p>&nbsp;</p><h3 id="37、Random-函数"><a href="#37、Random-函数" class="headerlink" title="37、Random()函数"></a>37、Random()函数</h3><p>&nbsp;&nbsp;&nbsp; //获取1-35之间的随机数</p><p>&nbsp;&nbsp;&nbsp; //第一种方法</p><p>Random r = new Random();</p><p>int n = r.nextInt(35)+1;</p><p>//第二种方法Math.random()是取得[0,1)之间的随机小数，取不到1。</p><p>int n =(int) (Math.random()*35+1);</p><p>&nbsp;</p><h2 id="java工具类"><a href="#java工具类" class="headerlink" title="java工具类"></a>java工具类</h2><p>Object：引用类型的根，是所有类的超类，是java中唯一一个没有父类的类</p><h3 id="1、toString-将对象转成字符串"><a href="#1、toString-将对象转成字符串" class="headerlink" title="1、toString():将对象转成字符串"></a>1、toString():将对象转成字符串</h3><h3 id="2、equals（）和-的区别："><a href="#2、equals（）和-的区别：" class="headerlink" title="2、equals（）和==的区别："></a>2、equals（）和==的区别：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp; ==：可以判断基本数据类型和引用数据类型</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 引用数据类型，表示两个对象的引用是否相等，即栈里面引用的地址是否相等</p><p>&nbsp;&nbsp;&nbsp;&nbsp; equals：可以判断引用数据类型</p><p>引用数据类型：表示两个对象的引用是否相等，但是包装类、String、Date、File除外（这些判断的是对象的值是否相等，即堆内存里面的值是否相等）</p><p>Stringstr1 = “abc”；</p><p>//创建一个字符串池中的对象，如果里面有此对象了就不再创建了，直接用即可</p><p>Stringstr2 = “abc”；</p><p>Stringstr3 = new String(“abc”)；</p><p>Stringstr4 = new String(“abc”)；</p><p>//可能产生两个或一个对象，在堆内存中首先new出一个对象，再复制到字符串池当中，如果字符串池中有此对象，即不复制。所有堆内存中的对象是肯定存在的，字符串池中的对象不一定</p><p>System.out.println(str1==str2)；true</p><p>System.out.println(str3==str4)；false</p><p>//str3在堆内存中new出一个内存、str4在堆内存中重新new出一个内存，在堆内存中相当于等号的右边。在栈内存中，指向堆内存中的引用值不一样，所有为false</p><p>System.out.println(str1==str3)；false</p><p>//str1是在堆内存中的字符串池里，为“abc”，str3在堆内存new出一个对象‘abc‘占用一块内存，并且复制到字符串池中，如果字符串池中有abc了，即不复制。</p><p>System.out.println(str1.equals(str2));true</p><p>System.out.println(str3.equals(str4));true</p><p>System.out.println(str1.equals(str3));true</p><p>//equals在String类型比较的堆内存的值是否相等，str1字符串池中的内存为abc，str3在堆内存中new出的对象是abc，这两个对象虽然分配的内存不同，但是值相等，所以为true</p><h3 id="3、重写equals方法必须先重写hashcode方法"><a href="#3、重写equals方法必须先重写hashcode方法" class="headerlink" title="3、重写equals方法必须先重写hashcode方法"></a>3、重写equals方法必须先重写hashcode方法</h3><p>相等的对象必须具有相同的哈希码，具有相同哈希码的对象不一定相等</p><h3 id="4、clone（）克隆"><a href="#4、clone（）克隆" class="headerlink" title="4、clone（）克隆"></a>4、clone（）克隆</h3><p>浅表克隆：复制原对象的所有变量的备份,但是引用类型的变量指向原对象的数据</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 必须实现一个接口implements Cloneable</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 重写Object类的克隆方法clone()</p><p>深表克隆：复制原对象的所有变量的备份，包括引用类型</p><h3 id="5、反射Class-forName-“com-A”"><a href="#5、反射Class-forName-“com-A”" class="headerlink" title="5、反射Class.forName(“com.A”);"></a>5、反射Class.forName(“com.A”);</h3><p>破坏了底层的封装性</p><h3 id="6、包装类"><a href="#6、包装类" class="headerlink" title="6、包装类"></a>6、包装类</h3><p>byteByte</p><p>shortShort</p><p>longLong</p><p>floatFloat</p><p>doubleDouble</p><p>BooleanBoolean</p><p>intIntegar</p><p>charCharacter</p><p>包装类与字符串转换：</p><p>&nbsp;&nbsp;&nbsp;&nbsp; xxxValue（）：转换成其他基本类型</p><p>&nbsp;&nbsp;&nbsp; 包装类-à字符串 toString（）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(i.toString());</p><p>&nbsp;&nbsp;&nbsp; 字符串-à整形 parseXxx（）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i4 =Integer.parseInt(“123”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double i5 =Double.parseDouble(“123.456”);</p><p>装箱和拆箱：JDK1.5只会自动装箱和拆箱</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 装箱：基本数据类型转换为引用数据类型</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Integer i5 = 10;</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 拆箱：引用数据类型转换为基本数据类型</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Integer i5 = 10;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i6 = i5;</p><h3 id="7、String类"><a href="#7、String类" class="headerlink" title="7、String类"></a>7、String类</h3><p>charAt（）方法：一般与for循环一起，遍历字符串</p><p>&nbsp;&nbsp;&nbsp; Stringstr = “Hello Java,Hello World”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp; for(int i=0;i&lt;str.length();i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(charAt(i));</p><p>&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>concat()方法;拼接字符串，将指定字符串连接到此字符串的结尾</p><p>&nbsp;&nbsp;&nbsp;&nbsp; str.concat(“s”);&nbsp; //得到Hello Java,Hello Worlds</p><p>startWith()方法;测试此字符串是否已指定的前缀开始，boolean</p><p>&nbsp;&nbsp;&nbsp;&nbsp; str. startWith(“Hello”); //true</p><p>format()方法:将字符串按照某种格式输出</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; inti=1;intj=2;</p><p>&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(String.format(“%d+%d=%d”,i,j,i+j));//1+2=3</p><p>indexOf(String)方法:输出字符串第一次出现的索引，没有的话输出-1</p><p>&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(str.indexOf(“Hello”));//0</p><p>lastIndexOf()方法:输出字符串最后一次出现的索引</p><p>replace(old String, new String)方法:替换字符串</p><p>split()方法:分割字符串</p><p>substring(int start,int end)方法:截取字符串</p><p>toCharArray()方法:变成字符数组</p><p>trim()方法:去掉字符串两端的空格，字符串中间的去不掉</p><p>toUpperCase()方法:将字符串转化为大写</p><p>&nbsp;</p><h3 id="8、StringBuffer和StringBuilder区别"><a href="#8、StringBuffer和StringBuilder区别" class="headerlink" title="8、StringBuffer和StringBuilder区别"></a>8、StringBuffer和StringBuilder区别</h3><p>StringBuffer线程安全的，同步的，效率比较低，JDK1.0之后出现</p><p>StringBuilder线程不安全，不同步的，效率比较高，JDK1.5之后出现</p><p>&nbsp;</p><h3 id="9、StringBuffer方法"><a href="#9、StringBuffer方法" class="headerlink" title="9、StringBuffer方法"></a>9、StringBuffer方法</h3><p>StringBuffersb = new StringBuffer（“aaa”）;</p><p>append 追加字符串</p><p>sb.append(“bb”).append(“bb”);</p><p>delete 删除</p><p>sb.delete(1,2).delete(1,2);</p><p>insert 插入</p><p>sb.insert(1,”22”).insert(1,false);</p><p>setCharAt 修改</p><p>sb.setCharAt(1,’Q’);</p><p>replace 替换</p><p>sb.replace(1,3,”MMM”);</p><p>reverse 反转</p><p>sb.reverse();</p><p>&nbsp;</p><h3 id="9、Math方法"><a href="#9、Math方法" class="headerlink" title="9、Math方法"></a>9、Math方法</h3><p>&nbsp;&nbsp;&nbsp; Math.ceil(2.4);//3取比值大的最小整数</p><p>&nbsp;&nbsp;&nbsp; Math.ceil(-2.4);//-2</p><p>&nbsp;&nbsp;&nbsp; Math.floor(2.5);//2取比值小的最大整数</p><p>&nbsp;&nbsp;&nbsp; Math.round(2.5);//3四舍五入</p><p>&nbsp;&nbsp;&nbsp; Math.round(-2.5);//-2</p><p>&nbsp;&nbsp;&nbsp; Math.random()//范围是[0,1)</p><p>&nbsp;&nbsp;&nbsp; Math.random()*40+60;//取60到99的成绩</p><p>&nbsp;&nbsp;&nbsp; Random方法：范围是[0,1)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Randomran &nbsp;= new Random();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(inti=0;i&lt;10;i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intscore = ran.nextInt(41)+60;//从60到100</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(score);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><h3 id="10、Date方法"><a href="#10、Date方法" class="headerlink" title="10、Date方法"></a>10、Date方法</h3><p>SimpleDateFormat类：改变时间的格式</p><p>SimpleDateFormatsdf = new SimpleDateFormat(“yyyy/MM/dd HH:mm:ss”);</p><p>Datedate = new Date();</p><p>//将日期格式转换成指定的字符串</p><p>Stringtime = sdf.format(date);</p><p>System.out.println(time);//现在的时间以yyyy/MM/dd HH:mm:ss格式输出</p><p>&nbsp;</p><p>//将格式化的字符串转换成日期对象</p><p>Datedate = sdf.parse(“1995/07/12 03:00:00”);</p><p>System.out.println(date);</p><p>&nbsp;</p><p>TimeZone（）设置时区</p><p>TimeZonetime=TimeZone.getTimeZone(“America/Los_Angeles”);</p><p>&nbsp;&nbsp;&nbsp; Calendar&nbsp;c2=Calendar.getInstance(time,Locale.US);</p><p>&nbsp;&nbsp;&nbsp; Date d=c2.getTime();</p><p>&nbsp;</p><p>GregorianCalendar单独获取年、月、日</p><p>GregorianCalendar gc =newGregorianCalendar(2017,3,5);</p><p>&nbsp;&nbsp;&nbsp; System.out.println(gc.get(Calendar.MONTH));</p><p>&nbsp;</p><p>System.currentTimeMillis();通常用于循环运算的时间</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long startTime = System.currentTimeMillis();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(){}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; longendTime = System.currentTimeMillis();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; longtime = endTime- startTime//计算出运算的时间</p><p>&nbsp;</p><h2 id="集合："><a href="#集合：" class="headerlink" title="集合："></a>集合：</h2><h3 id="1、集合和数组的区别："><a href="#1、集合和数组的区别：" class="headerlink" title="1、集合和数组的区别："></a>1、集合和数组的区别：</h3><p>&nbsp;&nbsp;&nbsp; 数组：可以包含基本数据类型或者引用数据类型的对象，数据定长的，访问较快</p><p>&nbsp;&nbsp;&nbsp; 集合：只能包含引用数据类型的对象，不定长。</p><h3 id="2、集合分类："><a href="#2、集合分类：" class="headerlink" title="2、集合分类："></a>2、集合分类：</h3><p>&nbsp;&nbsp;&nbsp; Set:集&nbsp;无序，不重复，父接口为Collection</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add（）;添加元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addAll（Collection）;添加子集合</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains（）;是否包括元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; containsAll（）;是否包含子集合</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; isEmpty();Boolean判断集合长度是否为0</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; remove（）;移除元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; removeAll（）;移除一个子集合</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; size（）;集合的大小</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toArray（）;将集合转换成数据</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set集合的遍历&nbsp; Iterator 迭代器</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Setset = new HashSet();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Iteratorit = set.iterator();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while(it.hasNext()){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Objectobj = it.next();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(obj);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set集合的遍历&nbsp; 增强for循环</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(Object obj:set){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(obj);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HashSet和TreeSet的区别：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HashSet：内部对象散列存取，顺序和输入的顺序不同</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TreeSet：元素会进行升序排序（元素是可比较的），顺序和输入的顺序也不同</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp; List:列表&nbsp;有序，重复，父接口为Collection</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add（）;添加元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addAll（Collection）;添加子集合</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add（key，元素）;插入元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get（key）;获取元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; indexOf(元素);返回元素的索引值，如果没有则返回-1</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; remove(key);移除元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; removeAll（）;移除一个子集合</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set（key,元素）;修改元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toArray();转换成数组</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List集合的遍历&nbsp; 普通for循环</p><p>Listlist = new ArrayList();</p><p>for(inti;i&lt;list.size();i++){</p><p>&nbsp;&nbsp;&nbsp; Object obj = list.get(i);</p><p>&nbsp;&nbsp;&nbsp; System.out.println(obj);</p><p>}</p><p>List集合的遍历&nbsp; 增强for循环</p><p>for(Object obj:list){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(obj);</p><p>}</p><p>List集合的遍历&nbsp; Iterator 迭代器</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Iterator it = list.iterator();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while(it.hasNext()){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Objectobj = it.next();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(obj);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ArrayList和LinkedList区别：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ArrayList底层物理存储为线性的（数组的存储方式），查询效率高，删除、添加等操作效率比较低</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LinkedList底层物理存储为链表的，查询效率低，删除、添加效率高</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ArrayList和Vector区别：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 两者底层物理存储为线性的</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ArrayList：线程不安全，不同步的，数据不安全，效率比较高</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector：线程安全的，同步的，数据安全，效率比较低</p><p>&nbsp;</p><p>Map:字典 键值对存储 key唯一，value可重复</p><p>&nbsp;&nbsp;&nbsp; put(key,values);添加元素</p><p>&nbsp;&nbsp;&nbsp; putAll(map);添加集合</p><p>&nbsp;&nbsp;&nbsp; remove（key）;移除一对元素</p><p>&nbsp;&nbsp;&nbsp; size();集合长度</p><p>&nbsp;&nbsp;&nbsp; containkey(key);是否包含某个键</p><p>&nbsp;&nbsp;&nbsp; containvalue（value）;是否包含某个值</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp; Map集合的遍历 keySet()</p><p>&nbsp;&nbsp;&nbsp; Set set = map.keySet();</p><p>&nbsp;&nbsp;&nbsp; Iterator it = set.iterator();</p><p>&nbsp;&nbsp;&nbsp; while(it.hasNext){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object key = it.next();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object value = map.get(key);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(key+”:”+value);</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; Map集合的遍历 entrySet()</p><p>&nbsp;&nbsp;&nbsp; Iterator it = map.entrySet().iterator();</p><p>&nbsp;&nbsp;&nbsp; while(it.hasNext()){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Map.Entry entry = (Map.Entry)it.next();</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println(entry.getKey()+”:”+entry.getValue());</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp; HashMap和Hashtable的区别：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HashMap：键值对允许为null，线程不安全，不同步，效率比较高</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hashtable：键值对不允许为null，线程安全，同步，效率比价低</p><p>&nbsp;&nbsp;&nbsp; HashMap和TreeMap的区别：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HashMap：基于哈希，是无序的</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TreeMap：基于树型结构的，按照键升序排序</p><p>&nbsp;</p><h3 id="3、Collections类："><a href="#3、Collections类：" class="headerlink" title="3、Collections类："></a>3、Collections类：</h3><p>Collections.sort():只针对List集合，集合中的元素必须是可比较的，如果为引用类型，则必须实现Comparator、Compareable（常用）接口</p><p>Collections.shuffle（list）：打乱顺序</p><p>Collections.rotate（list,int i）:根据指定的长度，轮换指定列表中的长度</p><p>Collections.reverse(list):反转集合</p><p>&nbsp;</p><p>&nbsp;</p><h2 id="泛型：数据类型参数化"><a href="#泛型：数据类型参数化" class="headerlink" title="泛型：数据类型参数化"></a>泛型：数据类型参数化</h2><h3 id="1、public-void-arr-T-t1-T-t2"><a href="#1、public-void-arr-T-t1-T-t2" class="headerlink" title="1、public void arr(T t1,T t2){"></a>1、public<t> void arr(T t1,T t2){</t></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ttemp = t1;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t1= t2;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t2= temp;</p><p>}</p><h3 id="2、泛型：安全的，避免了数据类型转换的风险"><a href="#2、泛型：安全的，避免了数据类型转换的风险" class="headerlink" title="2、泛型：安全的，避免了数据类型转换的风险"></a>2、泛型：安全的，避免了数据类型转换的风险</h3><h3 id="3、泛型约束：entends：如果有多个约束则使用-amp-连接，约束只能有一个类，可以有多个接口"><a href="#3、泛型约束：entends：如果有多个约束则使用-amp-连接，约束只能有一个类，可以有多个接口" class="headerlink" title="3、泛型约束：entends：如果有多个约束则使用&amp;连接，约束只能有一个类，可以有多个接口"></a>3、泛型约束：entends：如果有多个约束则使用&amp;连接，约束只能有一个类，可以有多个接口</h3><h3 id="4、通配符？"><a href="#4、通配符？" class="headerlink" title="4、通配符？"></a>4、通配符？</h3><p>&nbsp;&nbsp;&nbsp; 上届通配符：？ extends A：表示A或者A的子类</p><p>&nbsp;&nbsp;&nbsp; 下届通配符：？ super A：表示A或者A的父类类型</p><p>&nbsp;&nbsp;&nbsp; List<string>list = new ArrayList<string>();</string></string></p><p>&nbsp;&nbsp;&nbsp; List&lt;?extends Object&gt; listobj = list;//成立</p><p>&nbsp;&nbsp;&nbsp; List<object>listobj = list;//不成立 在泛型中<string>和<object>是同级关系<p></p><p>&nbsp;</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="1、构造方法"><a href="#1、构造方法" class="headerlink" title="1、构造方法"></a>1、构造方法</h3><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Filefile1 =new File(“D:\a.txt”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File file2 =new File(“d:\UI”,”a.txt”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File file3 = new File(“D:\UI”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Filefile4 =new File(file3,”a.txt”);</p><h3 id="2、mkdirs-创建多层文件夹"><a href="#2、mkdirs-创建多层文件夹" class="headerlink" title="2、mkdirs()创建多层文件夹"></a>2、mkdirs()创建多层文件夹</h3><p>&nbsp;&nbsp;&nbsp; File file5 = new File(“D:\UI\aaa”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(!file5.exists()){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file5.mkdirs();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><h3 id="3、getAbsolutePath-打印文件路径"><a href="#3、getAbsolutePath-打印文件路径" class="headerlink" title="3、getAbsolutePath()打印文件路径"></a>3、getAbsolutePath()打印文件路径</h3><p>&nbsp; &nbsp;getPath()打印文件路径</p><p>&nbsp;&nbsp;&nbsp; System.out.println(file5.getAbsolutePath());//D:\UI\aaa</p><h3 id="4、getName-获取文件名-aaa"><a href="#4、getName-获取文件名-aaa" class="headerlink" title="4、getName()()获取文件名//aaa"></a>4、getName()()获取文件名//aaa</h3><h3 id="5、getParent-获取文件目录，不包含文件名-D-UI"><a href="#5、getParent-获取文件目录，不包含文件名-D-UI" class="headerlink" title="5、getParent()获取文件目录，不包含文件名//D:\UI"></a>5、getParent()获取文件目录，不包含文件名//D:\UI</h3><h3 id="6、isHidden-文件是否被隐藏-false"><a href="#6、isHidden-文件是否被隐藏-false" class="headerlink" title="6、isHidden()文件是否被隐藏//false"></a>6、isHidden()文件是否被隐藏//false</h3><h3 id="7、isDirectory-判断是否是文件夹-true"><a href="#7、isDirectory-判断是否是文件夹-true" class="headerlink" title="7、isDirectory()判断是否是文件夹//true"></a>7、isDirectory()判断是否是文件夹//true</h3><h3 id="8、isFile-判断是否是文件"><a href="#8、isFile-判断是否是文件" class="headerlink" title="8、isFile() 判断是否是文件"></a>8、isFile() 判断是否是文件</h3><h3 id="9、exists-判断是否存在"><a href="#9、exists-判断是否存在" class="headerlink" title="9、exists() 判断是否存在"></a>9、exists() 判断是否存在</h3><h3 id="10、newDate-file5-lastModified-获取最后一次修改的日期"><a href="#10、newDate-file5-lastModified-获取最后一次修改的日期" class="headerlink" title="10、newDate(file5.lastModified()) 获取最后一次修改的日期"></a>10、newDate(file5.lastModified()) 获取最后一次修改的日期</h3><h3 id="11、length-文件的字节数"><a href="#11、length-文件的字节数" class="headerlink" title="11、length() 文件的字节数"></a>11、length() 文件的字节数</h3><h3 id="12、file5-list-文件名的遍历"><a href="#12、file5-list-文件名的遍历" class="headerlink" title="12、file5.list() 文件名的遍历"></a>12、file5.list() 文件名的遍历</h3><p>&nbsp; String[]str =file5.list();</p><p>&nbsp; for(String s :str){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(s);</p><p>&nbsp;&nbsp;&nbsp; }// 3.doc</p><p>5.FEM</p><p>e.txt</p><h3 id="13、file5-listFiles-文件的遍历"><a href="#13、file5-listFiles-文件的遍历" class="headerlink" title="13、file5.listFiles() 文件的遍历"></a>13、file5.listFiles() 文件的遍历</h3><p>&nbsp;&nbsp;&nbsp; File[]files = file5.listFiles();&nbsp;&nbsp;</p><p>for(File f :files){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(f.isFile()){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(“文件”+f.getName()+”\t”+new Date(f.lastModified()));</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(“文件夹”+f.getName());</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }//文件3.docFri Feb 24 10:33:28 CST2017</p><p>文件5.FEM&nbsp;&nbsp; Fri Feb 24 10:33:37 CST 2017</p><p>文件e.txt&nbsp;&nbsp; Fri Feb 24 10:33:32 CST 2017</p><h3 id="14、File-listRoots-盘符的遍历"><a href="#14、File-listRoots-盘符的遍历" class="headerlink" title="14、File.listRoots(); 盘符的遍历"></a>14、File.listRoots(); 盘符的遍历</h3><p>&nbsp;&nbsp;&nbsp; File[] f1 = File.listRoots();</p><p>&nbsp;&nbsp;&nbsp; for(Filef :f1){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(f.toString());</p><p>&nbsp;&nbsp;&nbsp; }// C:\</p><p>D:\</p><p>&nbsp;</p><h2 id="文件IO流"><a href="#文件IO流" class="headerlink" title="文件IO流"></a>文件IO流</h2><h3 id="1、-字节流"><a href="#1、-字节流" class="headerlink" title="1、 字节流"></a>1、 字节流</h3><p>FileInputStream&nbsp;输入流 读文件</p><p>BufferedInputStream输入流读文件</p><p>&nbsp;</p><p>FileOutputStream输出流写入文件</p><p>BufferedOutputStream输出流写入文件</p><h3 id="2、字符流"><a href="#2、字符流" class="headerlink" title="2、字符流"></a>2、字符流</h3><p>FileReader输入流读文件</p><p>DataInputStream输入流 读文件</p><p>&nbsp;</p><p>FileWriter输出流 写入文件</p><p>DataOutputStream输出流 写入文件</p><p>&nbsp;</p><h3 id="3、FileInputStream-读取英文文件"><a href="#3、FileInputStream-读取英文文件" class="headerlink" title="3、FileInputStream 读取英文文件"></a>3、FileInputStream 读取英文文件</h3><p>&nbsp;&nbsp;&nbsp; FileInputStreamfis = new FileInputStream(“D:\UI\bbb.txt”);</p><p>&nbsp;&nbsp;&nbsp; intch = 0;</p><p>&nbsp;&nbsp;&nbsp; while((ch= fis.read()) != -1){ //read从此输入流中读取一个数据字节，返回值为int</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print((char)ch);</p><p>&nbsp;&nbsp;&nbsp; }</p><p>fis.close();//此程序不能读中文</p><h3 id="4、FileInputStream-读取中文文件"><a href="#4、FileInputStream-读取中文文件" class="headerlink" title="4、FileInputStream 读取中文文件"></a>4、FileInputStream 读取中文文件</h3><p>&nbsp;&nbsp;&nbsp; FileInputStreamfis = new FileInputStream(“D:\UI\bbb.txt”);</p><p>&nbsp;&nbsp;&nbsp; byte[]bt = new byte[1024]; //将字节读入字节数组</p><p>&nbsp;&nbsp;&nbsp; intlen = 0;</p><p>&nbsp;&nbsp;&nbsp; while((len= fis.read(bt))!=-1){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(newString(bt,0,len));</p><p>&nbsp;&nbsp;&nbsp; }</p><h3 id="5、FileOutputStream-写入文件"><a href="#5、FileOutputStream-写入文件" class="headerlink" title="5、FileOutputStream 写入文件"></a>5、FileOutputStream 写入文件</h3><p>&nbsp;&nbsp;&nbsp; //搭建管道</p><p>FileOutputStream fos = new FileOutputStream(“D:\UI\bbb.txt”);</p><p>&nbsp;&nbsp;&nbsp; //读写操作</p><p>&nbsp;&nbsp;&nbsp; fos.write(98);//相当于b</p><p>&nbsp;&nbsp;&nbsp; fos.write(‘a’);</p><p>&nbsp;&nbsp;&nbsp; String str = “ssdsdfsf”;&nbsp;&nbsp;&nbsp; //写入字符串</p><p>&nbsp;&nbsp;&nbsp; byte[] b = str.getBytes();</p><p>&nbsp;&nbsp;&nbsp; fos.write(b);</p><p>&nbsp;&nbsp;&nbsp; fos.flush();//强制性的刷新缓冲区</p><p>&nbsp;&nbsp;&nbsp; //关闭流</p><p>&nbsp;&nbsp;&nbsp; if(fos !=null){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fos.close();</p><p>&nbsp;&nbsp;&nbsp; }</p><h3 id="6、DataOutputStream-写入boolean、double等类型的文件"><a href="#6、DataOutputStream-写入boolean、double等类型的文件" class="headerlink" title="6、DataOutputStream 写入boolean、double等类型的文件"></a>6、DataOutputStream 写入boolean、double等类型的文件</h3><p>&nbsp;&nbsp;&nbsp; FileOutputStream fos = null;</p><p>&nbsp;&nbsp;&nbsp; DataOutputStream dos = null;</p><p>&nbsp;&nbsp;&nbsp; fos =new FileOutputStream(“D:\UI\bbb.txt”);</p><p>&nbsp;&nbsp;&nbsp; dos =new DataOutputStream(fos);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; dos.writeBoolean(true);</p><p>&nbsp;&nbsp;&nbsp; dos.write(‘a’);</p><p>&nbsp;&nbsp;&nbsp; dos.writeDouble(12.34);</p><p>&nbsp;&nbsp;&nbsp; for(inti=0;i&lt;10;i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doubled = Math.random();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dos.writeDouble(d);</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; dos.flush();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; dos.close();</p><p>&nbsp;&nbsp;&nbsp; fos.close();</p><h3 id="7、DataInputStream读取boolean、double等类型的文件"><a href="#7、DataInputStream读取boolean、double等类型的文件" class="headerlink" title="7、DataInputStream读取boolean、double等类型的文件"></a>7、DataInputStream读取boolean、double等类型的文件</h3><p>&nbsp;&nbsp;&nbsp; FileInputStream fis =null;</p><p>&nbsp;&nbsp;&nbsp; DataInputStream dis = null;</p><p>&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; fis =new FileInputStream(“D:\UI\bbb.txt”);</p><p>&nbsp;&nbsp;&nbsp; dis =new DataInputStream(fis);</p><p>&nbsp;&nbsp;&nbsp; booleanbool =dis.readBoolean();</p><p>&nbsp;&nbsp;&nbsp; System.out.println(bool);// true</p><p>&nbsp;&nbsp;&nbsp; for(inti=0;i&lt;10;i++){</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; doubleb =dis.readDouble();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(b+”\t”);</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; dis.close();</p><p>&nbsp;&nbsp;&nbsp; fis.close();</p><p>&nbsp;&nbsp;&nbsp; // -6.414939283240485E-86&nbsp;&nbsp;</p><p>4.7384486223731214E285&nbsp;</p><p>7.602269187305488E-298&nbsp;</p><p>-1.4027415471626017E-278&nbsp;&nbsp;&nbsp;</p><p>9.32553721042958E-38&nbsp;&nbsp;&nbsp;</p><p>-1.0852988920338364E40&nbsp;</p><p>4.6544251087746895E49&nbsp;&nbsp;</p><p>1.0777059597027002E40&nbsp;&nbsp;</p><p>4.954807472569955E232&nbsp;&nbsp;</p><p>4.957881657894938E232&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><h3 id="8、序列化和反序列化"><a href="#8、序列化和反序列化" class="headerlink" title="8、序列化和反序列化"></a>8、序列化和反序列化</h3><p>&nbsp;&nbsp;&nbsp; 序列化：将对象的数据存储到文件 ObjectOutputStream</p><p>&nbsp;&nbsp;&nbsp; 反序列化：将文件中的数据重新读到对象 ObjectInputStream</p><p>&nbsp;&nbsp;&nbsp; 例题：在程序中创建一个Student类型的对象，并把对象信息保存到d:\io\student.txt文件中，然后再从文件中把Student对象的信息读出显示在控制台上。</p><p>&nbsp;&nbsp;&nbsp; //先建立Student类</p><p>publicclassStudentimplementsSerializable {//编写一个可序列化的类&nbsp; implements Serializable</p><p>&nbsp;&nbsp;&nbsp; privateintid;</p><p>&nbsp;&nbsp;&nbsp; private String name;</p><p>&nbsp;&nbsp;&nbsp; private String birth;</p><p>&nbsp;&nbsp;&nbsp; public Student(intid, Stringname, String birth) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.id = id;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.name = name;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.birth = birth;</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; @Override</p><p>&nbsp;&nbsp;&nbsp; public String toString() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; returnid+””+name+” “+birth;</p><p>&nbsp;&nbsp;&nbsp; }</p><p>}</p><p>//再进行序列化，即将Student对象写入文件，直接抛出异常范例</p><p>publicclass SObjectOutputStreamTest throws IOException{</p><p>&nbsp;&nbsp;&nbsp; publicstaticvoid main(String[] args) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Students1 = new Student(1,”we”,”1987-3-4”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Students2 = new Student(2,”you”,”1988-3-9”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileOutputStreamfos = null;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ObjectOutputStreamoos = null;</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fos = new FileOutputStream(“D:\io\student.txt”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oos = new ObjectOutputStream(fos);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oos.writeObject(s1);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oos.writeObject(s2);</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oos.close();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fos.close();</p><p>&nbsp;&nbsp;&nbsp; }</p><p>}</p><p>//进行反序列化，将文件中的语句读出到控制台，用try catch抓住异常范例</p><p>publicclass SObjectInputStreamTest {</p><p>&nbsp;&nbsp;&nbsp; publicstaticvoid main(String[]args) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileInputStream fis = null;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ObjectInputStream ois = null;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fis =new FileInputStream(“D:\io\student.txt”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ois =new ObjectInputStream(fis);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student s1 = (Student)ois.readObject();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student s2 = (Student)ois.readObject();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s1.toString());</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s2.toString());</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (FileNotFoundException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }catch (IOException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }catch (ClassNotFoundException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }finally{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(ois!=null){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ois.close();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }catch (IOException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(fis!=null){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fis.close();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}catch (IOException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }</p><p>}</p><p>&nbsp;</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="1、-进程：一个应用程序的一次运行，包含多线程"><a href="#1、-进程：一个应用程序的一次运行，包含多线程" class="headerlink" title="1、 进程：一个应用程序的一次运行，包含多线程"></a>1、 进程：一个应用程序的一次运行，包含多线程</h3><p>多线程：一个应用程序运行过程中的某些独立的片段</p><h3 id="2、-进程与线程的区别（优缺点）"><a href="#2、-进程与线程的区别（优缺点）" class="headerlink" title="2、 进程与线程的区别（优缺点）"></a>2、 进程与线程的区别（优缺点）</h3><p>进程：进程间切换耗费系统资源，数据安全（独立的代码和数据空间）</p><p>线程：线程间切换系统耗费比较小，数据不安全（共享代码和数据空间）</p><h3 id="3、-编写线程（掌握）"><a href="#3、-编写线程（掌握）" class="headerlink" title="3、 编写线程（掌握）"></a>3、 编写线程（掌握）</h3><p>a． 继承Thread类</p><p>publicclass ThreadTest1 {</p><p>publicstaticvoid main(String[] args) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ThreadDemotd = new ThreadDemo();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; td.start();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(inti=0;i&lt;1000;i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(“the main is:”+i);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>}</p><p>&nbsp;&nbsp;&nbsp; }</p><p>publicclass ThreadDemoextends Thread {</p><p>&nbsp;&nbsp;&nbsp; @Override</p><p>&nbsp;&nbsp;&nbsp; publicvoid run() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(inti=0;i&lt;1000;i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(“the run is:”+i);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }</p><p>}</p><p>b． 实现Runnable接口（推荐，因为java类和类是单继承的）</p><p>publicclass RunnableTest {</p><p>&nbsp;&nbsp;&nbsp; publicstaticvoid main(String[] args) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RunnableDemord = new RunnableDemo();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Threadthread = new Thread(rd);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thread.start();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(inti=0;i&lt;1000;i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(“the main is:”+i);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(500);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }</p><p>}</p><p>&nbsp;</p><p>publicclass RunnableDemoimplementsRunnable{</p><p>&nbsp;&nbsp;&nbsp; @Override</p><p>&nbsp;&nbsp;&nbsp; publicvoid run() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(inti=0;i&lt;1000;i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(“the run is:”+i);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(500);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }</p><p>}</p><h3 id="4、CPU调度"><a href="#4、CPU调度" class="headerlink" title="4、CPU调度"></a>4、CPU调度</h3><p>&nbsp;&nbsp;&nbsp; 抢占式</p><p>&nbsp;&nbsp;&nbsp; 轮时间片</p><h3 id="5、让线程从运行状态进入到阻塞状态"><a href="#5、让线程从运行状态进入到阻塞状态" class="headerlink" title="5、让线程从运行状态进入到阻塞状态"></a>5、让线程从运行状态进入到阻塞状态</h3><p>Thread.yield();//暂停</p><p>Thread.sleep(500);//休眠</p><p>join();//在A线程中加入B线程，待B线程运行完后，再运行A线程</p><h3 id="6、线程其他方法"><a href="#6、线程其他方法" class="headerlink" title="6、线程其他方法"></a>6、线程其他方法</h3><p>&nbsp;&nbsp;&nbsp; setName（）：给线程起名字，默认的名字Thread-X；x从0开始</p><p>getName（）：得到线程的名字</p><p>Thread.currentThread().getName()：得到当前运行线程的名字</p><p>&nbsp;&nbsp;&nbsp; setPriority();设置线程的优先级数值</p><p>getPriority();获得线程的优先级数值</p><p>setDaemon(true);设置为守护线程</p><h3 id="7、用户线程和守护线程的区别"><a href="#7、用户线程和守护线程的区别" class="headerlink" title="7、用户线程和守护线程的区别"></a>7、用户线程和守护线程的区别</h3><p>&nbsp;&nbsp;&nbsp; 用户线程（前台线程）：必须执行完毕</p><p>&nbsp;&nbsp;&nbsp; 守护线程（精灵线程、后台线程）：线程体执行完毕也可，执行不完毕也可以，例如垃圾回收</p><h3 id="8、线程同步："><a href="#8、线程同步：" class="headerlink" title="8、线程同步："></a>8、线程同步：</h3><p>&nbsp;&nbsp;&nbsp; 加锁同步：一个对象只能有一把锁</p><p>&nbsp;&nbsp;&nbsp; 语句加锁 synchronized（对象）{}：可以对本类对象（this）和其他类对象（new 类）加锁；某个方法中的某些句子加锁，无法得知哪些方法是被synchronized保护的</p><p>&nbsp;&nbsp;&nbsp; 方法加锁 synchronized void methodA（）{}：只能对本类对象加锁；整个方法的所有语句加锁；可以显示得知方法是被synchronized保护的</p><h3 id="9、死锁：两个线程，彼此在等待对方占据的锁"><a href="#9、死锁：两个线程，彼此在等待对方占据的锁" class="headerlink" title="9、死锁：两个线程，彼此在等待对方占据的锁"></a>9、死锁：两个线程，彼此在等待对方占据的锁</h3><p>&nbsp;&nbsp;&nbsp; 锁的几种归还方式：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a．基本上执行完同步的程序代码后，锁会自动归还</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b．用break语句跳出同步的语句块，不过这对于写在方法声明的synchronized没有作用</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c．遇到return语句</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d．遇到了异常</p><h3 id="10、线程的生命周期"><a href="#10、线程的生命周期" class="headerlink" title="10、线程的生命周期"></a>10、线程的生命周期</h3><p>&nbsp;&nbsp;&nbsp;</p><p>&nbsp;</p><h2 id="网络编程（java-net）"><a href="#网络编程（java-net）" class="headerlink" title="网络编程（java.net）"></a>网络编程（java.net）</h2><h3 id="1、七层协议："><a href="#1、七层协议：" class="headerlink" title="1、七层协议："></a>1、七层协议：</h3><p>&nbsp;&nbsp;&nbsp;</p><h3 id="2、两台电脑之间的通信"><a href="#2、两台电脑之间的通信" class="headerlink" title="2、两台电脑之间的通信"></a>2、两台电脑之间的通信</h3><p>&nbsp;&nbsp;&nbsp; ip：ipv4（32位）、ipv6（128位）</p><p>&nbsp;&nbsp;&nbsp; 端口:1521（oracle）、8080（Tomcat默认的端口）、21（ftp）、80（默认的）</p><p>&nbsp;&nbsp;&nbsp; 协议：</p><p>UDP：传输层，用户数据的协议，无连接的协议，不可靠的，不能够准确到达，效率比较高，适用于数据量比较大并且允许出错的，比如网络视频</p><p>TCP/IP:传输层 ，有连接的协议，可靠的、准确的到达，效率比较低</p><p>http：https：ftp等在应用层</p><p>&nbsp;&nbsp;&nbsp; http协议：明文无状态的</p><p>&nbsp;&nbsp;&nbsp; https：密文</p><h3 id="3、客户端和服务器端"><a href="#3、客户端和服务器端" class="headerlink" title="3、客户端和服务器端"></a>3、客户端和服务器端</h3><p>&nbsp;&nbsp;&nbsp; 基于UDP的</p><p>客户端：</p><p>Socket client = new Socket(“10.25.116.222”,8088);</p><p>&nbsp;&nbsp;&nbsp; 服务器端：&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ServerSocketserver =ServerSocket(8088);ji</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Socket s =server.accept();</p><h3 id="4、-端口号范围是0-65535，用户普通网络程序用1024以上"><a href="#4、-端口号范围是0-65535，用户普通网络程序用1024以上" class="headerlink" title="4、 端口号范围是0-65535，用户普通网络程序用1024以上"></a>4、 端口号范围是0-65535，用户普通网络程序用1024以上</h3><h3 id="5、-InetAddress此类表示互联网协议ip地址"><a href="#5、-InetAddress此类表示互联网协议ip地址" class="headerlink" title="5、 InetAddress此类表示互联网协议ip地址"></a>5、 InetAddress此类表示互联网协议ip地址</h3><p>InetAddress address = InetAddress.getByName(“主机名”);</p><h3 id="6、getHostName（）获取此IP地址的主机名"><a href="#6、getHostName（）获取此IP地址的主机名" class="headerlink" title="6、getHostName（）获取此IP地址的主机名"></a>6、getHostName（）获取此IP地址的主机名</h3><p>getHostAddress（）获取IP地址字符串</p><p>getByName()通过主机名获取ip地址</p><p>getLocalPort()获取本程序所用接口</p><p>&nbsp;</p><h2 id="JAVA7新特性"><a href="#JAVA7新特性" class="headerlink" title="JAVA7新特性"></a>JAVA7新特性</h2><h3 id="1、数值型的数据赋值可以使用下划线-增加可读性"><a href="#1、数值型的数据赋值可以使用下划线-增加可读性" class="headerlink" title="1、数值型的数据赋值可以使用下划线_ 增加可读性"></a>1、数值型的数据赋值可以使用下划线_ 增加可读性</h3><p>&nbsp;&nbsp;&nbsp; 不能写在小数点后;</p><p>&nbsp;&nbsp;&nbsp; 不能在数值型数据的开始</p><p>不能在数值型数据的最后添加</p><p>Doublepi = 3.1415_9265</p><p>Intbillion = 1_000_000_000</p><h3 id="2、-可以声明n进制数据"><a href="#2、-可以声明n进制数据" class="headerlink" title="2、 可以声明n进制数据"></a>2、 可以声明n进制数据</h3><p>Int i1= 0b0100;//4二进制前方放0b</p><p>Inti2 = 07; //7八进制前方放0</p><p>Inti3 = 0x00ad;//十六进制前方放0x</p><h3 id="3、switch-表达式："><a href="#3、switch-表达式：" class="headerlink" title="3、switch:表达式："></a>3、switch:表达式：</h3><p>&nbsp;&nbsp;&nbsp;jdk1.7以下byte、short、char、int；</p><p>jdk1.7以上在上面基础上加上String</p><h3 id="4、try（IO流）"><a href="#4、try（IO流）" class="headerlink" title="4、try（IO流）{"></a>4、try（IO流）{</h3><p>Stringstr=br.readLine();</p><p>}catch (ArithmeticException | IOException e) {//catch里可以有多个异常类，不能是父子关系</p><p>&nbsp;&nbsp;&nbsp;&nbsp; e.printStackTrace();</p><p>}//不用关闭流了，自动资源管理器</p><h3 id="5、泛型"><a href="#5、泛型" class="headerlink" title="5、泛型"></a>5、泛型</h3><p>&nbsp;&nbsp;&nbsp; List<string>list = new List<string>();//jdk1.7以下</string></string></p><p>&nbsp;&nbsp;&nbsp; List<string>list = new List&lt; &gt;();&nbsp; //jdk1.7以上</string></p><h3 id="6、新加G1垃圾回收器-提高效率"><a href="#6、新加G1垃圾回收器-提高效率" class="headerlink" title="6、新加G1垃圾回收器 提高效率"></a>6、新加G1垃圾回收器 提高效率</h3><h3 id="7、NIO2"><a href="#7、NIO2" class="headerlink" title="7、NIO2"></a>7、NIO2</h3><p>&nbsp;&nbsp;&nbsp; Files.copy(Paths.get(文件一),Paths.get(文件二));//直接复制文件</p><p>&nbsp;&nbsp;&nbsp; File.createFile();//创建新文件</p><p>&nbsp;&nbsp;&nbsp; File.move();//移动</p><p>&nbsp;&nbsp;&nbsp; File.delete();</p><p>&nbsp;&nbsp;&nbsp; //用WatchService类型实现文件监控</p><p>&nbsp;&nbsp;&nbsp; WatchServicewatchService = FileSystems.getDefault().newWatchService();</p><p>&nbsp;</p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="1、编写jdbc程序的步骤："><a href="#1、编写jdbc程序的步骤：" class="headerlink" title="1、编写jdbc程序的步骤："></a>1、编写jdbc程序的步骤：</h3><p>&nbsp;&nbsp; 1）添加数据库的驱动jar包&nbsp;ojbc5.jar或者ojdbc6.jar或者classes12.jar</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 工程名右击—Build Path—Add External Archives—数据库安装路径—jdbc-ojdbc6.jar</p><p>&nbsp;&nbsp; 2）创建驱动类对象&nbsp; OracleDriver对象</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建反射机制</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class.forName(“oracle.jdbc.driver.OracleDriver”);</p><p>&nbsp;&nbsp; 3）连接数据库&nbsp; Connection</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stringutl = “jdbc:oracle:thin:@YLMF123-3131857:1521:orcl”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stringuser = “scott”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stringpassword = “tiger”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connectionconn = DriverManager.getConnection(url,user,password);</p><p>&nbsp;&nbsp; 4）操作数据库&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //第一种方法Statement会引起注入，不推荐使用</p><p>String sql = “select deptno,dname,loc from dept”;</p><p>Statement stmt = conn.createStatement();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ResultSet rs =stmt.executeQuery(sql);//发送sql语句到数据库，然后将查询到的结果返回到ResultSet</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //int I = stmt.executeUpdate(sql);//查询影响的行数</p><p>while(rs.next()){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intdeptno =rs.getInt(1);//列的索引从1开始计</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String dname =rs.getString(2);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String loc =rs.getString(3);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(deptno+”\t”+dname+”\t”+loc);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;</p><p>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //第二种方法PreparedStatement防止注入 推荐使用</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String sql = “insert into dept(deptno,dname,loc) values(?,?,?)”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pstmt = conn.prepareStatement(sql);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intdeptno = 35;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String dname = “sdfs”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String loc = “北京”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pstmt.setInt(1, deptno);//第一个问号放deptno</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pstmt.setString(2, dname);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pstmt.setString(3, loc);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pstmt.executeUpdate();//执行删除、插入、修改语句，executeQuery执行查询语句</p><p>5）关闭数据库</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.close();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stmt.close();</p><p>&nbsp;&nbsp;&nbsp; conn.close();</p><h3 id="2、批处理："><a href="#2、批处理：" class="headerlink" title="2、批处理："></a>2、批处理：</h3><p>&nbsp;&nbsp; stmt.addBatch(sql1);</p><p>&nbsp;&nbsp;&nbsp; stmt.addBatch(sql2);//可以执行多句sql语句</p><p>&nbsp;&nbsp; executeBatch();//执行</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String sql=”insert intodept(deptno,dname,loc) values(?,?,?)”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pstmt=conn.prepareStatement(sql);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pstmt.setInt(1, 51);</p><p>&nbsp;&nbsp;&nbsp; pstmt.setString(2, “电信部”);</p><p>&nbsp;&nbsp;&nbsp; pstmt.setString(3, “上海”);</p><p>&nbsp;&nbsp;&nbsp; pstmt.addBatch();</p><p>&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; pstmt.setInt(1, 52);</p><p>&nbsp;&nbsp;&nbsp; pstmt.setString(2, “实施部”);</p><p>&nbsp;&nbsp;&nbsp; pstmt.setString(3, “广州”);</p><p>&nbsp;&nbsp;&nbsp; pstmt.addBatch();</p><p>&nbsp;</p><p>pstmt.executeBatch();</p><h3 id="3、事务"><a href="#3、事务" class="headerlink" title="3、事务"></a>3、事务</h3><p>&nbsp;&nbsp;&nbsp; conn.setAutoCommit（false）：设置为手动提交事务</p><p>&nbsp;&nbsp; conn.commit()：提交</p><p>&nbsp; &nbsp; conn.rollback()：回滚,catch里面</p><h3 id="4、元数据"><a href="#4、元数据" class="headerlink" title="4、元数据"></a>4、元数据</h3><p>&nbsp;&nbsp;&nbsp; DatabaseMetaData：数据库的元数据</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DatabaseMetaDatadmd = conn.getMetaData();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dmd.getUserName();//获得数据库名称</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dmd.getURL();//获得接口名jdbc:oracle:thin:@YLMF123-2141651:1521:orcl&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; dmd.getDriverName();//当前驱动Oracle JDBC driver</p><p>&nbsp;&nbsp;&nbsp; ParameterMetaData：参数的元数据</p><p>&nbsp;&nbsp;&nbsp; ResultSetMetaData：结果集的元数据</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ResultSetMetaDatarmd = rs.getMetaData();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intcount = rmd.getColumnCount();//获取结果集有多少列</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; for(int i=0;i&lt;count;i++){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(“列标题”+rmd.getColumnLable(i)+”数据类型”+rmd.getColumnTypeName(i));</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><h3 id="5、DAO"><a href="#5、DAO" class="headerlink" title="5、DAO:"></a>5、DAO:</h3><p>&nbsp;1)实体类：一个对象相当于数据库表中的一行</p><p>&nbsp;&nbsp;&nbsp; privateintdeptno;</p><p>&nbsp;&nbsp;&nbsp; public Dept() {}</p><p>&nbsp;&nbsp;&nbsp; publicint getDeptno() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; returndeptno;</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; publicvoid setDeptno(intdeptno) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.deptno =deptno;</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; @Override</p><p>&nbsp;&nbsp;&nbsp; public String toString() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return”Dept [deptno=” +deptno +”,dname=” +dname +”, loc=” +loc +”]”;</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;2)操作接口：可扩展</p><p>&nbsp;&nbsp;&nbsp; publicinterface DeptDao {</p><p>&nbsp;&nbsp;&nbsp; void insertDept(Dept dept);</p><p>&nbsp;&nbsp;&nbsp; void updateDept(Dept dept);</p><p>&nbsp;&nbsp;&nbsp; void deleteDept(intdeptno);</p><p>&nbsp;&nbsp;&nbsp; List<dept>&nbsp; getAllDepts();</dept></p><p>&nbsp;&nbsp;&nbsp; DeptgetDeptByDeptno(intdeptno);</p><p>}</p><p>&nbsp;3)操作类：</p><p>&nbsp;&nbsp;&nbsp; publicclass DeptDaoImplimplementsDeptDao {</p><p>&nbsp;&nbsp;&nbsp; @Override</p><p>&nbsp;&nbsp;&nbsp; publicvoid insertDept(Dept dept) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection conn = null;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PreparedStatement pstmt = null;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conn = DbUtils.getConnection();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String sql =”insert into dept(deptno,dname,loc)values(?,?,?)”;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstmt =conn.prepareStatement(sql);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstmt.setInt(1, dept.getDeptno());</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstmt.setString(2, dept.getDname());</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstmt.setString(3, dept.getLoc());</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstmt.executeUpdate();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (SQLException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }finally{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DbUtils.closeStatement(pstmt);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DbUtils.closeConnection(conn);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;4)工具类：将重复的代码包装成工具类</p><p>&nbsp;&nbsp;&nbsp; publicclass DbUtils {</p><p>&nbsp;&nbsp;&nbsp; privatestaticfinal StringURL =”jdbc:oracle:thin:@YLMF123-2141651:1521:orcl”;</p><p>&nbsp;&nbsp;&nbsp; privatestaticfinal StringUSER =”scott”;</p><p>&nbsp;&nbsp;&nbsp; privatestaticfinal StringPASSWORD=”tiger”;</p><p>&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; private DbUtils(){}//构造方法</p><p>&nbsp;&nbsp;&nbsp; static{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class.forName(“oracle.jdbc.driver.OracleDriver”);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (ClassNotFoundException e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp; }</p><p>&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp; publicstatic Connection getConnection(){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection conn = null;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conn = DriverManager.getConnection(URL,USER,PASSWORD);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (SQLException e) {</